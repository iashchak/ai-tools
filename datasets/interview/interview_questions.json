[{"question":"What is Angular Framework?","answer":"Angular is a TypeScript-based open-source front-end platform that makes it easy to build web, mobile and desktop applications. The major features of this framework include declarative templates, dependency injection, end to end tooling which ease application development."},{"question":"What is the difference between AngularJS and Angular?","answer":"Angular is a completely revived component-based framework in which an application is a tree of individual components.\nHere are some of the major differences in tabular format:-| AngularJS | Angular |\n|---- | ---------\n| It is based on MVC architecture| This is based on Service\/Controller|\n| It uses JavaScript to build the application| Uses TypeScript to build the application|\n| Based on controllers concept| This is a component based UI approach|\n| No support for mobile platforms| Fully supports mobile platforms|\n| Difficult to build SEO friendly application| Ease to build SEO friendly applications|"},{"question":"What is TypeScript?","answer":"TypeScript is a strongly typed superset of JavaScript created by Microsoft that adds optional types, classes, async\/await and many other features, and compiles to plain JavaScript. Angular is written entirely in TypeScript as a primary language.\nYou can install TypeScript globally as\n```cmd\nnpm install -g typescript\n```\nLet's see a simple example of TypeScript usage:-\n```typescript\nfunction greeter(person: string) {\n    return \"Hello, \" + person;\n}\nlet user = \"Sudheer\";document.body.innerHTML = greeter(user);\n```\nThe greeter method allows only string type as argument."},{"question":"Write a pictorial diagram of Angular architecture?","answer":"The main building blocks of an Angular application are shown in the diagram below:-\n![ScreenShot](images\/architecture.png)"},{"question":"What are the key components of Angular?","answer":"Angular has the key components below,\n\nComponent: These are the basic building blocks of an Angular application to control HTML views.\nModules: An Angular module is a set of angular basic building blocks like components, directives, services etc. An application is divided into logical pieces and each piece of code is called as \"module\" which perform a single task.\nTemplates: These represent the views of an Angular application.\nServices: Are used to create components which can be shared across the entire application.\nMetadata: This can be used to add more data to an Angular class."},{"question":"What are directives?","answer":"Directives add behaviour to an existing DOM element or an existing component instance.\n```typescript\nimport { Directive, ElementRef, Input } from '@angular\/core';\n@Directive({ selector: '[myHighlight]' })\nexport class HighlightDirective {\n    constructor(el: ElementRef) {\n       el.nativeElement.style.backgroundColor = 'yellow';\n    }\n}\n```Now this directive extends HTML element behavior with a yellow background as below\nhtml\n<p myHighlight>Highlight me!<\/p>\n7. ### What are components?\nComponents are the most basic UI building block of an Angular app, which form a tree of Angular components. These components are a subset of directives. Unlike directives, components always have a template, and only one component can be instantiated per element in a template.\nLet's see a simple example of Angular component\n```typescript\nimport { Component } from '@angular\/core';@Component ({\n   selector: 'my-app',\n   template: <div>\n      <h1>{{title}}<\/h1>\n      <div>Learn Angular6 with examples<\/div>\n   <\/div>,\n})export class AppComponent {\n   title: string = 'Welcome to Angular world';\n}\n```"},{"question":"What are the differences between Component and Directive?","answer":"In a short note, A component(@component) is a directive-with-a-template.\nSome of the major differences are mentioned in a tabular form| Component | Directive |\n|---- | ---------\n| To register a component we use @Component meta-data annotation  | To register a directive we use @Directive meta-data annotation |\n| Components are typically used to create UI widgets| Directives are used to add behavior to an existing DOM element |\n| Component is used to break down the application into smaller components| Directive is used to design re-usable components|\n| Only one component can be present per DOM element | Many directives can be used per DOM element |\n| @View decorator or templateurl\/template are mandatory | Directive doesn't use View|"},{"question":"What is a template?","answer":"A template is a HTML view where you can display data by binding controls to properties of an Angular component. You can store your component's template in one of two places. You can define it inline using the template property, or you can define the template in a separate HTML file and link to it in the component metadata using the @Component decorator's templateUrl property.\nUsing inline template with template syntax,\n```typescript\nimport { Component } from '@angular\/core';@Component ({\n   selector: 'my-app',\n   template: '\n      \n{{title}}\nLearn Angular\n\n   '\n})export class AppComponent {\n   title: string = 'Hello World';\n}\n**Using separate template file such as app.component.html**typescript\nimport { Component } from '@angular\/core';@Component ({\n   selector: 'my-app',\n   templateUrl: 'app\/app.component.html'\n})export class AppComponent {\n   title: string = 'Hello World';\n}\n```"},{"question":"What is a module?","answer":"Modules are logical boundaries in your application and the application is divided into separate modules to separate the functionality of your application.\nLets take an example of app.module.ts root module declared with @NgModule decorator as below,\n```typescript\nimport { NgModule }      from '@angular\/core';\nimport { BrowserModule } from '@angular\/platform-browser';\nimport { AppComponent }  from '.\/app.component';@NgModule ({\n   imports:      [ BrowserModule ],\n   declarations: [ AppComponent ],\n   bootstrap:    [ AppComponent ],\n   providers: []\n})\nexport class AppModule { }\n```\nThe NgModule decorator has five important (among all) options:\n1. The imports option is used to import other dependent modules. The BrowserModule is required by default for any web based angular application.\n2. The declarations option is used to define components in the respective module.\n3. The bootstrap option tells Angular which Component to bootstrap in the application.\n4. The providers option is used to configure a set of injectable objects that are available in the injector of this module.\n5. The entryComponents option is a set of components dynamically loaded into the view."},{"question":"What are lifecycle hooks available?","answer":"Angular application goes through an entire set of processes or has a lifecycle right from its initiation to the end of the application.\nThe representation of lifecycle in pictorial representation as follows,\nThe description of each lifecycle method is as below,\n1. ngOnChanges: When the value of a data bound property changes, then this method is called.\n2. ngOnInit: This is called whenever the initialization of the directive\/component after Angular first displays the data-bound properties happens.\n3. ngDoCheck: This is for the detection and to act on changes that Angular can't or won't detect on its own.\n4. ngAfterContentInit: This is called in response after Angular projects external content into the component's view.\n5. ngAfterContentChecked: This is called in response after Angular checks the content projected into the component.\n6. ngAfterViewInit: This is called in response after Angular initializes the component's views and child views.\n7. ngAfterViewChecked: This is called in response after Angular checks the component's views and child views.\n8. ngOnDestroy: This is the cleanup phase just before Angular destroys the directive\/component."},{"question":"What is a data binding?","answer":"Data binding is a core concept in Angular and allows to define communication between a component and the DOM, making it very easy to define interactive applications without worrying about pushing and pulling data. There are four forms of data binding(divided as 3 categories) which differ in the way the data is flowing.\n\n\nFrom the Component to the DOM:\nInterpolation: {{ value }}: Adds the value of a property from the component\nhtml\n<li>Name: {{ user.name }}<\/li>\n<li>Address: {{ user.address }}<\/li>\nProperty binding: [property]=\u201dvalue\u201d: The value is passed from the component to the specified property or simple HTML attribute\nhtml\n<input type=\"email\" [value]=\"user.email\">\n    2. From the DOM to the Component:\nEvent binding: (event)=\u201dfunction\u201d: When a specific DOM event happens (eg.: click, change, keyup), call the specified method in the component\nhtml\n<button (click)=\"logout()\"><\/button>\n    3. Two-way binding:\nTwo-way data binding: [(ngModel)]=\u201dvalue\u201d: Two-way data binding allows to have the data flow both ways. For example, in the below code snippet, both the email DOM input and component email property are in sync\nhtml\n<input type=\"email\" [(ngModel)]=\"user.email\">"},{"question":"What is metadata?","answer":"Metadata is used to decorate a class so that it can configure the expected behavior of the class. The metadata is represented by decorators\n\n\nClass decorators, e.g. @Component and @NgModule\n    ```typescript\n    import { NgModule, Component } from '@angular\/core';\n@Component({\n  selector: 'my-component',\n  template: 'Class decorator',\n})\nexport class MyComponent {\n  constructor() {\n    console.log('Hey I am a component!');\n  }\n}\n@NgModule({\n  imports: [],\n  declarations: [],\n})\nexport class MyModule {\n  constructor() {\n    console.log('Hey I am a module!');\n  }\n}\n2. **Property decorators** Used for properties inside classes, e.g. @Input and @Outputtypescript\nimport { Component, Input } from '@angular\/core';\n@Component({\n    selector: 'my-component',\n    template: 'Property decorator'\n})\nexport class MyComponent {\n    @Input()\n    title: string;\n}\n3. **Method decorators** Used for methods inside classes, e.g. @HostListenertypescript\nimport { Component, HostListener } from '@angular\/core';\n@Component({\n    selector: 'my-component',\n    template: 'Method decorator'\n})\nexport class MyComponent {\n    @HostListener('click', ['$event'])\n    onHostClick(event: Event) {\n        \/\/ clicked, event available\n    }\n}\n4. **Parameter decorators** Used for parameters inside class constructors, e.g. @Inject, @Optionaltypescript\nimport { Component, Inject } from '@angular\/core';\nimport { MyService } from '.\/my-service';\n@Component({\n    selector: 'my-component',\n    template: 'Parameter decorator'\n})\nexport class MyComponent {\n    constructor(@Inject(MyService) myService) {\n        console.log(myService); \/\/ MyService\n    }\n}\n14. ### What is angular CLI?\n    Angular CLI(**Command Line Interface**) is a command line interface to scaffold and build angular apps using nodejs style (commonJs) modules.\n    You need to install using below npm command,\n    npm install @angular\/cli@latest\n    ```\n    Below are the list of few commands, which will come handy while creating angular projects\n    1. Creating New Project: ng new \n\n\nGenerating Components, Directives & Services: ng generate\/g \n    The different types of commands would be,\n\nng generate class my-new-class: add a class to your application\nng generate component my-new-component: add a component to your application\nng generate directive my-new-directive: add a directive to your application\nng generate enum my-new-enum: add an enum to your application\nng generate module my-new-module: add a module to your application\nng generate pipe my-new-pipe: add a pipe to your application\nng generate service my-new-service: add a service to your application\n\n\n\nRunning the Project: ng serve"},{"question":"What is the difference between constructor and ngOnInit?","answer":"The **Constructor** is a default method of the class that is executed when the class is instantiated and ensures proper initialisation of fields in the class and its subclasses. Angular, or better Dependency Injector (DI), analyses the constructor parameters and when it creates a new instance by calling new MyClass() it tries to find providers that match the types of the constructor parameters, resolves them and passes them to the constructor.  \n**ngOnInit** is a life cycle hook called by Angular to indicate that Angular is done creating the component.  \nMostly we use ngOnInit for all the initialization\/declaration and avoid stuff to work in the constructor. The constructor should only be used to initialize class members but shouldn't do actual \"work\".\nSo you should use constructor() to setup Dependency Injection and not much else. ngOnInit() is better place to \"start\" - it's where\/when components' bindings are resolved.\n```typescript\nexport class App implements OnInit{\n  constructor(private myService: MyService){\n     \/\/called first time before the ngOnInit()\n  }ngOnInit(){\n     \/\/called after the constructor and called  after the first ngOnChanges()\n     \/\/e.g. http call...\n  }\n}\n```"},{"question":"What is a service?","answer":"A service is used when a common functionality needs to be provided to various modules. Services allow for greater separation of concerns for your application and better modularity by allowing you to extract common functionality out of components.\nLet's create a repoService which can be used across components,```typescript\nimport { Injectable } from '@angular\/core';\nimport { Http } from '@angular\/http';@Injectable({ \/\/ The Injectable decorator is required for dependency injection to work\n  \/\/ providedIn option registers the service with a specific NgModule\n  providedIn: 'root',  \/\/ This declares the service with the root app (AppModule)\n})\nexport class RepoService{\n  constructor(private http: Http){\n  }fetchAll(){\n    return this.http.get('https:\/\/api.github.com\/repositories');\n  }\n}\n```\nThe above service uses Http service as a dependency."},{"question":"What is dependency injection in Angular?","answer":"Dependency injection (DI), is an important application design pattern in which a class asks for dependencies from external sources rather than creating them itself. Angular comes with its own dependency injection framework for resolving dependencies( services or objects that a class needs to perform its function).So you can have your services depend on other services throughout your application."},{"question":"How is Dependency Hierarchy formed?","answer":"Injectors in Angular have rules that can be leveraged to achieve the desired visibility of injectables in your applications. By understanding these rules, you can determine in which NgModule, Component, or Directive you should declare a provider.\nAngular has two injector hierarchies:Module injectorWhen angular starts, it creates a root injector where the services will be registered, these are provided via injectable annotation. All services provided in the ng-model property are called providers (if those modules are not lazy-loaded).Angular recursively goes through all models which are being used in the application and creates instances for provided services in the root injector. If you provide some service in an eagerly-loaded model, the service will be added to the root injector, which makes it available across the whole application.Platform ModuleDuring application bootstrapping angular creates a few more injectors, above the root injector goes the platform injector, this one is created by the platform browser dynamic function inside the main.ts file, and it provides some platform-specific features like DomSanitizer. NullInjector()At the very top, the next parent injector in the hierarchy is the NullInjector().The responsibility of this injector is to throw the error if something tries to find dependencies there, unless you've used @Optional() because ultimately, everything ends at the NullInjector() and it returns an error or, in the case of @Optional(), null.ElementInjectorAngular creates ElementInjector hierarchies implicitly for each DOM element. ElementInjector injector is being created for any tag that matches the angular component, or any tag on which directive is applied, and you can configure it in component and directive annotations inside the provider's property, thus, it creates its own hierarchy likewise the upper one."},{"question":"What is the purpose of async pipe?","answer":"The AsyncPipe subscribes to an observable or promise and returns the latest value it has emitted. When a new value is emitted, the pipe marks the component to be checked for changes.\nLet's take a time observable which continuously updates the view for every 2 seconds with the current time.\ntypescript\n@Component({\n  selector: 'async-observable-pipe',\n  template: `<div><code>observable|async<\/code>:\n       Time: {{ time | async }}<\/div>`\n})\nexport class AsyncObservablePipeComponent {\n  time: Observable<string>;\n  constructor() {\n    this.time = new Observable((observer) => {\n      setInterval(() => {\n        observer.next(new Date().toString());\n      }, 2000);\n    });\n  }\n}"},{"question":"What is the option to choose between inline and external template file?","answer":"You can store your component's template in one of two places. You can define it inline using the **template** property, or you can define the template in a separate HTML file and link to it in the component metadata using the **@Component** decorator's **templateUrl** property.\nThe choice between inline and separate HTML is a matter of taste, circumstances, and organization policy. But normally we use inline template for small portion of code and external template file for bigger views. By default, the Angular CLI generates components with a template file. But you can override that with the below command,\nng generate component hero -it"},{"question":"What is the purpose of *ngFor directive?","answer":"We use Angular `*ngFor` directive in the template to display each item in the list. For example, here we can iterate over a list of users:\n```html\n<li *ngFor=\"let user of users\">\n  {{ user }}\n<\/li>\n```\nThe user variable in the `*ngFor` double-quoted instruction is a **template input variable**."},{"question":"What is the purpose of *ngIf directive?","answer":"Sometimes an app needs to display a view or a portion of a view only under specific circumstances. The Angular `*ngIf` directive inserts or removes an element based on a truthy\/falsy condition. Let's take an example to display a message if the user age is more than 18:\n```html\n<p *ngIf=\"user.age > 18\">You are not eligible for student pass!<\/p>\n```\n**Note:** Angular isn't showing and hiding the message. It is adding and removing the paragraph element from the DOM. That improves performance, especially in the larger projects with many data bindings."},{"question":"What happens if you use script tag inside template?","answer":"Angular recognizes the value as unsafe and automatically sanitizes it, which removes the script tag but keeps safe content such as the text content of the script tag. This way it eliminates the risk of script injection attacks. If you still use it then it will be ignored and a warning appears in the browser console.Let's take an example of innerHtml property binding which causes XSS vulnerability,\ntypescript\nexport class InnerHtmlBindingComponent {\n  \/\/ For example, a user\/attacker-controlled value from a URL.\n  htmlSnippet = 'Template <script>alert(\"0wned\")<\/script> <b>Syntax<\/b>';\n}"},{"question":"What is interpolation?","answer":"Interpolation is a special syntax that Angular converts into property binding. It\u2019s a convenient alternative to property binding. It is represented by double curly braces({{}}). The text between the braces is often the name of a component property. Angular replaces that name with the string value of the corresponding component property.Let's take an example,\nhtml\n<h3>\n  {{title}}\n  <img src=\"{{url}}\" style=\"height:30px\">\n<\/h3>\nIn the example above, Angular evaluates the title and url properties and fills in the blanks, first displaying a bold application title and then a URL."},{"question":"What are template expressions?","answer":"A template expression produces a value similar to any Javascript expression. Angular executes the expression and assigns it to a property of a binding target; the target might be an HTML element, a component, or a directive. In the property binding, a template expression appears in quotes to the right of the = symbol as in `[property]=\"expression\"`.\nIn interpolation syntax, the template expression is surrounded by double curly braces. For example, in the below interpolation, the template expression is `{{username}}`,\nhtml\n<h3>{{username}}, welcome to Angular<\/h3>The below javascript expressions are prohibited in template expression\n1. assignments (=, +=, -=, ...)\n2. new\n3. chaining expressions with ; or ,\n4. increment and decrement operators (++ and --)"},{"question":"What are template statements?","answer":"A template statement responds to an event raised by a binding target such as an element, component, or directive. The template statements appear in quotes to the right of the = symbol like `(event)=\"statement\"`.\nLet's take an example of button click event's statementhtml\n<button (click)=\"editProfile()\">Edit Profile<\/button>\nIn the above expression, editProfile is a template statement. The below JavaScript syntax expressions are not allowed.\n1. new\n2. increment and decrement operators, ++ and --\n3. operator assignment, such as += and -=\n4. the bitwise operators | and &\n5. the template expression operators"},{"question":"How do you categorize data binding types?","answer":"Binding types can be grouped into three categories distinguished by the direction of data flow. They are listed as below,\n 1. From the source-to-view\n 2. From view-to-source\n 3. View-to-source-to-viewThe possible binding syntax can be tabularized as below,| Data direction | Syntax | Type |\n  |---- | --------- | ---- |\n  | From the source-to-view(One-way)  | 1. {{expression}} 2. [target]=\"expression\" 3. bind-target=\"expression\" | Interpolation, Property, Attribute, Class, Style|\n  | From view-to-source(One-way) | 1. (target)=\"statement\" 2. on-target=\"statement\" | Event |\n  | View-to-source-to-view(Two-way)| 1. [(target)]=\"expression\" 2. bindon-target=\"expression\"| Two-way |"},{"question":"What are pipes?","answer":"Pipes are simple functions that use [template expressions](#what-are-template-expressions) to accept data as input and transform it into a desired output. For example, let us take a pipe to transform a component's birthday property into a human-friendly date using **date** pipe.\n```javascript\nimport { Component } from '@angular\/core';@Component({\n  selector: 'app-birthday',\n  template: <p>Birthday is {{ birthday | date }}<\/p>\n})\nexport class BirthdayComponent {\n  birthday = new Date(1987, 6, 18); \/\/ June 18, 1987\n}\n```"},{"question":"What is a parameterized pipe?","answer":"A pipe can accept any number of optional parameters to fine-tune its output. The parameterized pipe can be created by declaring the pipe name with a colon ( : ) and then the parameter value. If the pipe accepts multiple parameters, separate the values with colons. Let's take a birthday example with a particular format(dd\/MM\/yyyy):\n```javascript\nimport { Component } from '@angular\/core';@Component({\n  selector: 'app-birthday',\n  template: `<p>Birthday is {{ birthday | date:'dd\/MM\/yyyy'}}<\/p>` \/\/ 18\/06\/1987\n})\nexport class BirthdayComponent {\n  birthday = new Date(1987, 6, 18);\n}\n```\nNote: The parameter value can be any valid template expression, such as a string literal or a component property."},{"question":"How do you chain pipes?","answer":"You can chain pipes together in potentially useful combinations as per the needs. Let's take a birthday property which uses date pipe(along with parameter) and uppercase pipes as below\n```javascript\nimport { Component } from '@angular\/core';    @Component({\n      selector: 'app-birthday',\n      template: `<p>Birthday is {{  birthday | date:'fullDate' | uppercase}} <\/p>` \/\/ THURSDAY, JUNE 18, 1987\n    })\n    export class BirthdayComponent {\n      birthday = new Date(1987, 6, 18);\n    }\n```"},{"question":"What is a custom pipe?","answer":"Apart from built-in pipes, you can write your own custom pipe with the below key characteristics:\n\nA pipe is a class decorated with pipe metadata @Pipe decorator, which you import from the core Angular library\n   For example,\n    javascript\n        @Pipe({name: 'myCustomPipe'})\nThe pipe class implements the PipeTransform interface's transform method that accepts an input value followed by optional parameters and returns the transformed value.\n   The structure of PipeTransform would be as below,\n    javascript\n    interface PipeTransform {\n      transform(value: any, ...args: any[]): any\n    }\nThe @Pipe decorator allows you to define the pipe name that you'll use within template expressions. It must be a valid JavaScript identifier.\n    javascript\n    template: `{{someInputValue | myCustomPipe: someOtherValue}}`"},{"question":"Give an example of custom pipe?","answer":"You can create custom reusable pipes for the transformation of existing value. For example, let us create a custom pipe for finding file size based on an extension,\n  ```javascript\n    import { Pipe, PipeTransform } from '@angular\/core';\n\n@Pipe({name: 'customFileSizePipe'})\nexport class FileSizePipe implements PipeTransform {\n  transform(size: number, extension: string = 'MB'): string {\n    return (size \/ (1024 * 1024)).toFixed(2) + extension;\n  }\n}\nNow you can use the above pipe in template expression as below,javascript\n     template: <h2>Find the size of a file<\/h2>\n        <p>Size: {{288966 | customFileSizePipe: 'GB'}}<\/p>\n  ```"},{"question":"What is the difference between pure and impure pipe?","answer":"A pure pipe is only called when Angular detects a change in the value or the parameters passed to a pipe. For example, any changes to a primitive input value (String, Number, Boolean, Symbol) or a changed object reference (Date, Array, Function, Object). An impure pipe is called for every change detection cycle no matter whether the value or parameters changes. i.e, An impure pipe is called often, as often as every keystroke or mouse-move."},{"question":"What is a bootstrapping module?","answer":"Every application has at least one Angular module, the root module that you bootstrap to launch the application is called as bootstrapping module. It is commonly known as `AppModule`. The default structure of `AppModule` generated by AngularCLI would be as follows:\n```javascript\n    import { BrowserModule } from '@angular\/platform-browser';\n    import { NgModule } from '@angular\/core';\n    import { FormsModule } from '@angular\/forms';\n    import { HttpClientModule } from '@angular\/common\/http';import { AppComponent } from '.\/app.component';\n\n\/* the AppModule class with the @NgModule decorator *\/\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```"},{"question":"What are observables?","answer":"Observables are declarative which provide support for passing messages between publishers and subscribers in your application. They are mainly used for event handling, asynchronous programming, and handling multiple values. In this case, you define a function for publishing values, but it is not executed until a consumer subscribes to it. The subscribed consumer then receives notifications until the function completes, or until they unsubscribe."},{"question":"What is HttpClient and its benefits?","answer":"Most of the Front-end applications communicate with backend services over `HTTP` protocol using either `XMLHttpRequest` interface or the `fetch()` API. Angular provides a simplified client HTTP API known as `HttpClient` which is based on top of `XMLHttpRequest` interface. This client is avaialble from `@angular\/common\/http` package.\nYou can import in your root module as below:\njavascript\nimport { HttpClientModule } from '@angular\/common\/http';The major advantages of HttpClient can be listed as below,\n1. Contains testability features\n2. Provides typed request and response objects\n3. Intercept request and response\n4. Supports Observalbe APIs\n5. Supports streamlined error handling"},{"question":"Explain on how to use HttpClient with an example?","answer":"Below are the steps need to be followed for the usage of `HttpClient`.\n\nImport HttpClient into root module:\n    javascript\n    import { HttpClientModule } from '@angular\/common\/http';\n    @NgModule({\n      imports: [\n        BrowserModule,\n        \/\/ import HttpClientModule after BrowserModule.\n        HttpClientModule,\n      ],\n      ......\n      })\n     export class AppModule {}\n\nInject the HttpClient into the application:\n    Let's create a userProfileService(userprofile.service.ts) as an example. It also defines get method of HttpClient:\n    ```javascript\n    import { Injectable } from '@angular\/core';\n    import { HttpClient } from '@angular\/common\/http';\nconst userProfileUrl: string = 'assets\/data\/profile.json';\n@Injectable()\nexport class UserProfileService {\n  constructor(private http: HttpClient) { }\ngetUserProfile() {\n    return this.http.get(this.userProfileUrl);\n  }\n}\n3. Create a component for subscribing service:\nLet's create a component called UserProfileComponent(`userprofile.component.ts`), which injects `UserProfileService` and invokes the service method:javascript\nfetchUserProfile() {\n  this.userProfileService.getUserProfile()\n    .subscribe((data: User) => this.user = {\n        id: data['userId'],\n        name: data['firstName'],\n        city:  data['city']\n    });\n}\n```\n    Since the above service method returns an Observable which needs to be subscribed in the component."},{"question":"How can you read full response?","answer":"The response body doesn't or may not return full response data because sometimes servers also return special headers or status code, which are important for the application workflow. In order to get the full response, you should use `observe` option from `HttpClient`:\njavascript\ngetUserResponse(): Observable<HttpResponse<User>> {\n  return this.http.get<User>(\n    this.userUrl, { observe: 'response' });\n}\nNow HttpClient.get() method returns an Observable of typed HttpResponse rather than just the JSON data."},{"question":"How do you perform Error handling?","answer":"If the request fails on the server or fails to reach the server due to network issues, then `HttpClient` will return an error object instead of a successful reponse. In this case, you need to handle in the component by passing `error` object as a second callback to `subscribe()` method.\nLet's see how it can be handled in the component with an example,\njavascript\nfetchUser() {\n  this.userService.getProfile()\n    .subscribe(\n      (data: User) => this.userProfile = { ...data }, \/\/ success path\n      error => this.error = error \/\/ error path\n    );\n}\nIt is always a good idea to give the user some meaningful feedback instead of displaying the raw error object returned from HttpClient."},{"question":"What is RxJS?","answer":"RxJS is a library for composing asynchronous and callback-based code in a functional, reactive style using Observables. Many APIs such as  HttpClient produce and consume RxJS Observables and also uses operators for processing observables.\nFor example, you can import observables and operators for using HttpClient as below,\njavascript\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs\/operators';"},{"question":"What is subscribing?","answer":"An Observable instance begins publishing values only when someone subscribes to it. So you need to subscribe by calling the `subscribe()` method of the instance, passing an observer object to receive the notifications.\nLet's take an example of creating and subscribing to a simple observable, with an observer that logs the received message to the console.\n```javascript\n\/\/ Creates an observable sequence of 5 integers, starting from 1\nconst source = range(1, 5);\/\/ Create observer object\nconst myObserver = {\n  next: x => console.log('Observer got a next value: ' + x),\n  error: err => console.error('Observer got an error: ' + err),\n  complete: () => console.log('Observer got a complete notification'),\n};\/\/ Execute with the observer object and Prints out each item\nsource.subscribe(myObserver);\n\/\/ => Observer got a next value: 1\n\/\/ => Observer got a next value: 2\n\/\/ => Observer got a next value: 3\n\/\/ => Observer got a next value: 4\n\/\/ => Observer got a next value: 5\n\/\/ => Observer got a complete notification\n```"},{"question":"What is an observable?","answer":"An Observable is a unique Object similar to a Promise that can help manage async code. Observables are not part of the JavaScript language so we need to rely on a popular Observable library called RxJS.\nThe observables are created using new keyword.\nLet see the simple example of observable,\n```javascript\nimport { Observable } from 'rxjs';const observable = new Observable(observer => {\n  setTimeout(() => {\n    observer.next('Hello from a Observable!');\n  }, 2000);\n});\n```"},{"question":"What is an observer?","answer":"Observer is an interface for a consumer of push-based notifications delivered by an Observable. It has below structure,\njavascript\ninterface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\nA handler that implements the Observer interface for receiving observable notifications will be passed as a parameter for observable as below,javascript\nmyObservable.subscribe(myObserver);\nNote: If you don't supply a handler for a notification type, the observer ignores notifications of that type."},{"question":"What is the difference between promise and observable?","answer":"Below are the list of differences between promise and observable:\n| Observable | Promise |\n   |---- | --------- |\n   | Declarative: Computation does not start until subscription, so they can run whenever you need the result | Executes immediately on creation|\n   | Provides multiple values over time | Provides only one |\n   | Subscribe method is used for error handling that facilitates centralized and predictable error handling | Push errors to the child promises |\n   | Provides chaining and subscription to handle complex applications | Uses only .then() clause |"},{"question":"What is multicasting?","answer":"Multi-casting is the practice of broadcasting to a list of multiple subscribers in a single execution.\nLet's demonstrate the multi-casting feature:\n```javascript\nvar source = Rx.Observable.from([1, 2, 3]);\nvar subject = new Rx.Subject();\nvar multicasted = source.multicast(subject);\/\/ These are, under the hood, subject.subscribe({...}):\nmulticasted.subscribe({\n  next: (v) => console.log('observerA: ' + v)\n});\nmulticasted.subscribe({\n  next: (v) => console.log('observerB: ' + v)\n});\/\/ This is, under the hood, `s\n```"},{"question":"How do you perform error handling in observables?","answer":"You can handle errors by specifying an **error callback** on the observer instead of relying on `try`\/`catch`, which are ineffective in asynchronous environment.\nFor example, you can define error callback as below,\njavascript\nmyObservable.subscribe({\n  next(num) { console.log('Next num: ' + num)},\n  error(err) { console.log('Received an errror: ' + err)}\n});"},{"question":"What is the shorthand notation for subscribe method?","answer":"The `subscribe()` method can accept callback function definitions in line, for `next`, `error`, and `complete` handlers. It is known as shorthand notation or Subscribe method with positional arguments.\nFor example, you can define subscribe method as below,\njavascript\nmyObservable.subscribe(\n  x => console.log('Observer got a next value: ' + x),\n  err => console.error('Observer got an error: ' + err),\n  () => console.log('Observer got a complete notification')\n);"},{"question":"What are the utility functions provided by RxJS?","answer":"The RxJS library also provides below utility functions for creating and working with observables.\n\nConverting existing code for async operations into observables\nIterating through the values in a stream\nMapping values to different types\nFiltering streams\nComposing multiple streams"},{"question":"What are observable creation functions?","answer":"RxJS provides creation functions for the process of creating observables from promises, events, timers and Ajax requests. Let us explain each of them with an example:\n\nCreate an observable from a promise\n    javascript\n    import { from } from 'rxjs'; \/\/ from function\n    const data = from(fetch('\/api\/endpoint')); \/\/Created from Promise\n    data.subscribe({\n     next(response) { console.log(response); },\n     error(err) { console.error('Error: ' + err); },\n     complete() { console.log('Completed'); }\n    });\nCreate an observable that creates an AJAX request\n    javascript\n    import { ajax } from 'rxjs\/ajax'; \/\/ ajax function\n    const apiData = ajax('\/api\/data'); \/\/ Created from AJAX request\n    \/\/ Subscribe to create the request\n    apiData.subscribe(res => console.log(res.status, res.response));\nCreate an observable from a counter\n    javascript\n    import { interval } from 'rxjs'; \/\/ interval function\n    const secondsCounter = interval(1000); \/\/ Created from Counter value\n    secondsCounter.subscribe(n =>\n      console.log(`Counter value: ${n}`));\nCreate an observable from an event\n    javascript\n    import { fromEvent } from 'rxjs';\n    const el = document.getElementById('custom-element');\n    const mouseMoves = fromEvent(el, 'mousemove');\n    const subscription = mouseMoves.subscribe((e: MouseEvent) => {\n      console.log(`Coordnitaes of mouse pointer: ${e.clientX} * ${e.clientY}`);\n      });"},{"question":"What will happen if you do not supply handler for the observer?","answer":"Usually, an observer object can define any combination of `next`, `error`, and `complete` notification type handlers. If you don't supply a handler for a notification type, the observer just ignores notifications of that type."},{"question":"What are Angular elements?","answer":"Angular elements are Angular components packaged as **custom elements** (a web standard for defining new HTML elements in a framework-agnostic way). Angular Elements host an Angular component, providing a bridge between the data and the logic defined in the component and the standard DOM APIs, thus, providing a way to use Angular components in `non-Angular environments`."},{"question":"What is the browser support of Angular Elements?","answer":"Since Angular elements are packaged as custom elements the browser support of angular elements is same as custom elements support.\nThis feature is is currently supported natively in a number of browsers and pending for other browsers.| Browser | Angular Element Support |\n|---- | --------- |\n| Chrome | Natively supported|\n| Opera | Natively supported |\n| Safari| Natively supported |\n| Firefox | Natively supported from 63 version onwards. You need to enable dom.webcomponents.enabled and dom.webcomponents.customelements.enabled in older browsers |\n| Edge| Currently it is in progress|"},{"question":"What are custom elements?","answer":"Custom elements (or Web Components) are a Web Platform feature which extends HTML by allowing you to define a tag whose content is created and controlled by JavaScript code. The browser maintains a `CustomElementRegistry` of defined custom elements, which maps an instantiable JavaScript class to an HTML tag. Currently this feature is supported by Chrome, Firefox, Opera, and Safari, and available in other browsers through polyfills."},{"question":"Do I need to bootstrap custom elements?","answer":"No, custom elements bootstrap (or start) automatically when they are added to the DOM, and are automatically destroyed when removed from the DOM. Once a custom element is added to the DOM for any page, it looks and behaves like any other HTML element, and does not require any special knowledge of Angular."},{"question":"Explain how custom elements works internally?","answer":"Below are the steps in an order about custom elements functionality,\n\nApp registers custom element with browser: Use the createCustomElement() function to convert a component into a class that can be registered with the browser as a custom element.\nApp adds custom element to DOM:  Add custom element just like a built-in HTML element directly into the DOM.\nBrowser instantiate component based class: Browser creates an instance of the registered class and adds it to the DOM.\nInstance provides content with data binding and change detection: The content with in template is rendered using the component and DOM data.\nThe flow chart of the custom elements functionality would be as follows,"},{"question":"How to transfer components to custom elements?","answer":"Transforming components to custom elements involves **two** major steps,\n\nBuild custom element class: Angular provides the createCustomElement() function for converting an Angular component (along with its dependencies) to a custom element. The conversion process implements NgElementConstructor interface, and creates a constructor class which is used to produce a self-bootstrapping instance of Angular component.\nRegister element class with browser: It uses customElements.define() JS function, to register the configured constructor and its associated custom-element tag with the browser's CustomElementRegistry. When the browser encounters the tag for the registered element, it uses the constructor to create a custom-element instance.\nThe detailed structure would be as follows,"},{"question":"What are the mapping rules between Angular component and custom element?","answer":"The Component properties and logic maps directly into HTML attributes and the browser's event system. Let us describe them in two steps,\n\nThe createCustomElement() API parses the component input properties with corresponding attributes for the custom element. For example, component @Input('myInputProp') converted as custom element attribute my-input-prop.\nThe Component outputs are dispatched as HTML Custom Events, with the name of the custom event matching the output name. For example, component @Output() valueChanged = new EventEmitter() converted as custom element with dispatch event as \"valueChanged\"."},{"question":"How do you define typings for custom elements?","answer":"You can use the `NgElement` and `WithProperties` types exported from @angular\/elements.\nLet's see how it can be applied by comparing with Angular component.\n1. The simple container with input property would be as below,\n    javascript\n    @Component(...)\n    class MyContainer {\n      @Input() message: string;\n    }\n2. After applying types typescript validates input value and their types,\n    javascirpt\n    const container = document.createElement('my-container') as NgElement & WithProperties<{message: string}>;\n    container.message = 'Welcome to Angular elements!';\n    container.message = true;  \/\/ <-- ERROR: TypeScript knows this should be a string.\n    container.greet = 'News';  \/\/ <-- ERROR: TypeScript knows there is no `greet` property on `container`."},{"question":"What are dynamic components?","answer":"Dynamic components are the components in which the component's location in the application is not defined at build time i.e. they are not used in any angular template. Instead, the component is instantiated and placed in the application at runtime."},{"question":"What are the various kinds of directives?","answer":"There are mainly three kinds of directives:\n\nComponents \u2014 These are directives with a template.\nStructural directives \u2014 These directives change the DOM layout by adding and removing DOM elements.\nAttribute directives \u2014 These directives change the appearance or behavior of an element, component, or another directive."},{"question":"How do you create directives using CLI?","answer":"You can use CLI command `ng generate directive` to create the directive class file. It creates the source file(`src\/app\/components\/directivename.directive.ts`), the respective test file `.spec.ts` and declare the directive class file in root module."},{"question":"Give an example for attribute directives?","answer":"Let's take simple highlighter behavior as a example directive for DOM element. You can create and apply the attribute directive using below step:\n\n\nCreate HighlightDirective class with the file name src\/app\/highlight.directive.ts. In this file, we need to import Directive from core library to apply the metadata and ElementRef in the directive's constructor to inject a reference to the host DOM element ,\n    ```javascript\n    import { Directive, ElementRef } from '@angular\/core';\n@Directive({\n  selector: '[appHighlight]'\n})\nexport class HighlightDirective {\n    constructor(el: ElementRef) {\n       el.nativeElement.style.backgroundColor = 'red';\n    }\n}\n2. Apply the attribute directive as an attribute to the host element(for example, <p>)javascript\nHighlight me!\n3. Run the application to see the highlight behavior on paragraph elementjavascript\nng serve\n```"},{"question":"What is Angular Router?","answer":"Angular Router is a mechanism in which navigation happens from one view to the next as users perform application tasks. It borrows the concepts or model of browser's application navigation. It enables developers to build Single Page Applications with multiple views and allow navigation between these views."},{"question":"What is the purpose of base href tag?","answer":"The routing application should add <base> element to the index.html as the first child in the <head> tag in order to indicate how to compose navigation URLs. If app folder is the application root then you can set the href value as below\nhtml\n<base href=\"\/\">"},{"question":"What are the router imports?","answer":"The Angular Router which represents a particular component view for a given URL is not part of Angular Core. It is available in library named `@angular\/router` to import required router components. For example, we import them in app module as below,\njavascript\nimport { RouterModule, Routes } from '@angular\/router';"},{"question":"What is router outlet?","answer":"The RouterOutlet is a directive from the router library and it  acts as a placeholder that marks the spot in the template where the router should display the components for that outlet. Router outlet is used like a component,\nhtml\n<router-outlet><\/router-outlet>\n<!-- Routed components go here -->"},{"question":"What are router links?","answer":"The RouterLink is a directive on the anchor tags give the router control over those elements. Since the navigation paths are fixed, you can assign string values to router-link directive as below,\nhtml\n<h1>Angular Router<\/h1>\n<nav>\n  <a routerLink=\"\/todosList\" >List of todos<\/a>\n  <a routerLink=\"\/completed\" >Completed todos<\/a>\n<\/nav>\n<router-outlet><\/router-outlet>"},{"question":"What are active router links?","answer":"RouterLinkActive is a directive that toggles css classes for active RouterLink bindings based on the current RouterState. i.e, The Router will add CSS classes when this link is active and remove when the link is inactive. For example, you can add them to RouterLinks as below.\nhtml\n<h1>Angular Router<\/h1>\n<nav>\n  <a routerLink=\"\/todosList\" routerLinkActive=\"active\">List of todos<\/a>\n  <a routerLink=\"\/completed\" routerLinkActive=\"active\">Completed todos<\/a>\n<\/nav>\n<router-outlet><\/router-outlet>"},{"question":"What is router state?","answer":"RouterState is a tree of activated routes. Every node in this tree knows about the \"consumed\" URL segments, the extracted parameters, and the resolved data. You can access the current RouterState from anywhere in the application using the `Router service` and the `routerState` property.\njavascript\n@Component({templateUrl:'template.html'})\nclass MyComponent {\n  constructor(router: Router) {\n    const state: RouterState = router.routerState;\n    const root: ActivatedRoute = state.root;\n    const child = root.firstChild;\n    const id: Observable<string> = child.params.map(p => p.id);\n    \/\/...\n  }\n}"},{"question":"What are router events?","answer":"During each navigation, the Router emits navigation events through the Router.events property allowing you to track the lifecycle of the route.\nThe sequence of router events is as below,\nNavigationStart,\nRouteConfigLoadStart,\nRouteConfigLoadEnd,\nRoutesRecognized,\nGuardsCheckStart,\nChildActivationStart,\nActivationStart,\nGuardsCheckEnd,\nResolveStart,\nResolveEnd,\nActivationEnd\nChildActivationEnd\nNavigationEnd,\nNavigationCancel,\nNavigationError\nScroll"},{"question":"What is activated route?","answer":"ActivatedRoute contains the information about a route associated with a component loaded in an outlet. It can also be used to traverse the router state tree. The ActivatedRoute will be injected as a router service to access the information. In the below example, you can access route path and parameters,\njavascript\n@Component({...})\nclass MyComponent {\n  constructor(route: ActivatedRoute) {\n    const id: Observable<string> = route.params.pipe(map(p => p.id));\n    const url: Observable<string> = route.url.pipe(map(segments => segments.join('')));\n    \/\/ route.data includes both `data` and `resolve`\n    const user = route.data.pipe(map(d => d.user));\n  }\n}"},{"question":"How do you define routes?","answer":"A router must be configured with a list of route definitions. You configures the router with routes via the `RouterModule.forRoot()` method, and adds the result to the AppModule's `imports` array.\n```javascript\n const appRoutes: Routes = [\n  { path: 'todo\/:id',      component: TodoDetailComponent },\n  {\n    path: 'todos',\n    component: TodosListComponent,\n    data: { title: 'Todos List' }\n  },\n  { path: '',\n    redirectTo: '\/todos',\n    pathMatch: 'full'\n  },\n  { path: '**', component: PageNotFoundComponent }\n];@NgModule({\n  imports: [\n    RouterModule.forRoot(\n      appRoutes,\n      { enableTracing: true } \/\/ <-- debugging purposes only\n    )\n    \/\/ other imports here\n  ],\n  ...\n})\nexport class AppModule { }\n```"},{"question":"What is the purpose of Wildcard route?","answer":"If the URL doesn't match any predefined routes then it causes the router to throw an error and crash the app. In this case, you can use wildcard route. A wildcard route has a path consisting of two asterisks to match every URL.\nFor example, you can define PageNotFoundComponent for wildcard route as below\njavascript\n{ path: '**', component: PageNotFoundComponent }"},{"question":"Do I need a Routing Module always?","answer":"No, the Routing Module is a design choice. You can skip routing Module (for example, AppRoutingModule) when the configuration is simple and merge the routing configuration directly into the companion module (for example, AppModule). But it is recommended when the configuration is complex and includes specialized guard and resolver services."},{"question":"What is Angular Universal?","answer":"Angular Universal is a server-side rendering module for Angular applications in various scenarios. This is a community driven project and available under @angular\/platform-server package. Recently Angular Universal is integrated with Angular CLI."},{"question":"What are different types of compilation in Angular?","answer":"Angular offers two ways to compile your application,\n\nJust-in-Time (JIT)\nAhead-of-Time (AOT)"},{"question":"What is JIT?","answer":"Just-in-Time (JIT) is a type of compilation that compiles your app in the browser at runtime. JIT compilation was the default until Angular 8, now default is AOT. When you run the ng build (build only) or ng serve (build and serve locally) CLI commands, the type of compilation (JIT or AOT) depends on the value of the aot property in your build configuration specified in angular.json. By default, aot is set to true."},{"question":"What is AOT?","answer":"Ahead-of-Time (AOT) is a type of compilation that compiles your app at build time. This is the default starting in Angular 9. When you run the ng build (build only) or ng serve (build and serve locally) CLI commands, the type of compilation (JIT or AOT) depends on the value of the aot property in your build configuration specified in angular.json. By default, aot is set to true.\ncmd\nng build\nng serve"},{"question":"Why do we need compilation process?","answer":"The Angular components and templates cannot be understood by the browser directly. Due to that Angular applications require a compilation process before they can run in a browser. For example, In AOT compilation, both Angular HTML and TypeScript code converted into efficient JavaScript code during the build phase before browser runs it."},{"question":"What are the advantages with AOT?","answer":"Below are the list of AOT benefits,\n\nFaster rendering: The browser downloads a pre-compiled version of the application. So it can render the application immediately without compiling the app.\nFewer asynchronous requests: It inlines external HTML templates and CSS style sheets within the application javascript which eliminates separate ajax requests.\nSmaller Angular framework download size: Doesn't require downloading the Angular compiler. Hence it dramatically reduces the application payload.\nDetect template errors earlier: Detects and reports template binding errors during the build step itself\nBetter security: It compiles HTML templates and components into JavaScript.  So there won't be any injection attacks."},{"question":"What are the ways to control AOT compilation?","answer":"You can control your app compilation in two ways,\n\nBy providing template compiler options in the tsconfig.json file\nBy configuring Angular metadata with decorators"},{"question":"What are the restrictions of metadata?","answer":"In Angular, You must write metadata with the following general constraints,\n\nWrite expression syntax with in the supported range of javascript features\nThe compiler can only reference symbols which are exported\nOnly call the functions supported by the compiler\nDecorated and data-bound class members must be public."},{"question":"What are the three phases of AOT?","answer":"The AOT compiler works in three phases,\n\nCode Analysis: The compiler records a representation of the source\nCode generation: It handles the interpretation as well as places restrictions on what it interprets.\nValidation: In this phase, the Angular template compiler uses the TypeScript compiler to validate the binding expressions in templates."},{"question":"Can I use arrow functions in AOT?","answer":"No, Arrow functions or lambda functions can\u2019t be used to assign values to the decorator properties. For example, the following snippet is invalid:\njavascript\n@Component({\n  providers: [{\n    provide: MyService, useFactory: () => getService()\n  }]\n})To fix this, it has to be changed as following exported function:```javascript\nfunction getService(){\n  return new MyService();\n}@Component({\n  providers: [{\n    provide: MyService, useFactory: getService\n  }]\n})\n```If you still use arrow function, it generates an error node in place of the function. When the compiler later interprets this node, it reports an error to turn the arrow function into an exported function.\nNote: From Angular5 onwards, the compiler automatically performs this rewriting while emitting the .js file."},{"question":"What is the purpose of metadata json files?","answer":"The metadata.json file can be treated as a diagram of the overall structure of a decorator's metadata, represented as an abstract syntax tree(AST). During the analysis phase, the AOT collector scan the metadata recorded in the Angular decorators and outputs metadata information in .metadata.json files, one per .d.ts file."},{"question":"Can I use any javascript feature for expression syntax in AOT?","answer":"No, the AOT collector understands a subset  of (or limited) JavaScript features. If an expression uses unsupported syntax, the collector writes an error node to the .metadata.json file. Later point of time, the compiler reports an error if it needs that piece of metadata to generate the application code."},{"question":"What is folding?","answer":"The compiler can only resolve references to exported symbols in the metadata. Where as some of the non-exported members are folded while generating the code. i.e Folding is a process in which the collector evaluate an expression during collection and record the result in the .metadata.json instead of the original expression.\nFor example, the compiler couldn't refer selector reference because it is not exported\njavascript\nlet selector = 'app-root';\n@Component({\n  selector: selector\n})\nWill be folded into inline selectorjavascript\n@Component({\n      selector: 'app-root'\n    })\nRemember that the compiler can\u2019t fold everything. For example, spread operator on arrays, objects created using new keywords and function calls."},{"question":"What are macros?","answer":"The AOT compiler supports macros in the form of functions or static methods that return an expression in a `single return expression`.\nFor example, let us take a below macro function,\njavascript\nexport function wrapInArray<T>(value: T): T[] {\n  return [value];\n}You can use it inside metadata as an expression,javascript\n@NgModule({\n  declarations: wrapInArray(TypicalComponent)\n})\nexport class TypicalModule {}The compiler treats the macro expression as it written directlyjavascript\n@NgModule({\n  declarations: [TypicalComponent]\n})\nexport class TypicalModule {}"},{"question":"Give an example of few metadata errors?","answer":"Below are some of the errors encountered in metadata,\n\nExpression form not supported: Some of the language features outside of the compiler's restricted expression syntax used in angular metadata can produce this error.\n    Let's see some of these examples,\n    ```javascript\nexport class User { ... }\n   const prop = typeof User; \/\/ typeof is not valid in metadata\n{ provide: 'token', useValue: { [prop]: 'value' } }; \/\/ bracket notation is not valid in metadata\n```\n\n\n\nReference to a local (non-exported) symbol: The compiler encountered a referenced to a locally defined symbol that either wasn't exported or wasn't initialized.\n    Let's take example of this error,\n    ```javascript\n    \/\/ ERROR\n    let username: string; \/\/ neither exported nor initialized\n@Component({\n  selector: 'my-component',\n  template: ... ,\n  providers: [\n    { provide: User, useValue: username }\n  ]\n})\nexport class MyComponent {}\nYou can fix this by either exporting or initializing the value,javascript\nexport let username: string; \/\/ exported\n(or)\nlet username = 'John'; \/\/ initialized\n3. **Function calls are not supported:** The compiler does not currently support function expressions or lambda functions. For example, you cannot set a provider's useFactory to an anonymous function or arrow function as below.javascript\n providers: [\n    { provide: MyStrategy, useFactory: function() { ... } },\n    { provide: OtherStrategy, useFactory: () => { ... } }\n  ]\nYou can fix this with exported functionjavascript\nexport function myStrategy() { ... }\nexport function otherStrategy() { ... }\n... \/\/ metadata\nproviders: [\n    { provide: MyStrategy, useFactory: myStrategy },\n    { provide: OtherStrategy, useFactory: otherStrategy },\n4. **Destructured variable or constant not supported:** The compiler does not support references to variables assigned by destructuring.\nFor example, you cannot write something like this:javascript\nimport { user } from '.\/user';\n\/\/ destructured assignment to name and age\nconst {name, age} = user;\n... \/\/metadata\nproviders: [\n    {provide: Name, useValue: name},\n    {provide: Age, useValue: age},\n  ]\nYou can fix this by non-destructured valuesjavscript\nimport { user } from '.\/user';\n... \/\/metadata\nproviders: [\n    {provide: Name, useValue: user.name},\n    {provide: Age, useValue: user.age},\n  ]\n```"},{"question":"What is metadata rewriting?","answer":"Metadata rewriting is the process in which the compiler converts the expression initializing the fields such as useClass, useValue, useFactory, and data into an exported variable, which replaces the expression. Remember that the compiler does this rewriting during the emit of the .js file but not in definition files( .d.ts file)."},{"question":"How do you provide configuration inheritance?","answer":"Angular Compiler supports configuration inheritance through extends in the tsconfig.json on angularCompilerOptions. i.e, The configuration from the base file(for example, tsconfig.base.json) are loaded first, then overridden by those in the inheriting config file.\njavascript\n{\n  \"extends\": \"..\/tsconfig.base.json\",\n  \"compilerOptions\": {\n    \"experimentalDecorators\": true,\n    ...\n  },\n  \"angularCompilerOptions\": {\n    \"fullTemplateTypeCheck\": true,\n    \"preserveWhitespaces\": true,\n    ...\n  }\n}"},{"question":"How do you specify angular template compiler options?","answer":"The angular template compiler options are specified as members of the **angularCompilerOptions** object in the tsconfig.json file. These options will be specified adjecent to typescript compiler options.\njavascript\n{\n  \"compilerOptions\": {\n    \"experimentalDecorators\": true,\n              ...\n  },\n  \"angularCompilerOptions\": {\n    \"fullTemplateTypeCheck\": true,\n    \"preserveWhitespaces\": true,\n              ...\n  }\n}"},{"question":"How do you enable binding expression validation?","answer":"You can enable binding expression validation explicitly by adding the compiler option **fullTemplateTypeCheck** in the \"angularCompilerOptions\" of the project's tsconfig.json. It produces error messages when a type error is detected in a template binding expression.\nFor example, consider the following component:\njavascript\n@Component({\n  selector: 'my-component',\n  template: '{{user.contacts.email}}'\n})\nclass MyComponent {\n  user?: User;\n}\nThis will produce the following error:\njavascript\nmy.component.ts.MyComponent.html(1,1): : Property 'contacts' does not exist on type 'User'. Did you mean 'contact'?"},{"question":"What is the purpose of any type cast function?","answer":"You can disable binding expression type checking using $any() type cast function(by surrounding the expression). In the following example, the error Property contacts does not exist is suppressed by casting user to the any type.\n```javascript\n  template:\n  '{{ $any(user).contacts.email }}'\n```\nThe $any() cast function also works with this to allow access to undeclared members of the component.\n```javascript\n   template:\n   '{{ $any(this).contacts.email }}'\n```"},{"question":"What is Non null type assertion operator?","answer":"You can use the non-null type assertion operator to suppress the Object is possibly 'undefined' error. In the following example, the user and contact properties are always set together, implying that contact is always non-null if user is non-null. The error is suppressed in the example by using contact!.email.\n```javascript\n@Component({\n  selector: 'my-component',\n  template: '<span *ngIf=\"user\"> {{user.name}} contacted through {{contact!.email}} <\/span>'\n})\nclass MyComponent {\n  user?: User;\n  contact?: Contact;\nsetData(user: User, contact: Contact) {\n    this.user = user;\n    this.contact = contact;\n  }\n}\n```"},{"question":"What is type narrowing?","answer":"The expression used in an ngIf directive is used to narrow type unions in the Angular template compiler similar to if expression in typescript. So *ngIf allows the typeScript compiler to infer that the data used in the binding expression will never be undefined.\n```javascript\n@Component({\n  selector: 'my-component',\n  template: '<span *ngIf=\"user\"> {{user.contact.email}} <\/span>'\n})\nclass MyComponent {\n  user?: User;\n}\n```"},{"question":"How do you describe various dependencies in angular application?","answer":"The dependencies section of package.json with in an angular application can be divided as follow,\n\nAngular packages: Angular core and optional modules; their package names begin @angular\/.\nSupport packages: Third-party libraries that must be present for Angular apps to run.\nPolyfill packages: Polyfills plug gaps in a browser's JavaScript implementation."},{"question":"What is zone?","answer":"A Zone is an execution context that persists across async tasks. Angular relies on zone.js to run Angular's change detection processes when native JavaScript operations raise events"},{"question":"What is the purpose of common module?","answer":"The commonly-needed services, pipes, and directives provided by @angular\/common module. Apart from these HttpClientModule is available under @angular\/common\/http."},{"question":"What is codelyzer?","answer":"Codelyzer provides set of tslint rules for static code analysis of Angular TypeScript projects. You can run the static code analyzer over web apps, NativeScript, Ionic etc. Angular CLI has support for this and it can be use as below,\n ```bash\n ng new codelyzer\n ng lint\n ```"},{"question":"What is angular animation?","answer":"Angular's animation system is built on CSS functionality in order to animate any property that the browser considers animatable. These properties includes positions, sizes, transforms, colors, borders etc. The Angular modules for animations are **@angular\/animations** and **@angular\/platform-browser** and these dependencies are automatically added to your project when you create a project using Angular CLI."},{"question":"What are the steps to use animation module?","answer":"You need to follow below steps to implement animation in your angular project,\n\n\nEnabling the animations module: Import BrowserAnimationsModule to add animation capabilities into your Angular root application module(for example, src\/app\/app.module.ts).\n     ```javascript\n     import { NgModule } from '@angular\/core';\n     import { BrowserModule } from '@angular\/platform-browser';\n     import { BrowserAnimationsModule } from '@angular\/platform-browser\/animations';\n@NgModule({\n   imports: [\n     BrowserModule,\n     BrowserAnimationsModule\n   ],\n   declarations: [ ],\n   bootstrap: [ ]\n })\n export class AppModule { }\n 2. **Importing animation functions into component files:** Import required animation functions from @angular\/animations in component files(for example, src\/app\/app.component.ts).javascript\n import {\n   trigger,\n   state,\n   style,\n   animate,\n   transition,\n   \/\/ ...\n } from '@angular\/animations';\n 3. **Adding the animation metadata property:** add a metadata property called animations: within the @Component() decorator in component files(for example, src\/app\/app.component.ts)javascript\n @Component({\n   selector: 'app-root',\n   templateUrl: 'app.component.html',\n   styleUrls: ['app.component.css'],\n   animations: [\n     \/\/ animation triggers go here\n   ]\n })\n ```"},{"question":"What is State function?","answer":"Angular's state() function is used to define different states to call at the end of each transition. This function takes two arguments: a unique name like open or closed and a style() function.\nFor example, you can write a open state functionjavascript\n state('open', style({\n   height: '300px',\n   opacity: 0.5,\n   backgroundColor: 'blue'\n })),"},{"question":"What is Style function?","answer":"The style function is used to define a set of styles to associate with a given state name. You need to use it along with state() function to set CSS style attributes. For example, in the close state, the button has a height of 100 pixels, an opacity of 0.8, and a background color of green.\njavascript\n state('close', style({\n   height: '100px',\n   opacity: 0.8,\n   backgroundColor: 'green'\n })),\nNote: The style attributes must be in camelCase."},{"question":"What is the purpose of animate function?","answer":"Angular Animations are a powerful way to implement sophisticated and compelling animations for your Angular single page web application.\n\n```javascript\nimport { Component, OnInit, Input } from '@angular\/core';\nimport { trigger, state, style, animate, transition } from '@angular\/animations';\n\n@Component({\nselector: 'app-animate',\ntemplateUrl: `<div [@changeState]=\"currentState\" class=\"myblock mx-auto\"><\/div>`,\nstyleUrls: `.myblock {\n    background-color: green;\n    width: 300px;\n    height: 250px;\n    border-radius: 5px;\n    margin: 5rem;\n    }`,\nanimations: [\n    trigger('changeState', [\n    state('state1', style({\n        backgroundColor: 'green',\n        transform: 'scale(1)'\n    })),\n    state('state2', style({\n        backgroundColor: 'red',\n        transform: 'scale(1.5)'\n    })),\n    transition('*=>state1', animate('300ms')),\n    transition('*=>state2', animate('2000ms'))\n    ])\n]\n})\nexport class AnimateComponent implements OnInit {\n\n    @Input() currentState;\n\n    constructor() { }\n\n    ngOnInit() {\n    }\n}\n```"},{"question":"What is transition function?","answer":"The animation transition function is used to specify the changes that occur between one state and another over a period of time. It accepts two arguments: the first argument accepts an expression that defines the direction between two transition states, and the second argument accepts an animate() function.\nLet's take an example state transition from open to closed with an half second transition between states.javascript\n transition('open => closed', [\n   animate('500ms')\n ]),"},{"question":"How to inject the dynamic script in angular?","answer":"Using DomSanitizer we can inject the dynamic Html,Style,Script,Url.\nimport { Component, OnInit } from '@angular\/core';\n import { DomSanitizer } from '@angular\/platform-browser';\n @Component({\n    selector: 'my-app',\n    template: `\n        <div [innerHtml]=\"htmlSnippet\"><\/div>\n    `,\n })\n export class App {\n        constructor(protected sanitizer: DomSanitizer) {}\n        htmlSnippet: string = this.sanitizer.bypassSecurityTrustScript(\"<script>safeCode()<\/script>\");\n    }"},{"question":"What is a service worker and its role in Angular?","answer":"A service worker is a script that runs in the web browser and manages caching for an application. Starting from 5.0.0 version, Angular ships with a service worker implementation. Angular service worker is designed to optimize the end user experience of using an application over a slow or unreliable network connection, while also minimizing the risks of serving outdated content."},{"question":"What are the design goals of service workers?","answer":"Below are the list of design goals of Angular's service workers,\n\nIt caches an application just like installing a native application\nA running application continues to run with the same version of all files without any incompatible files\nWhen you refresh the application, it loads the latest fully cached version\nWhen changes are published then it immediately updates in the background\nService workers saves the bandwidth by downloading the resources only when they changed."},{"question":"What are the differences between AngularJS and Angular with respect to dependency injection?","answer":"Dependency injection is a common component in both AngularJS and Angular, but there are some key differences between the two frameworks in how it actually works.\n\n| AngularJS | Angular |\n|---- | ---------\n| Dependency injection tokens are always strings  | Tokens can have different types. They are often classes and sometimes can be strings. |\n| There is exactly one injector even though it is a multi-module applications | There is a tree hierarchy of injectors, with a root injector and an additional injector for each component. |"},{"question":"What is Angular Ivy?","answer":"Angular Ivy is a new rendering engine for Angular. You can choose to opt in a preview version of Ivy from Angular version 8.\n\n\nYou can enable ivy in a new project by using the --enable-ivy flag with the ng new command\nbash\n  ng new ivy-demo-app --enable-ivy\n      2. You can add it to an existing project by adding enableIvy option in the angularCompilerOptions in your project's tsconfig.app.json.\njavascript\n  {\n    \"compilerOptions\": { ... },\n    \"angularCompilerOptions\": {\n      \"enableIvy\": true\n    }\n  }"},{"question":"What are the features included in ivy preview?","answer":"You can expect below features with Ivy preview,\n\nGenerated code that is easier to read and debug at runtime\nFaster re-build time\nImproved payload size\nImproved template type checking"},{"question":"Can I use AOT compilation with Ivy?","answer":"Yes, it is a recommended configuration. Also, AOT compilation with Ivy is faster. So you need set the default build options(with in angular.json) for your project to always use AOT compilation.\njavascript\n  {\n    \"projects\": {\n      \"my-project\": {\n        \"architect\": {\n          \"build\": {\n            \"options\": {\n              ...\n              \"aot\": true,\n            }\n          }\n        }\n      }\n    }\n  }"},{"question":"What is Angular Language Service?","answer":"The Angular Language Service is a way to get completions, errors, hints, and navigation inside your Angular templates whether they are external in an HTML file or embedded in annotations\/decorators in a string. It has the ability to autodetect that you are opening an Angular file, reads your `tsconfig.json` file, finds all the templates you have in your application, and then provides all the language services."},{"question":"How do you install angular language service in the project?","answer":"You can install Angular Language Service in your project with the following npm command,\njavascript\n  npm install --save-dev @angular\/language-service\n  After that add the following to the \"compilerOptions\" section of your project's tsconfig.jsonjavascript\n  \"plugins\": [\n      {\"name\": \"@angular\/language-service\"}\n  ]\nNote: The completion and diagnostic services works for .ts files only. You need to use custom plugins for supporting HTML files."},{"question":"Is there any editor support for Angular Language Service?","answer":"Yes, Angular Language Service is currently available for Visual Studio Code and WebStorm IDEs. You need to install angular language service using an extension and devDependency respectively. In sublime editor, you need to install typescript which has has a language service plugin model."},{"question":"Explain the features provided by Angular Language Service?","answer":"Basically there are 3 main features provided by Angular Language Service,\n\n\nAutocompletion: Autocompletion can speed up your development time by providing you with contextual possibilities and hints as you type with in an interpolation and elements.\n\n\n\nError checking: It can also warn you of mistakes in your code.\n\n\n\nNavigation: Navigation allows you to hover a component, directive, module and then click and press F12 to go directly to its definition."},{"question":"How do you add web workers in your application?","answer":"You can add web worker anywhere in your application. For example, If the file that contains your expensive computation is `src\/app\/app.component.ts`, you can add a Web Worker using `ng generate web-worker app` command which will create `src\/app\/app.worker.ts` web worker file. This command will perform below actions,\n\nConfigure your project to use Web Workers\nAdds app.worker.ts to receive messages\n      javascript\n      addEventListener('message', ({ data }) => {\n        const response = `worker response to ${data}`;\n        postMessage(response);\n      });\nThe component app.component.ts file updated with web worker file\n      javascript\n      if (typeof Worker !== 'undefined') {\n        \/\/ Create a new\n        const worker = new Worker('.\/app.worker', { type: 'module' });\n        worker.onmessage = ({ data }) => {\n          console.log('page got message: $\\{data\\}');\n        };\n        worker.postMessage('hello');\n      } else {\n        \/\/ Web Workers are not supported in this environment.\n      }\nNote: You may need to refactor your initial scaffolding web worker code for sending messages to and from."},{"question":"What are the limitations with web workers?","answer":"You need to remember two important things when using Web Workers in Angular projects,\n\nSome environments or platforms(like @angular\/platform-server) used in Server-side Rendering, don't support Web Workers. In this case you need to provide a fallback mechanism to perform the computations to work in this environments.\nRunning Angular in web worker using @angular\/platform-webworker is not yet supported in Angular CLI."},{"question":"What is Angular CLI Builder?","answer":"In Angular8, the CLI Builder API is stable and available to developers who want to customize the `Angular CLI` by adding or modifying commands. For example, you could supply a builder to perform an entirely new task, or to change which third-party tool is used by an existing command."},{"question":"What is a builder?","answer":"A builder function is a function that uses the `Architect API` to perform a complex process such as \"build\" or \"test\". The builder code is defined in an npm package. For example, BrowserBuilder runs a webpack build for a browser target and KarmaBuilder starts the Karma server and runs a webpack build for unit tests."},{"question":"How do you invoke a builder?","answer":"The Angular CLI command `ng run` is used to invoke a builder with a specific target configuration. The workspace configuration file, `angular.json`, contains default configurations for built-in builders."},{"question":"How do you create app shell in Angular?","answer":"An App shell is a way to render a portion of your application via a route at build time. This is useful to first paint of your application that appears quickly because the browser can render static HTML and CSS without the need to initialize JavaScript. You can achieve this using Angular CLI which generates an app shell for running server-side of your app.\njavascript\n  ng generate appShell [options] (or)\n  ng g appShell [options]"},{"question":"What are the case types in Angular?","answer":"Angular uses capitalization conventions to distinguish the names of various types. Angular follows the list of the below case types.\n\ncamelCase : Symbols, properties, methods, pipe names, non-component directive selectors, constants uses lowercase on the first letter of the item. For example, \"selectedUser\"\nUpperCamelCase (or PascalCase): Class names, including classes that define components, interfaces, NgModules, directives, and pipes uses uppercase on the first letter of the item.\ndash-case (or \"kebab-case\"): The descriptive part of file names, component selectors uses dashes between the words. For example, \"app-user-list\".\nUPPER_UNDERSCORE_CASE: All constants uses capital letters connected with underscores. For example, \"NUMBER_OF_USERS\"."},{"question":"What are the class decorators in Angular?","answer":"A class decorator is a decorator that appears immediately before a class definition, which declares the class to be of the given type, and provides metadata suitable to the type\nThe following list of decorators comes under class decorators,\n@Component()\n@Directive()\n@Pipe()\n@Injectable()\n@NgModule()"},{"question":"What are class field decorators?","answer":"The class field decorators are the statements declared immediately before a field in a class definition that defines the type of that field. Some of the examples are: @input and @output,\njavascript\n  @Input() myProperty;\n  @Output() myEvent = new EventEmitter();"},{"question":"What is declarable in Angular?","answer":"Declarable is a class type that you can add to the declarations list of an NgModule. The class types such as components, directives, and pipes comes can be declared in the module. The structure of declarations would be,\njavascript\n  declarations: [\n    YourComponent,\n    YourPipe,\n    YourDirective\n  ],"},{"question":"What are the restrictions on declarable classes?","answer":"Below classes shouldn't be declared,\n\nA class that's already declared in another NgModule\nNgmodule classes\nService classes\nHelper classes"},{"question":"What is a DI token?","answer":"A DI token is a lookup token associated with a dependency provider in dependency injection system. The injector maintains an internal token-provider map that it references when asked for a dependency and the DI token is the key to the map. Let's take example of DI Token usage,\njavascript\n  const BASE_URL = new InjectionToken<string>('BaseUrl');\n  const injector =\n     Injector.create({providers: [{provide: BASE_URL, useValue: 'http:\/\/some-domain.com'}]});\n  const url = injector.get(BASE_URL);"},{"question":"What is Angular DSL?","answer":"A domain-specific language (DSL) is a computer language specialized to a particular application domain. Angular has its own Domain Specific Language (DSL) which allows us to write Angular specific html-like syntax on top of normal html. It has its own compiler that compiles this syntax to html that the browser can understand. This DSL is defined in NgModules such as animations, forms, and routing and navigation.\nBasically you will see 3 main syntax in Angular DSL.\n(): Used for Output and DOM events.\n[]: Used for Input and specific DOM element attributes.\n*: Structural directives(ngFor or ngIf) will affect\/change the DOM structure."},{"question":"what is an rxjs subject in Angular","answer":"An RxJS Subject is a special type of Observable that allows values to be multicasted to many Observers. While plain Observables are unicast (each subscribed Observer owns an independent execution of the Observable), Subjects are multicast.\nA Subject is like an Observable, but can multicast to many Observers. Subjects are like EventEmitters: they maintain a registry of many listeners.``` typescript\n  import { Subject } from 'rxjs';const subject = new Subject<number>();\n\nsubject.subscribe({\n  next: (v) => console.log(`observerA: ${v}`)\n});\nsubject.subscribe({\n  next: (v) => console.log(`observerB: ${v}`)\n});\n\nsubject.next(1);\nsubject.next(2);\n```"},{"question":"What is Bazel tool?","answer":"Bazel is a powerful build tool developed and massively used by Google and it can keep track of the dependencies between different packages and build targets. In Angular8, you can build your CLI application with Bazel.\n  **Note:** The Angular framework itself is built with Bazel."},{"question":"What are the advantages of Bazel tool?","answer":"Below are the list of key advantages of Bazel tool,\n\nIt creates the possibility of building your back-ends and front-ends with the same tool\nThe incremental build and tests\nIt creates the possibility to have remote builds and cache on a build farm."},{"question":"How do you use Bazel with Angular CLI?","answer":"The @angular\/bazel package provides a builder that allows Angular CLI to use Bazel as the build tool.\n\nUse in an existing applciation: Add @angular\/bazel using CLI\n     javascript\n     ng add @angular\/bazel\nUse in a new application: Install the package and create the application with collection option\n     javascript\n     npm install -g @angular\/bazel\n     ng new --collection=@angular\/bazel\n When you use ng build and ng serve commands, Bazel is used behind the scenes and outputs the results in dist\/bin folder."},{"question":"How do you run Bazel directly?","answer":"Sometimes you may want to bypass the Angular CLI builder and run Bazel directly using Bazel CLI. You can install it globally using @bazel\/bazel npm package. i.e, Bazel CLI is available under @bazel\/bazel package. After you can apply the below common commands,\njavascrippt\n bazel build [targets] \/\/ Compile the default output artifacts of the given targets.\n bazel test [targets] \/\/ Run the tests with *_test targets found in the pattern.\n bazel run [target]: Compile the program represented by target and then run it."},{"question":"What is platform in Angular?","answer":"A platform is the context in which an Angular application runs. The most common platform for Angular applications is a web browser, but it can also be an operating system for a mobile device, or a web server. The runtime-platform is provided by the @angular\/platform-* packages and these packages allow applications that make use of `@angular\/core` and `@angular\/common` to execute in different environments.\n i.e, Angular can be used as platform-independent framework in different environments, For example,\n\nWhile running in the browser, it uses platform-browser package.\nWhen SSR(server-side rendering ) is used, it uses platform-server package for providing web server implementation."},{"question":"What happens if I import the same module twice?","answer":"If multiple modules imports the same module then angular evaluates it only once (When it encounters the module first time). It follows this condition even the module appears at any level in a hierarchy of imported NgModules."},{"question":"How do you select an element with in a component template?","answer":"You can use `@ViewChild` directive to access elements in the view directly. Let's take input element with a reference,\nhtml\n <input #uname>\n and define view child directive and access it in ngAfterViewInit lifecycle hook```javascript\n @ViewChild('uname') input;ngAfterViewInit() {\n   console.log(this.input.nativeElement.value);\n }\n ```"},{"question":"How do you detect route change in Angular?","answer":"In Angular7, you can subscribe to router to detect the changes. The subscription for router events would be as below,\njavascript\n this.router.events.subscribe((event: Event) => {})\n Let's take a simple component to detect router changes```javascript\n import { Component } from '@angular\/core';\n import { Router, Event, NavigationStart, NavigationEnd, NavigationError } from '@angular\/router';@Component({\n     selector: 'app-root',\n     template: <router-outlet><\/router-outlet>\n })\n export class AppComponent { constructor(private router: Router) {\n\n     this.router.events.subscribe((event: Event) => {\n         if (event instanceof NavigationStart) {\n             \/\/ Show loading indicator and perform an action\n         }\n\n         if (event instanceof NavigationEnd) {\n             \/\/ Hide loading indicator and perform an action\n         }\n\n         if (event instanceof NavigationError) {\n             \/\/ Hide loading indicator and perform an action\n             console.log(event.error); \/\/ It logs an error for debugging\n         }\n     });\n}\n}\n ```"},{"question":"How do you pass headers for HTTP client?","answer":"You can directly pass object map for http client or create HttpHeaders class to supply the headers.\n```javascript\n constructor(private _http: HttpClient) {}\n this._http.get('someUrl',{\n    headers: {'header1':'value1','header2':'value2'}\n });(or)\n let headers = new HttpHeaders().set('header1', headerValue1); \/\/ create header object\n headers = headers.append('header2', headerValue2); \/\/ add a new header, creating a new object\n headers = headers.append('header3', headerValue3); \/\/ add another headerlet params = new HttpParams().set('param1', value1); \/\/ create params object\n params = params.append('param2', value2); \/\/ add a new param, creating a new object\n params = params.append('param3', value3); \/\/ add another paramreturn this._http.get('someUrl', { headers: headers, params: params })\n ```"},{"question":"What is the purpose of differential loading in CLI?","answer":"From Angular8 release onwards, the applications are built using differential loading strategy from CLI to build two separate bundles as part of your deployed application.\n\nThe first build contains ES2015 syntax which takes the advantage of built-in support in modern browsers, ships less polyfills, and results in a smaller bundle size.\nThe second build contains old ES5 syntax to support older browsers with all necessary polyfills. But this results in a larger bundle size.\nNote: This strategy is used to support multiple browsers but it only load the code that the browser needs."},{"question":"Is Angular supports dynamic imports?","answer":"Yes, Angular 8 supports dynamic imports in router configuration. i.e, You can use the import statement for lazy loading the module using `loadChildren` method and it will be understood by the IDEs(VSCode and WebStorm), webpack, etc.\n Previously, you have been written as below to lazily load the feature module. By mistake, if you have typo in the module name it still accepts the string and throws an error during build time.\n ```javascript\n {path: \u2018user\u2019, loadChildren: \u2018.\/users\/user.module#UserModulee\u2019},\n ```\n This problem is resolved by using dynamic imports and IDEs are able to find it during compile time itself.\n ```javascript\n {path: \u2018user\u2019, loadChildren: () => import(\u2018.\/users\/user.module\u2019).then(m => m.UserModule)};\n ```"},{"question":"What is lazy loading?","answer":"Lazy loading is one of the most useful concepts of Angular Routing. It helps us to download the web pages in chunks instead of downloading everything in a big bundle. It is used for lazy loading by asynchronously loading the feature module for routing whenever required using the property `loadChildren`. Let's load both `Customer` and `Order` feature modules lazily as below,\n ```javascript\n const routes: Routes = [\n   {\n     path: 'customers',\n     loadChildren: () => import('.\/customers\/customers.module').then(module => module.CustomersModule)\n   },\n   {\n     path: 'orders',\n     loadChildren: () => import('.\/orders\/orders.module').then(module => module.OrdersModule)\n   },\n   {\n     path: '',\n     redirectTo: '',\n     pathMatch: 'full'\n   }\n ];\n ```"},{"question":"What are workspace APIs?","answer":"Angular 8.0 release introduces Workspace APIs to make it easier for developers to read and modify the angular.json file instead of manually modifying it. Currently, the only supported storage3 format is the JSON-based format used by the Angular CLI. You can enable or add optimization option for build target as below,\n ```javascript\n import { NodeJsSyncHost } from '@angular-devkit\/core\/node';\n import { workspaces } from '@angular-devkit\/core';\nasync function addBuildTargetOption() {\n     const host = workspaces.createWorkspaceHost(new NodeJsSyncHost());\n     const workspace = await workspaces.readWorkspace('path\/to\/workspace\/directory\/', host); const project = workspace.projects.get('my-app');\n if (!project) {\n   throw new Error('my-app does not exist');\n }\n\n const buildTarget = project.targets.get('build');\n if (!buildTarget) {\n   throw new Error('build target does not exist');\n }\n\n buildTarget.options.optimization = true;\n\n await workspaces.writeWorkspace(workspace, host);\n}addBuildTargetOption();\n ```"},{"question":"How do you upgrade angular version?","answer":"The Angular upgrade is quite easier using Angular CLI `ng update` command as mentioned below. For example, if you upgrade from Angular 7 to 8 then your lazy loaded route imports will be migrated to the new import syntax automatically.\n ```bash\n $ ng update @angular\/cli @angular\/core\n ```"},{"question":"What is Angular Material?","answer":"Angular Material is a collection of Material Design components for Angular framework following the Material Design spec. You can apply Material Design very easily using Angular Material. The installation can be done through npm or yarn,\n ```bash\n npm install --save @angular\/material @angular\/cdk @angular\/animations\n (OR)\n yarn add @angular\/material @angular\/cdk @angular\/animations\n ```\n It supports the most recent two versions of all major browsers. The latest version of Angular material is 8.1.1"},{"question":"How do you upgrade location service of angularjs?","answer":"If you are using `$location` service in your old AngularJS application, now you can use `LocationUpgradeModule`(unified location service) which puts the responsibilities of `$location` service to `Location` service in Angular. Let's add this module to `AppModule` as below,\n ```javascript\n \/\/ Other imports ...\n import { LocationUpgradeModule } from '@angular\/common\/upgrade';\n@NgModule({\n   imports: [\n     \/\/ Other NgModule imports...\n     LocationUpgradeModule.config()\n   ]\n })\n export class AppModule {}\n ```"},{"question":"What is NgUpgrade?","answer":"NgUpgrade is a library put together by the Angular team, which you can use in your applications to mix and match AngularJS and Angular components and bridge the AngularJS and Angular dependency injection systems."},{"question":"How do you test Angular application using CLI?","answer":"Angular CLI downloads and install everything needed with the Jasmine Test framework. You just need to run `ng test` to see the test results. By default this command builds the app in watch mode, and launches the `Karma test runner`. The output of test results would be as below,\n ```bash\n 10% building modules 1\/1 modules 0 active\n ...INFO [karma]: Karma v1.7.1 server started at http:\/\/0.0.0.0:9876\/\n ...INFO [launcher]: Launching browser Chrome ...\n ...INFO [launcher]: Starting browser Chrome\n ...INFO [Chrome ...]: Connected on socket ...\n Chrome ...: Executed 3 of 3 SUCCESS (0.135 secs \/ 0.205 secs)\n ```\n **Note:** A chrome browser also opens and displays the test output in the \"Jasmine HTML Reporter\"."},{"question":"How to use polyfills in Angular application?","answer":"The Angular CLI provides support for polyfills officially. When you create a new project with the ng new command, a `src\/polyfills.ts` configuration file is created as part of your project folder. This file includes the mandatory and many of the optional polyfills as JavaScript import statements. Let's categorize the polyfills,\n\nMandatory polyfills: These are installed automatically when you create your project with ng new command and the respective import statements enabled in 'src\/polyfills.ts' file.\nOptional polyfills: You need to install its npm package and then create import statement in 'src\/polyfills.ts' file.\n    For example, first you need to install below npm package for adding web animations (optional) polyfill.\n        bash\n         npm install --save web-animations-js\n    and create import statement in polyfill file.\n        javascript\n        import 'web-animations-js';"},{"question":"What are the ways to trigger change detection in Angular?","answer":"You can inject either ApplicationRef or NgZone, or ChangeDetectorRef into your component and apply below specific methods to trigger change detection in Angular. i.e, There are 3 possible ways,\n\nApplicationRef.tick(): Invoke this method to explicitly process change detection and its side-effects. It check the full component tree.\nNgZone.run(callback): It evaluate the callback function inside the Angular zone.\nChangeDetectorRef.detectChanges(): It detects only the components and it's children."},{"question":"What are the differences of various versions of Angular?","answer":"There are different versions of Angular framework. Let's see the features of all the various versions,\n\nAngular 1:\nAngular 1 (AngularJS) is the first angular framework released in the year 2010.\nAngularJS is not built for mobile devices.\nIt is based on controllers with MVC architecture.\n\n\nAngular 2:\nAngular 2 was released in the year 2016. Angular 2 is a complete rewrite of Angular1 version.\nThe performance issues that Angular 1 version had has been addressed in Angular 2 version.\nAngular 2 is built from scratch for mobile devices unlike Angular 1 version.\nAngular 2 is components based.\n\n\nAngular 3:\nThe following are the different package versions in Angular 2:\n@angular\/core v2.3.0\n@angular\/compiler v2.3.0\n@angular\/http v2.3.0\n@angular\/router v3.3.0\nThe router package is already versioned 3 so to avoid confusion switched to Angular 4 version and skipped 3 version.\n\n\nAngular 4:\nThe compiler generated code file size in AOT mode is very much reduced.\nWith Angular 4 the production bundles size is reduced by hundreds of KB\u2019s.\nAnimation features are removed from angular\/core and formed as a separate package.\nSupports Typescript 2.1 and 2.2.\nAngular Universal\nNew HttpClient\n\n\nAngular 5:\nAngular 5 makes angular faster. It improved the loading time and execution time.\nShipped with new build optimizer.\nSupports Typescript 2.5.\nService Worker\n\n\nAngular 6:\nIt is released in May 2018.\nIncludes Angular Command Line Interface (CLI), Component Development KIT (CDK), Angular Material Package, Angular Elements.\nService Worker bug fixes.\ni18n\nExperimental mode for Ivy.\nRxJS 6.0\nTree Shaking\n\n\nAngular 7:\nIt is released in October 2018.\nTypeScript 3.1\nRxJS 6.3\nNew Angular CLI\nCLI Prompts capability provide an ability to ask questions to the user before they run. It is like interactive dialog between the user and the CLI\nWith the improved CLI Prompts capability, it helps developers to make the decision. New ng commands ask users for routing and CSS styles types(SCSS) and ng add @angular\/material asks for themes and gestures or animations.\n\n\nAngular 8:\nIt is released in May 2019.\nTypeScript 3.4\n\n\nAngular 9:\nIt is released in February 2020.\nTypeScript 3.7\nIvy enabled by default\n\n\nAngular 10:\n        * It is released in June 2020.\n        * TypeScript 3.9 \n        * TSlib 2.0"},{"question":"What are the security principles in angular?","answer":"Below are the list of security principles in angular,\n\n1.  You should avoid direct use of the DOM APIs.\n2.  You should enable Content Security Policy (CSP) and configure your web server to return appropriate CSP HTTP headers.\n3.  You should Use the offline template compiler.\n4.  You should Use Server Side XSS protection.\n5.  You should Use DOM Sanitizer.\n6.  You should Preventing CSRF or XSRF attacks."},{"question":"What is the reason to deprecate Web Tracing Framework?","answer":"Angular has supported the integration with the Web Tracing Framework (WTF) for the purpose of performance testing. Since it is not well maintained and failed in majority of the applications, the support is deprecated in latest releases."},{"question":"What is the reason to deprecate web worker packages?","answer":"Both `@angular\/platform-webworker` and `@angular\/platform-webworker-dynamic` are officially deprecated, the Angular team realized it's not good practice to run the Angular application on Web worker"},{"question":"How do you find angular CLI version?","answer":"Angular CLI provides it's installed version using below different ways using ng command,\nbash\n ng v\n ng version\n ng -v\n ng --version\n and the output would be as below,bash\n Angular CLI: 1.6.3\n Node: 8.11.3\n OS: darwin x64\n Angular:\n ..."},{"question":"What is the browser support for Angular?","answer":"Angular supports most recent browsers which includes both desktop and mobile browsers.\n| Browser | Version |\n |---- | --------- |\n | Chrome | latest |\n | Firefox | latest |\n | Edge | 2 most recent major versions |\n | IE | 11, 10, 9 (Compatibility mode is not supported) |\n | Safari | 2 most recent major versions |\n | IE Mobile | 11 |\n | iOS | 2 most recent major versions |\n | Android | 7.0, 6.0, 5.0, 5.1, 4.4 |"},{"question":"What is schematic?","answer":"It's a scaffolding library that defines how to generate or transform a programming project by creating, modifying, refactoring, or moving files and code. It defines rules that operate on a virtual file system called a tree."},{"question":"What is rule in Schematics?","answer":"In schematics world, it's a function that operates on a file tree to create, delete, or modify files in a specific manner."},{"question":"What is Schematics CLI?","answer":"Schematics come with their own command-line tool known as Schematics CLI. It is used to install the schematics executable, which you can use to create a new schematics collection with an initial named schematic. The collection folder is a workspace for schematics. You can also use the schematics command to add a new schematic to an existing collection, or extend an existing schematic. You can install Schematic CLI globally as below,\n ```bash\n npm install -g @angular-devkit\/schematics-cli\n ```"},{"question":"What are the best practices for security in angular?","answer":"Below are the best practices of security in angular,\n\nUse the latest Angular library releases\nDon't modify your copy of Angular\nAvoid Angular APIs marked in the documentation as \u201cSecurity Risk.\u201d"},{"question":"What is Angular security model for preventing XSS attacks?","answer":"Angular treats all values as untrusted by default. i.e, Angular sanitizes and escapes untrusted values When a value is inserted into the DOM from a template, via property, attribute, style, class binding, or interpolation."},{"question":"What is the role of template compiler for prevention of XSS attacks?","answer":"The offline template compiler prevents vulnerabilities caused by template injection, and greatly improves application performance. So it is recommended to use offline template compiler in production deployments without dynamically generating any template."},{"question":"What are the various security contexts in Angular?","answer":"Angular defines the following security contexts for sanitization,\n\nHTML: It is used when interpreting a value as HTML such as binding to innerHtml.\nStyle: It is used when binding CSS into the style property.\nURL: It is used for URL properties such as <a href>.\nResource URL: It is a URL that will be loaded and executed as code such as <script src>."},{"question":"What is Sanitization? Is angular supports it?","answer":"**Sanitization** is the inspection of an untrusted value, turning it into a value that's safe to insert into the DOM. Yes, Angular suppports sanitization. It sanitizes untrusted values for HTML, styles, and URLs but sanitizing resource URLs isn't possible because they contain arbitrary code."},{"question":"What is the purpose of innerHTML?","answer":"The innerHtml is a property of HTML-Elements, which allows you to set it's html-content programmatically. Let's display the below html code snippet in a `<div>` tag as below using innerHTML binding,\nhtml\n <div [innerHTML]=\"htmlSnippet\"><\/div>\n and define the htmlSnippet property from any component\n javascript\n export class myComponent {\n   htmlSnippet: string = '<b>Hello World<\/b>, Angular';\n }\n Unfortunately this property could cause Cross Site Scripting (XSS) security bugs when improperly handled."},{"question":"What is the difference between interpolated content and innerHTML?","answer":"The main difference between interpolated and innerHTML code is the behavior of code interpreted. Interpolated content is always escaped i.e,  HTML isn't interpreted and the browser displays angle brackets in the element's text content. Where as in innerHTML binding, the content is interpreted i.e, the browser will convert < and > characters as HTMLEntities. For example, the usage in template would be as below,\nhtml\n <p>Interpolated value:<\/p>\n <div >{{htmlSnippet}}<\/div>\n <p>Binding of innerHTML:<\/p>\n <div [innerHTML]=\"htmlSnippet\"><\/div>\n and the property defined in a component.javascript\n export class InnerHtmlBindingComponent {\n   htmlSnippet = 'Template <script>alert(\"XSS Attack\")<\/script> <b>Code attached<\/b>';\n }\n Even though innerHTML binding create a chance of XSS attack, Angular recognizes the value as unsafe and automatically sanitizes it."},{"question":"How do you prevent automatic sanitization?","answer":"Sometimes the applications genuinely need to include executable code such as displaying `<iframe>` from an URL. In this case, you need to prevent automatic sanitization in Angular by saying that you inspected a value, checked how it was generated, and made sure it will always be secure. Basically it involves 2 steps,\n\nInject DomSanitizer: You can inject DomSanitizer in component as parameter in constructor\n\nMark the trusted value by calling some of the below methods\n\nbypassSecurityTrustHtml\nbypassSecurityTrustScript\nbypassSecurityTrustStyle\nbypassSecurityTrustUrl\nbypassSecurityTrustResourceUrl\n\n\nFor example,The  usage of dangerous url to trusted url would be as below,javascript\n constructor(private sanitizer: DomSanitizer) {\n   this.dangerousUrl = 'javascript:alert(\"XSS attack\")';\n   this.trustedUrl = sanitizer.bypassSecurityTrustUrl(this.dangerousUrl);"},{"question":"Is safe to use direct DOM API methods in terms of security?","answer":"No,the built-in browser DOM APIs or methods don't automatically protect you from security vulnerabilities. In this case it is recommended to use Angular templates instead of directly interacting with DOM. If it is unavoidable then use the built-in Angular sanitization functions."},{"question":"What is DOM sanitizer?","answer":"`DomSanitizer` is used to help preventing Cross Site Scripting Security bugs (XSS) by sanitizing values to be safe to use in the different DOM contexts."},{"question":"How do you support server side XSS protection in Angular application?","answer":"The server-side XSS protection is supported in an angular application by using a templating language that automatically escapes values to prevent XSS vulnerabilities on the server. But don't use a templating language to generate Angular templates on the server side which creates a high risk of introducing template-injection vulnerabilities."},{"question":"Is angular prevents http level vulnerabilities?","answer":"Angular has built-in support for preventing http level vulnerabilities such as as cross-site request forgery (CSRF or XSRF) and cross-site script inclusion (XSSI). Even though these vulnerabilities need to be mitigated on server-side, Angular provides helpers to make the integration easier on the client side.\n\nHttpClient supports a token mechanism used to prevent XSRF attacks\nHttpClient library recognizes the convention of prefixed JSON responses(which non-executable js code with \")]}',\\n\" characters) and automatically strips the string \")]}',\\n\" from all responses before further parsing"},{"question":"What are Http Interceptors?","answer":"Http Interceptors are part of @angular\/common\/http, which inspect and transform HTTP requests from your application to the server and vice-versa on HTTP responses. These interceptors can perform a variety of implicit tasks, from authentication to logging.\nThe syntax of HttpInterceptor interface looks like as below,javascript\n interface HttpInterceptor {\n   intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>\n }\n You can use interceptors by declaring a service class that implements the intercept() method of the HttpInterceptor interface.javascript\n @Injectable()\n export class MyInterceptor implements HttpInterceptor {\n     constructor() {}\n     intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n         ...\n     }\n }\n After that you can use it in your module,javascript\n @NgModule({\n     ...\n     providers: [\n         {\n             provide: HTTP_INTERCEPTORS,\n             useClass: MyInterceptor,\n             multi: true\n         }\n     ]\n     ...\n })\n export class AppModule {}"},{"question":"What are the applications of HTTP interceptors?","answer":"The HTTP Interceptors can be used for different variety of tasks,\n\nAuthentication\nLogging\nCaching\nFake backend\nURL transformation\nModifying headers"},{"question":"Is multiple interceptors supported in Angular?","answer":"Yes, Angular supports multiple interceptors at a time. You could define multiple interceptors in providers property:\n ```javascript\n providers: [\n   { provide: HTTP_INTERCEPTORS, useClass: MyFirstInterceptor, multi: true },\n   { provide: HTTP_INTERCEPTORS, useClass: MySecondInterceptor, multi: true }\n ],\n ```\n The interceptors will be called in the order in which they were provided. i.e, MyFirstInterceptor will be called first in the above interceptors configuration."},{"question":"How can I use interceptor for an entire application?","answer":"You can use same instance of `HttpInterceptors` for the entire app by importing the `HttpClientModule` only in your AppModule, and add the interceptors to the root application injector.\n For example, let's define a class that is injectable in root application.\n  ```javascript\n  @Injectable()\n  export class MyInterceptor implements HttpInterceptor {\n    intercept(\n      req: HttpRequest<any>,\n      next: HttpHandler\n    ): Observable<HttpEvent<any>> {\n\n  return next.handle(req).do(event => {\n    if (event instanceof HttpResponse) {\n         \/\/ Code goes here\n    }\n  });\n\n}\n}\n  After that import HttpClientModule in AppModulejavascript\n @NgModule({\n   declarations: [AppComponent],\n   imports: [BrowserModule, HttpClientModule],\n   providers: [\n     { provide: HTTP_INTERCEPTORS, useClass: MyInterceptor, multi: true }\n   ],\n   bootstrap: [AppComponent]\n })\n export class AppModule {}\n ```"},{"question":"How does Angular simplifies Internationalization?","answer":"Angular simplifies the below areas of internationalization,\n 1. Displaying dates, number, percentages, and currencies in a local format.\n 2. Preparing text in component templates for translation.\n 3. Handling plural forms of words.\n 4. Handling alternative text."},{"question":"How do you manually register locale data?","answer":"By default, Angular only contains locale data for en-US which is English as spoken in the United States of America . But if you want to set to another locale, you must import locale data for that new locale. After that you can register using `registerLocaleData` method and the syntax of this method looks like below,\n ```javascript\n registerLocaleData(data: any, localeId?: any, extraData?: any): void\n ```\n For example, let us import German locale and register it in the application\n ```javascript\n import { registerLocaleData } from '@angular\/common';\n import localeDe from '@angular\/common\/locales\/de';\nregisterLocaleData(localeDe, 'de');\n ```"},{"question":"What are the four phases of template translation?","answer":"The i18n template translation process has four phases:\n\n\nMark static text messages in your component templates for translation: You can place i18n on every element tag whose fixed text is to be translated. For example, you need i18n attribue for heading as below,\n     javascript\n     <h1 i18n>Hello i18n!<\/h1>\n\n\nCreate a translation file: Use the Angular CLI xi18n command to extract the marked text into an industry-standard translation source file. i.e, Open terminal window at the root of the app project and run the CLI command xi18n.\n     bash\n     ng xi18n\n    The above command creates a file named messages.xlf in your project's root directory.\nNote: You can supply command options to change the format, the name, the location, and the source locale of the extracted file.\n\n\nEdit the generated translation file: Translate the extracted text into the target language. In this step, create a localization folder (such as locale)under root directory(src) and then create target language translation file by copying and renaming the default messages.xlf file. You need to copy source text node and provide the translation under target tag.\n     For example, create the translation file(messages.de.xlf) for German language\n     javascript\n     <trans-unit id=\"greetingHeader\" datatype=\"html\">\n       <source>Hello i18n!<\/source>\n       <target>Hallo i18n !<\/target>\n       <note priority=\"1\" from=\"description\">A welcome header for this sample<\/note>\n       <note priority=\"1\" from=\"meaning\">welcome message<\/note>\n     <\/trans-unit>\n\n\nMerge the completed translation file into the app: You need to use Angular CLI build command to compile the app, choosing a locale-specific configuration, or specifying the following command options.\n\n--i18nFile=path to the translation file\n--i18nFormat=format of the translation file\n--i18nLocale= locale id"},{"question":"What is the purpose of i18n attribute?","answer":"The Angular i18n attribute marks translatable content. It is a custom attribute, recognized by Angular tools and compilers. The compiler removes it after translation.\nNote: Remember that i18n is not an Angular directive."},{"question":"What is the purpose of custom id?","answer":"When you change the translatable text, the Angular extractor tool generates a new id for that translation unit. Because of this behavior, you must then update the translation file with the new id every time.\nFor example, the translation file messages.de.xlf.html has generated trans-unit for some text message as below\n html\n <trans-unit id=\"827wwe104d3d69bf669f823jjde888\" datatype=\"html\">\n You can avoid this manual update of id attribute by specifying a custom id in the i18n attribute by using the prefix @@.\n javascript\n <h1 i18n=\"@@welcomeHeader\">Hello i18n!<\/h1>"},{"question":"What happens if the custom id is not unique?","answer":"You need to define custom ids as unique. If you use the same id for two different text messages then only the first one is extracted. But its translation is used in place of both original text messages.\nFor example, let's define same custom id myCustomId for two messages,\n html\n <h2 i18n=\"@@myCustomId\">Good morning<\/h3>\n <!-- ... -->\n <h2 i18n=\"@@myCustomId\">Good night<\/p>\n and the translation unit generated for first text in for German language as\n html\n <trans-unit id=\"myId\" datatype=\"html\">\n   <source>Good morning<\/source>\n   <target state=\"new\">Guten Morgen<\/target>\n <\/trans-unit>\n Since custom id is the same, both of the elements in the translation contain the same text as below\n html\n <h2>Guten Morgen<\/h2>\n <h2>Guten Morgen<\/h2>"},{"question":"Can I translate text without creating an element?","answer":"Yes, you can achieve using `<ng-container>` attribute. Normally you need to wrap a text content with i18n attribute for the translation. But if you don't want to create a new DOM element just for the sake of translation, you can wrap the text in an <ng-container> element.\n ```html\n <ng-container i18n>I'm not using any DOM element for translation<\/ng-container>\n ```\n Remember that `<ng-container>` is transformed into an html comment"},{"question":"How can I translate attribute?","answer":"You can translate attributes by attaching `i18n-x` attribute  where x is the name of the attribute to translate. For example, you can translate image title attribute as below,\n ```html\n <img [src]=\"example\" i18n-title title=\"Internationlization\" \/>\n ```\n By the way, you can also assign meaning, description and id with the i18n-x=\"<meaning>|<description>@@<id>\" syntax."},{"question":"List down the pluralization categories?","answer":"Pluralization has below categories depending on the language.\n\n=0 (or any other number)\nzero\none\ntwo\nfew\nmany\nother"},{"question":"What is select ICU expression?","answer":"ICU expression is is similar to the plural expressions except that you choose among alternative translations based on a string value instead of a number. Here you define those string values.\nLet's take component binding with residenceStatus property which has \"citizen\", \"permanent resident\" and \"foreigner\" possible values and the message maps those values to the appropriate translations.\n javascript\n <span i18n>The person is {residenceStatus, select, citizen {citizen} permanent resident {permanentResident} foreigner {foreigner}}<\/span>"},{"question":"How do you report missing translations?","answer":"By default, When translation is missing, it generates a warning message such as \"Missing translation for message 'somekey'\". But you can configure with a different level of message in Angular compiler as below,\n\nError: It throws an error. If you are using AOT compilation, the build will fail. But if you are using JIT compilation, the app will fail to load.\nWarning (default): It shows a 'Missing translation' warning in the console or shell.\nIgnore: It doesn't do anything.\nIf you use AOT compiler then you need to perform changes in configurations section of your Angular CLI configuration file, angular.json.\n javascript\n \"configurations\": {\n   ...\n   \"de\": {\n     ...\n     \"i18nMissingTranslation\": \"error\"\n   }\n }\n If you use the JIT compiler, specify the warning level in the compiler config at bootstrap by adding the 'MissingTranslationStrategy' property as below,\n ```javascript\n import { MissingTranslationStrategy } from '@angular\/core';\n import { platformBrowserDynamic } from '@angular\/platform-browser-dynamic';\n import { AppModule } from '.\/app\/app.module';platformBrowserDynamic().bootstrapModule(AppModule, {\n   missingTranslation: MissingTranslationStrategy.Error,\n   providers: [\n     \/\/ ...\n   ]\n });\n ```"},{"question":"How do you provide build configuration for multiple locales?","answer":"You can provide build configuration such as translation file path, name, format and application url in `configuration` settings of Angular.json file. For example, the German version of your application configured the build as follows,\n ```javascript\n \"configurations\": {\n   \"de\": {\n     \"aot\": true,\n     \"outputPath\": \"dist\/my-project-de\/\",\n     \"baseHref\": \"\/fr\/\",\n     \"i18nFile\": \"src\/locale\/messages.de.xlf\",\n     \"i18nFormat\": \"xlf\",\n     \"i18nLocale\": \"de\",\n     \"i18nMissingTranslation\": \"error\",\n   }\n ```"},{"question":"What is an angular library?","answer":"An Angular library is an Angular project that differs from an app in that it cannot run on its own. It must be imported and used in an app. For example,  you can import or add `service worker` library to an Angular application which turns an application into a Progressive Web App (PWA).\nNote: You can create own third party library and publish it as npm package to be used in an Application."},{"question":"What is AOT compiler?","answer":"The AOT compiler is part of a build process that produces a small, fast, ready-to-run application package, typically for production. It converts your Angular HTML and TypeScript code into efficient JavaScript code during the build phase before the browser downloads and runs that code."},{"question":"How do you select an element in component template?","answer":"You can control any DOM element via ElementRef by injecting it into your component's constructor. i.e, The component should have constructor with ElementRef parameter,\n ```javascript\n constructor(myElement: ElementRef) {\n    el.nativeElement.style.backgroundColor = 'yellow';\n }\n ```"},{"question":"What is TestBed?","answer":"TestBed is an api for writing unit tests for Angular applications and it's libraries. Even though We still write our tests in Jasmine and run using Karma, this API provides an easier way to create components, handle injection, test asynchronous behaviour and interact with our application."},{"question":"What is protractor?","answer":"Protractor is an end-to-end test framework for Angular and AngularJS applications. It runs tests against your application running in a real browser, interacting with it as a user would.\n ```javascript\n npm install -g protractor\n ```"},{"question":"What is collection?","answer":"Collection is a set of related schematics collected in an npm package. For example, `@schematics\/angular` collection is used in Angular CLI to apply transforms to a web-app project. You can create your own schematic collection for customizing angular projects."},{"question":"How do you create schematics for libraries?","answer":"You can create your own schematic collections to integrate your library with the Angular CLI. These collections are classified as 3 main schematics,\n\nAdd schematics: These schematics are used to install library in an Angular workspace using ng add command.\n    For example, @angular\/material schematic tells the add command to install and set up Angular Material and theming.\nGenerate schematics: These schematics are used to modify projects, add configurations and scripts, and scaffold artifacts in library using ng generate command.\n    For example, @angular\/material generation schematic supplies generation schematics for the UI components. Let's say the table component is generated using ng generate @angular\/material:table.\nUpdate schematics: These schematics are used to update library's dependencies and adjust for breaking changes in a new library release using ng update command.\n    For example, @angular\/material update schematic updates material and cdk dependencies using ng update @angular\/material command."},{"question":"How do you use jquery in Angular?","answer":"You can use jquery in Angular using 3 simple steps,\n\nInstall the dependency: At first, install the jquery dependency using npm\n     cmd\n        npm install --save jquery\nAdd the jquery script: In Angular-CLI project, add the relative path to jquery in the angular.json file.\n     javascript\n     \"scripts\": [\n        \"node_modules\/jquery\/dist\/jquery.min.js\"\n     ]\n\nStart using jquery: Define the element in template. Whereas declare the jquery variable and apply CSS classes on the element.\n     html\n     <div id=\"elementId\">\n       <h1>JQuery integration<\/h1>\n     <\/div>\n     ```javascript\n     import {Component, OnInit} from '@angular\/core';\ndeclare var $: any; \/\/ (or) import * as $ from 'jquery';\n@Component({\n   selector: 'app-root',\n   templateUrl: '.\/app.component.html',\n   styleUrls: ['.\/app.component.css']\n })\n export class AppComponent implements OnInit {\n   ngOnInit(): void {\n     $(document).ready(() => {\n       $('#elementId').css({'text-color': 'blue', 'font-size': '150%'});\n     });\n   }\n }\n ```"},{"question":"What is the reason for No provider for HTTP exception?","answer":"This exception is due to missing HttpClientModule in your module. You just need to import in module as below,\n ```javascript\n import { HttpClientModule } from '@angular\/common\/http';\n@NgModule({\n   imports: [\n     BrowserModule,\n     HttpClientModule,\n   ],\n   declarations: [ AppComponent ],\n   bootstrap:    [ AppComponent ]\n })\n export class AppModule { }\n ```"},{"question":"What is router state?","answer":"The RouteState is an interface which represents the state of the router as a tree of activated routes.\n ```javascript\n interface RouterState extends Tree {\n   snapshot: RouterStateSnapshot\n   toString(): string\n }\n ```\n You can access the current RouterState from anywhere in the Angular app using the Router service and the routerState property."},{"question":"How can I use SASS in angular project?","answer":"When you are creating your project with angular cli, you can use `ng new`command. It generates all your components with predefined sass files.\n ```javascript\n ng new My_New_Project --style=sass\n ```\n But if you are changing your existing style in your project then use `ng set` command,\n ```javascript\n ng set defaults.styleExt scss\n ```"},{"question":"What is the purpose of hidden property?","answer":"The hidden property is used  to show or hide the associated DOM element, based on an expression. It can be compared close to `ng-show` directive in AngularJS. Let's say you want to show user name based on the availability of user using `hidden` property.\n ```javascript\n <div [hidden]=\"!user.name\">\n   My name is: {{user.name}}\n <\/div>\n ```"},{"question":"What is the difference between ngIf and hidden property?","answer":"The main difference is that *ngIf will remove the element from the DOM, while [hidden] actually plays with the CSS style by setting `display:none`. Generally it is expensive to add and remove stuff from the DOM for frequent actions."},{"question":"What is slice pipe?","answer":"The slice pipe is used to create a new Array or String containing a subset (slice) of the elements. The syntax looks like as below,\n ```javascript\n {{ value_expression | slice : start [ : end ] }}\n ```\n For example, you can provide 'hello' list based on a greeting array,\n ```javascript\n @Component({\n   selector: 'list-pipe',\n   template: `<ul>\n     <li *ngFor=\"let i of greeting | slice:0:5\">{{i}}<\/li>\n   <\/ul>`\n })\n export class PipeListComponent {\n   greeting: string[] = ['h', 'e', 'l', 'l', 'o', 'm','o', 'r', 'n', 'i', 'n', 'g'];\n }\n ```"},{"question":"What is index property in ngFor directive?","answer":"The index property of the NgFor directive is used to return the zero-based index of the item in each iteration. You can capture the index in a template input variable and use it in the template.\nFor example, you can capture the index in a variable named indexVar and displays it with the todo's name using ngFor directive as below.\n javascript\n <div *ngFor=\"let todo of todos; let i=index\">{{i + 1}} - {{todo.name}}<\/div>"},{"question":"What is the purpose of ngFor trackBy?","answer":"The main purpose of using *ngFor with trackBy option is performance optimization. Normally if you use NgFor with large data sets, a small change to one item by removing or adding an item, can trigger a cascade of DOM manipulations. In this case, Angular sees only a fresh list of new object references and to replace the old DOM elements with all new DOM elements. You can help Angular to track which items added or removed by providing a `trackBy` function which takes the index and the current item as arguments and needs to return the unique identifier for this item.\nFor example, lets set trackBy to the trackByTodos() method\n javascript\n <div *ngFor=\"let todo of todos; trackBy: trackByTodos\">\n   ({{todo.id}}) {{todo.name}}\n <\/div>\n and define the trackByTodos method,\n javascript\n trackByTodos(index: number, item: Todo): number { return todo.id; }"},{"question":"What is the purpose of ngSwitch directive?","answer":"**NgSwitch** directive is similar to JavaScript switch statement which displays one element from among several possible elements, based on a switch condition. In this case only the selected element placed into the DOM. It has been used along with `NgSwitch`, `NgSwitchCase` and `NgSwitchDefault` directives.\nFor example, let's display the browser details based on selected browser using ngSwitch directive.\n javascript\n <div [ngSwitch]=\"currentBrowser.name\">\n   <chrome-browser    *ngSwitchCase=\"'chrome'\"    [item]=\"currentBrowser\"><\/chrome-browser>\n   <firefox-browser   *ngSwitchCase=\"'firefox'\"     [item]=\"currentBrowser\"><\/firefox-browser>\n   <opera-browser     *ngSwitchCase=\"'opera'\"  [item]=\"currentBrowser\"><\/opera-browser>\n   <safari-browser     *ngSwitchCase=\"'safari'\"   [item]=\"currentBrowser\"><\/safari-browser>\n   <ie-browser  *ngSwitchDefault           [item]=\"currentItem\"><\/ie-browser>\n <\/div>"},{"question":"Is it possible to do aliasing for inputs and outputs?","answer":"Yes, it is possible to do aliasing for inputs and outputs in two ways.\n\nAliasing in metadata: The inputs and outputs in the metadata aliased using a colon-delimited (:) string with the directive property name on the left and the public alias on the right. i.e. It will be in the format of propertyName:alias.\n     javascript\n     inputs: ['input1: buyItem'],\n     outputs: ['outputEvent1: completedEvent']\nAliasing with @Input()\/@Output() decorator: The alias can be specified for the property name by passing the alias name to the @Input()\/@Output() decorator.i.e. It will be in the form of @Input(alias) or @Output(alias).\n     javascript\n     @Input('buyItem') input1: string;\n     @Output('completedEvent') outputEvent1 = new EventEmitter<string>();"},{"question":"What is safe navigation operator?","answer":"The safe navigation operator(?)(or known as Elvis Operator) is used to guard against `null` and `undefined` values in property paths when you are not aware whether a path exists or not. i.e. It returns value of the object path if it exists, else it returns the null value.\nFor example, you can access nested properties of a user profile easily without null reference errors as below,\n javascript\n <p>The user firstName is: {{user?.fullName.firstName}}<\/p>\n Using this safe navigation operator, Angular framework stops evaluating the expression when it hits the first null value and renders the view without any errors."},{"question":"Is any special configuration required for Angular9?","answer":"You don't need any special configuration. In Angular9, the Ivy renderer is the default Angular compiler. Even though Ivy is available Angular8 itself, you had to configure it in tsconfig.json file as below,\n ```javascript\n \"angularCompilerOptions\": {    \"enableIvy\": true  }\n ```"},{"question":"What are type safe TestBed API changes in Angular9?","answer":"Angular 9 provides type safe changes in TestBed API changes by replacing the old get function with the new inject method. Because TestBed.get method is not type-safe. The usage would be as below,\n ```javascript\n TestBed.get(ChangeDetectorRef) \/\/ returns any. It is deprecated now.\nTestBed.inject(ChangeDetectorRef) \/\/ returns ChangeDetectorRef\n ```"},{"question":"Is mandatory to pass static flag for ViewChild?","answer":"In Angular 8, the static flag is required for ViewChild. Whereas in Angular9, you no longer need to pass this property. Once you updated to Angular9 using `ng update`, the migration will remove { static: false } script everywhere.\n ```javascript\n @ViewChild(ChildDirective) child: ChildDirective; \/\/ Angular9 usage\n @ViewChild(ChildDirective, { static: false }) child: ChildDirective; \/\/Angular8 usage\n ```"},{"question":"What are the list of template expression operators?","answer":"The Angular template expression language supports three special template expression operators.\n\nPipe operator\nSafe navigation operator\nNon-null assertion operator"},{"question":"What is the precedence between pipe and ternary operators?","answer":"The pipe operator has a higher precedence than the ternary operator (?:). For example, the expression `first ? second : third | fourth` is parsed as `first ? second : (third | fourth)`."},{"question":"What is an entry component?","answer":"An entry component is any component that Angular loads imperatively(i.e, not referencing it in the template) by type. Due to this behavior, they can\u2019t be found by the Angular compiler during compilation. These components created dynamically with `ComponentFactoryResolver`.\nBasically, there are two main kinds of entry components which are following -\n 1. The bootstrapped root component\n 2. A component you specify in a route"},{"question":"What is a bootstrapped component?","answer":"A bootstrapped component is an entry component that Angular loads into the DOM during the bootstrap process or application launch time. Generally, this bootstrapped or root component is named as `AppComponent` in your root module using `bootstrap` property as below.\n ```js\n @NgModule({\n   declarations: [\n     AppComponent\n   ],\n   imports: [\n     BrowserModule,\n     FormsModule,\n     HttpClientModule,\n     AppRoutingModule\n   ],\n   providers: [],\n   bootstrap: [AppComponent] \/\/ bootstrapped entry component need to be declared here\n })\n ```"},{"question":"How do you manually bootstrap an application?","answer":"You can use `ngDoBootstrap` hook for a manual bootstrapping of the application instead of using bootstrap array in `@NgModule` annotation. This hook is part of `DoBootstap` interface.\n ```js\n interface DoBootstrap {\n   ngDoBootstrap(appRef: ApplicationRef): void\n }\n ```\n The module needs to be implement the above interface to use the hook for bootstrapping.\n ```js\n class AppModule implements DoBootstrap {\n   ngDoBootstrap(appRef: ApplicationRef) {\n     appRef.bootstrap(AppComponent); \/\/ bootstrapped entry component need to be passed\n   }\n }\n ```"},{"question":"Is it necessary for bootstrapped component to be entry component?","answer":"Yes, the bootstrapped component needs to be an entry component. This is because the bootstrapping process is an imperative process."},{"question":"What is a routed entry component?","answer":"The components referenced in router configuration are called as routed entry components. This routed entry component defined in a route definition as below,\n ```js\n const routes: Routes = [\n   {\n     path: '',\n     component: TodoListComponent \/\/ router entry component\n   }\n ];\n ```\n Since router definition requires you to add the component in two places (router and entryComponents), these components are always entry components.\nNote: The compilers are smart enough to recognize a router definition and automatically add the router component into entryComponents."},{"question":"Why is not necessary to use entryComponents array every time?","answer":"Most of the time, you don't need to explicity to set entry components in entryComponents array of ngModule decorator. Because angular adds components from both @NgModule.bootstrap and route definitions to entry components automatically."},{"question":"Do I still need to use entryComponents array in Angular9?","answer":"No. In previous angular releases, the entryComponents array of ngModule decorator is used to tell the compiler which components would be created and inserted dynamically in the view. In Angular9, this is not required anymore with Ivy."},{"question":"Is it all components generated in production build?","answer":"No, only the entry components and template components appears in production builds. If a component isn't an entry component and isn't found in a template, the tree shaker will throw it away. Due to this reason, make sure to add only true entry components to reduce the bundle size."},{"question":"What is Angular compiler?","answer":"The Angular compiler is used to convert the application code into JavaScript code. It reads the template markup, combines it with the corresponding component class code, and emits component factories which creates JavaScript representation of the component along with elements of @Component metadata."},{"question":"What is the role of ngModule metadata in compilation process?","answer":"The `@NgModule` metadata is used to tell the Angular compiler what components to be compiled for this module and how to link this module with other modules."},{"question":"How does angular finds components, directives and pipes?","answer":"The Angular compiler finds a component or directive in a template when it can match the selector of that component or directive in that template. Whereas it finds a pipe if the pipe's name appears within the pipe syntax of the template HTML."},{"question":"Give few examples for NgModules?","answer":"The Angular core libraries and third-party libraries are available as NgModules.\n\nAngular libraries such as FormsModule, HttpClientModule, and RouterModule are NgModules.\nMany third-party libraries such as Material Design, Ionic, and AngularFire2 are NgModules."},{"question":"What are feature modules?","answer":"Feature modules are NgModules, which are used for the purpose of organizing code. The feature module can be created with Angular CLI using the below command in the root directory,\n ```javascript\n ng generate module MyCustomFeature \/\/\n ```\n Angular CLI creates a folder called `my-custom-feature` with a file inside called `my-custom-feature.module.ts` with the following contents\n ```javascript\n import { NgModule } from '@angular\/core';\n import { CommonModule } from '@angular\/common';\n@NgModule({\n   imports: [\n     CommonModule\n   ],\n   declarations: []\n })\n export class MyCustomFeature { }\n ```Note:  The \"Module\" suffix shouldn't present in the name because the CLI appends it."},{"question":"What are the imported modules in CLI generated feature modules?","answer":"In the CLI generated feature module, there are two JavaScript import statements at the top of the file\n\nNgModule: InOrder to use the @NgModule decorator\nCommonModule: It provides many common directives such as ngIf and ngFor."},{"question":"What are the differences between ngmodule and javascript module?","answer":"Below are the main differences between Angular NgModule and javascript module,\n| NgModule | JavaScript module |\n |---- | --------- |\n | NgModule bounds declarable classes only | There is no restriction classes |\n | List the module's classes in declarations array only | Can define all member classes in one giant file |\n | It only export the declarable classes it owns or imports from other modules| It can export any classes |\n | Extend the entire application with services by adding providers to provides array | Can't extend the application with services |"},{"question":"What are the possible errors with declarations?","answer":"There are two common possible errors with declarations array,\n\nIf you use a component without declaring it, Angular returns an error message.\nIf you try to declare the same class in more than one module then compiler emits an error."},{"question":"What are the steps to use declaration elements?","answer":"Below are the steps to be followed to use declaration elements.\n\nCreate the element(component, directive and pipes) and export it from the file where you wrote it\nImport it into the appropriate module.\nDeclare it in the @NgModule declarations array."},{"question":"What happens if browserModule used in feature module?","answer":"If you do import `BrowserModule` into a lazy loaded feature module, Angular returns an error telling you to use `CommonModule` instead. Because BrowserModule\u2019s providers are for the entire app so it should only be in the root module, not in feature module. Whereas Feature modules only need the common directives in CommonModule."},{"question":"What are the types of feature modules?","answer":"Below are the five categories of feature modules,\n\nDomain: Deliver a user experience dedicated to a particular application domain(For example, place an order, registration etc)\nRouted: These are domain feature modules whose top components are the targets of router navigation routes.\nRouting: It provides routing configuration for another module.\nService: It provides utility services such as data access and messaging(For example, HttpClientModule)\nWidget: It makes components, directives, and pipes available to external modules(For example, third-party libraries such as Material UI)"},{"question":"What is a provider?","answer":"A provider is an instruction to the Dependency Injection system on how to obtain a value for a dependency(aka services created). The service can be provided using Angular CLI as below,\n ```javascript\n ng generate service my-service\n ```\n The created service by CLI would be as below,\n ```js\n import { Injectable } from '@angular\/core';\n@Injectable({\n   providedIn: 'root', \/\/Angular provide the service in root injector\n })\n export class MyService {\n }\n ```"},{"question":"What is the recommendation for provider scope?","answer":"You should always provide your service in the root injector unless there is a case where you want the service to be available only if you import a particular @NgModule."},{"question":"How do you restrict provider scope to a module?","answer":"It is possible to restrict service provider scope to a specific module instead making available to entire application. There are two possible ways to do it.\n\n\nUsing providedIn in service:\n     ```js\n     import { Injectable } from '@angular\/core';\n     import { SomeModule } from '.\/some.module';\n@Injectable({\n   providedIn: SomeModule,\n })\n export class SomeService {\n }\n 2. **Declare provider for the service in module:**js\n import { NgModule } from '@angular\/core';\nimport { SomeService } from '.\/some.service';\n@NgModule({\n   providers: [SomeService],\n })\n export class SomeModule {\n }\n ```"},{"question":"How do you provide a singleton service?","answer":"There are two possible ways to provide a singleton service.\n\n\nSet the providedIn property of the @Injectable() to \"root\". This is the preferred way(starting from Angular 6.0) of creating a singleton service since it makes your services tree-shakable.\n```js\n import { Injectable } from '@angular\/core';\n@Injectable({\n   providedIn: 'root',\n })\n export class MyService {\n }\n ```\n     2. Include the service in root module or in a module that is only imported by root module. It has been used to register services before Angular 6.0.\njs\n @NgModule({\n   ...\n   providers: [MyService],\n   ...\n })"},{"question":"What are the different ways to remove duplicate service registration?","answer":"If a module defines provides and declarations then loading the module in multiple feature modules will duplicate the registration of the service. Below are the different ways to prevent this duplicate behavior.\n\nUse the providedIn syntax instead of registering the service in the module.\nSeparate your services into their own module.\nDefine forRoot() and forChild() methods in the module."},{"question":"How does forRoot method helpful to avoid duplicate router instances?","answer":"If the `RouterModule` module didn\u2019t have forRoot() static method then each feature module would instantiate a new Router instance, which leads to broken application due to duplicate instances. After using forRoot() method, the root application module imports `RouterModule.forRoot(...)` and gets a Router, and all feature modules import `RouterModule.forChild(...)` which does not instantiate another Router."},{"question":"What is a shared module?","answer":"The Shared Module is the module in which you put commonly used directives, pipes, and components into one module that is shared(import it) throughout the application.\nFor example, the below shared module imports CommonModule, FormsModule for common directives and components, pipes and directives based on the need,\n ```js\n import { CommonModule } from '@angular\/common';\n import { NgModule } from '@angular\/core';\n import { FormsModule } from '@angular\/forms';\n import { UserComponent } from '.\/user.component';\n import { NewUserDirective } from '.\/new-user.directive';\n import { OrdersPipe } from '.\/orders.pipe';@NgModule({\n  imports:      [ CommonModule ],\n  declarations: [ UserComponent, NewUserDirective, OrdersPipe ],\n  exports:      [ UserComponent, NewUserDirective, OrdersPipe,\n                  CommonModule, FormsModule ]\n })\n export class SharedModule { }\n ```"},{"question":"Can I share services using modules?","answer":"No, it is not recommended to share services by importing module. i.e Import modules when you want to use directives, pipes, and components only. The best approach to get a hold of shared services is through 'Angular dependency injection' because importing a module will result in a new service instance."},{"question":"How do you get current direction for locales?","answer":"In Angular 9.1, the API method `getLocaleDirection` can be used to get the current direction in your app. This method is useful to support Right to Left locales for your Internationalization based applications.\n ```js\n import { getLocaleDirection, registerLocaleData } from '@angular\/common';\n import { LOCALE_ID } from '@angular\/core';\n import localeAr from '@angular\/common\/locales\/ar';\n...constructor(@Inject(LOCALE_ID) locale) { const directionForLocale = getLocaleDirection(locale); \/\/ Returns 'rtl' or 'ltr' based on the current locale\n registerLocaleData(localeAr, 'ar-ae');\n const direction = getLocaleDirection('ar-ae'); \/\/ Returns 'rtl'\n\n \/\/ Current direction is used to provide conditional logic here\n}\n ```"},{"question":"What is ngcc?","answer":"The ngcc(Angular Compatibility Compiler) is a tool which upgrades node_module compiled with non-ivy ngc into ivy compliant format. The `postinstall` script from package.json will make sure your node_modules will be compatible with the Ivy renderer.\n ```js\n \"scripts\": {\n    \"postinstall\": \"ngcc\"\n }\n ```\nWhereas, Ivy compiler (ngtsc), which compiles Ivy-compatible code."},{"question":"What classes should not be added to declarations?","answer":"The below class types shouldn't be added to declarations\n\nA class which is already declared in any another module.\nDirectives imported from another module.\nModule classes.\nService classes.\nNon-Angular classes and objects, such as strings, numbers, functions, entity models, configurations, business logic, and helper classes."},{"question":"What is NgZone?","answer":"Angular provides a service called NgZone which creates a zone named `angular` to automatically trigger change detection when the following conditions are satisfied.\n\nWhen a sync or async function is executed.\nWhen there is no microTask scheduled."},{"question":"What is NoopZone?","answer":"Zone is loaded\/required by default in Angular applications and it helps Angular to know when to trigger the change detection. This way, it make sures developers focus on application development rather core part of Angular. You can also use Angular without Zone but the change detection need to be implemented on your own and `noop zone` need to be configured in bootstrap process.\n Let's follow the below two steps to remove zone.js,\n\nRemove the zone.js import from polyfills.ts.\n     ```js\n     \/***************\nZone JS is required by default for Angular itself.\n  *\/\n \/\/ import 'zone.js\/dist\/zone';  \/\/ Included with Angular CLI.\n ```\n\n\nBootstrap Angular with noop zone in src\/main.ts.\n     js\n     platformBrowserDynamic().bootstrapModule(AppModule, {ngZone: 'noop'})\n       .catch(err => console.error(err));"},{"question":"How do you create displayBlock components?","answer":"By default, Angular CLI creates components in an inline displayed mode(i.e, display:inline). But it is possible to create components with display: block style using `displayBlock` option,\n ```js\n ng generate component my-component --displayBlock\n ```\n (OR) the option can be turned on by default in Angular.json with `schematics.@schematics\/angular:component.displayBlock` key value as true."},{"question":"What are the possible data update scenarios for change detection?","answer":"The change detection works in the following scenarios where the data changes needs to update the application HTML.\n\nComponent initialization: While bootstrapping the Angular application, Angular triggers the ApplicationRef.tick() to call change detection and View Rendering.\n\nEvent listener:  The DOM event listener can update the data in an Angular component and trigger the change detection too.\n     ``js\n     @Component({\n       selector: 'app-event-listener',\n       template:\nClick\n         {{message}}`\n     })\n     export class EventListenerComponent {\n       message = '';\nonClick() {\n     this.message = 'data updated';\n   }\n }\n 3. **HTTP Data Request:** You can get data from a server through an HTTP requestjs\n data = 'default value';\n constructor(private httpClient: HttpClient) {}\nngOnInit() {\n     this.httpClient.get(this.serverUrl).subscribe(response => {\n       this.data = response.data; \/\/ change detection will happen automatically\n     });\n   }\n 4. **Macro tasks setTimeout() or setInterval():** You can update the data in the callback function of setTimeout or setIntervaljs\n data = 'default value';\nngOnInit() {\n     setTimeout(() => {\n       this.data = 'data updated'; \/\/ Change detection will happen automatically\n     });\n   }\n 5. **Micro tasks Promises:** You can update the data in the callback function of promisejs\n data = 'initial value';\nngOnInit() {\n     Promise.resolve(1).then(v => {\n       this.data = v; \/\/ Change detection will happen automatically\n     });\n   }\n ```\n     6. Async operations like Web sockets and Canvas: The data can be updated asynchronously using WebSocket.onmessage() and Canvas.toBlob()."},{"question":"What is a zone context?","answer":"Execution Context is an abstract concept that holds information about the environment within the current code being executed. A zone provides an execution context that persists across asynchronous operations is called as zone context. For example, the zone context will be same in both outside and inside setTimeout callback function,\n  ```js\n  zone.run(() => {\n    \/\/ outside zone\n    expect(zoneThis).toBe(zone);\n    setTimeout(function() {\n      \/\/ the same outside zone exist here\n      expect(zoneThis).toBe(zone);\n    });\n  });\n  ```\n  The current zone is retrieved through `Zone.current`."},{"question":"What are the lifecycle hooks of a zone?","answer":"There are four lifecycle hooks for asynchronous operations from zone.js.\n\nonScheduleTask: This hook triggers when a new asynchronous task is scheduled. For example, when you call setTimeout()\n     js\n     onScheduleTask: function(delegate, curr, target, task) {\n         console.log('new task is scheduled:', task.type, task.source);\n         return delegate.scheduleTask(target, task);\n       }\nonInvokeTask: This hook triggers when an asynchronous task is about to execute. For example, when the callback of setTimeout() is about to execute.\n     js\n     onInvokeTask: function(delegate, curr, target, task, applyThis, applyArgs) {\n         console.log('task will be invoked:', task.type, task.source);\n         return delegate.invokeTask(target, task, applyThis, applyArgs);\n       }\nonHasTask: This hook triggers when the status of one kind of task inside a zone changes from stable(no tasks in the zone) to unstable(a new task is scheduled in the zone) or from unstable to stable.\n     js\n       onHasTask: function(delegate, curr, target, hasTaskState) {\n         console.log('task state changed in the zone:', hasTaskState);\n         return delegate.hasTask(target, hasTaskState);\n       }\nonInvoke: This hook triggers when a synchronous function is going to execute in the zone.\n     js\n     onInvoke: function(delegate, curr, target, callback, applyThis, applyArgs) {\n         console.log('the callback will be invoked:', callback);\n         return delegate.invoke(target, callback, applyThis, applyArgs);\n       }"},{"question":"What are the methods of NgZone used to control change detection?","answer":"NgZone service provides a `run()` method that allows you to execute a function inside the angular zone. This function is used to execute third party APIs which are not handled by Zone and trigger change detection automatically at the correct time.\n ```js\n export class AppComponent implements OnInit {\n   constructor(private ngZone: NgZone) {}\n   ngOnInit() {\n     \/\/ use ngZone.run() to make the asynchronous operation in the angular zone\n     this.ngZone.run(() => {\n       someNewAsyncAPI(() => {\n         \/\/ update the data of the component\n       });\n     });\n   }\n }\n ```\n Whereas `runOutsideAngular()` method is used when you don't want to trigger change detection.\n ```js\n export class AppComponent implements OnInit {\n   constructor(private ngZone: NgZone) {}\n   ngOnInit() {\n     \/\/ Use this method when you know no data will be updated\n     this.ngZone.runOutsideAngular(() => {\n       setTimeout(() => {\n         \/\/ update component data and don't trigger change detection\n       });\n     });\n   }\n }\n ```"},{"question":"How do you change the settings of zonejs?","answer":"You can change the settings of zone by configuring them in a separate file and import it just after zonejs import.\n For example, you can disable the requestAnimationFrame() monkey patch to prevent change detection for no data update as one setting and prevent DOM events(a mousemove or scroll event) to trigger change detection. Let's say the new file named zone-flags.js,\n ```js\n \/\/ disable patching requestAnimationFrame\n (window as any).__Zone_disable_requestAnimationFrame = true;\n\/\/ disable patching specified eventNames\n (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove'];\n The above configuration file can be imported in a polyfill.ts file as below,js\n \/**************\n  * Zone JS is required by default for Angular.\n  \/\n import .\/zone-flags;\n import 'zone.js\/dist\/zone';  \/\/ Included with Angular CLI.\n ```"},{"question":"How do you trigger an animation?","answer":"Angular provides a `trigger()` function for animation in order to collect the states and transitions with a specific animation name, so that you can attach it to the triggering element in the HTML template. This function watch for changes and trigger initiates the actions when a change occurs.\n For example, let's create trigger named `upDown`, and attach it to the button element.\n ```js\n content_copy\n @Component({\n   selector: 'app-up-down',\n   animations: [\n     trigger('upDown', [\n       state('up', style({\n         height: '200px',\n         opacity: 1,\n         backgroundColor: 'yellow'\n       })),\n       state('down', style({\n         height: '100px',\n         opacity: 0.5,\n         backgroundColor: 'green'\n       })),\n       transition('up => down', [\n         animate('1s')\n       ]),\n       transition('down => up', [\n         animate('0.5s')\n       ]),\n     ]),\n   ],\n   templateUrl: 'up-down.component.html',\n   styleUrls: ['up-down.component.css']\n })\n export class UpDownComponent {\n   isUp = true;\ntoggle() {\n     this.isUp = !this.isUp;\n   }```"},{"question":"How do you configure injectors with providers at different levels?","answer":"You can configure injectors with providers at different levels of your application by setting a metadata value. The configuration can happen in one of three places,\n\nIn the @Injectable() decorator for the service itself\nIn the @NgModule() decorator for an NgModule\nIn the @Component() decorator for a component"},{"question":"Is it mandatory to use injectable on every service class?","answer":"No. The `@Injectable()` decorator is not strictly required if the class has other Angular decorators on it or does not have any dependencies. But the important thing here is any class that is going to be injected with Angular is decorated.\n i.e, If we add the decorator, the metadata `design:paramtypes` is added, and the dependency injection can do it's job. That is the exact reason to add the @Injectable() decorator on a service if this service has some dependencies itself.\n For example, Let's see the different variations of AppService in a root component,\n\nThe below AppService can be injected in AppComponent without any problems. This is because there are no dependency services inside AppService.\n     js\n     export class AppService {\n       constructor() {\n         console.log('A new app service');\n       }\n     }\n\nThe below AppService with dummy decorator and httpService can be injected in AppComponent without any problems. This is because meta information is generated with dummy decorator.\n     ```js\n     function SomeDummyDecorator() {\n       return (constructor: Function) => console.log(constructor);\n     }\n@SomeDummyDecorator()\n export class AppService {\n   constructor(http: HttpService) {\n     console.log(http);\n   }\n }\n and the generated javascript code of above service has meta information about HttpService,js\n var AppService = (function () {\n     function AppService(http) {\n         console.log(http);\n     }\n     AppService = __decorate([\n         core_1.Injectable(),\n         __metadata('design:paramtypes', [http_service_1.HttpService])\n     ], AppService);\n     return AppService;\n }());\n exports.AppService = AppService;\n 3. The below AppService with @injectable decorator and httpService can be injected in AppComponent without any problems. This is because meta information is generated with Injectable decorator.js\n @Injectable({\n   providedIn: 'root',\n })\n export class AppService {\n   constructor(http: HttpService) {\n     console.log(http);\n   }\n }\n ```"},{"question":"What is an optional dependency?","answer":"The optional dependency is a parameter decorator to be used on constructor parameters, which marks the parameter as being an optional dependency. Due to this, the DI framework provides null if the dependency is not found.\n For example, If you don't register a logger provider anywhere, the injector sets the value of logger(or logger service) to null in the below class.\n ```js\n import { Optional } from '@angular\/core';\nconstructor(@Optional() private logger?: Logger) {\n   if (this.logger) {\n     this.logger.log('This is an optional dependency message');\n   } else {\n     console.log('The logger is not registered');\n   }\n }\n ```"},{"question":"What are the types of injector hierarchies?","answer":"There are two types of injector hierarchies in Angular\n\nModuleInjector hierarchy: It configure on a module level using an @NgModule() or @Injectable() annotation.\nElementInjector hierarchy: It created implicitly at each DOM element. Also it is empty by default unless you configure it in the providers property on @Directive() or @Component()."},{"question":"What are reactive forms?","answer":"Reactive forms is a model-driven approach for creating forms in a reactive style(form inputs changes over time). These are built around observable streams, where form inputs and values are provided as streams of input values. Let's follow the below steps to create reactive forms,\n\n\nRegister the reactive forms module which declares reactive-form directives in your app\n     ```js\n     import { ReactiveFormsModule } from '@angular\/forms';\n@NgModule({\n   imports: [\n     \/\/ other imports ...\n     ReactiveFormsModule\n   ],\n })\n export class AppModule { }\n 2. Create a new FormControl instance and save it in the component.js\n import { Component } from '@angular\/core';\n import { FormControl } from '@angular\/forms';\n@Component({\n   selector: 'user-profile',\n   styleUrls: ['.\/user-profile.component.css']\n })\n export class UserProfileComponent {\n   userName = new FormControl('');\n }\n 3. Register the FormControl in the template.js\n \n   User name:\n   \n\nFinally, the component with reactive form control appears as below,js\n     import { Component } from '@angular\/core';\n     import { FormControl } from '@angular\/forms';\n\n@Component({\n   selector: 'user-profile',\n   styleUrls: ['.\/user-profile.component.css'],\n   template: <label>\n       User name:\n       <input type=\"text\" [formControl]=\"userName\">\n     <\/label>\n })\n export class UserProfileComponent {\n   userName = new FormControl('');\n }\n ```"},{"question":"What are dynamic forms?","answer":"Dynamic forms is a pattern in which we build a form dynamically based on metadata that describes a business object model. You can create them based on reactive form API."},{"question":"What are template driven forms?","answer":"Template driven forms are model-driven forms where you write the logic, validations, controls etc, in the template part of the code using directives. They are suitable for simple scenarios and uses two-way binding with [(ngModel)] syntax.\n For example, you can create register form easily by following the below simple steps,\n\nImport the FormsModule into the Application module's imports array\n     js\n        import { BrowserModule } from '@angular\/platform-browser';\n        import { NgModule } from '@angular\/core';\n        import {FormsModule} from '@angular\/forms'\n        import { RegisterComponent } from '.\/app.component';\n        @NgModule({\n          declarations: [\n            RegisterComponent,\n          ],\n          imports: [\n            BrowserModule,\n            FormsModule\n          ],\n          providers: [],\n          bootstrap: [RegisterComponent]\n        })\n        export class AppModule { }\nBind the form from template to the component using ngModel syntax\n     html\n     <input type=\"text\" class=\"form-control\" id=\"name\"\n       required\n       [(ngModel)]=\"model.name\" name=\"name\">\nAttach NgForm directive to the  tag in order to create FormControl instances and register them\n     js\n     <form #registerForm=\"ngForm\">\nApply the validation message for form controls\n     html\n     <label for=\"name\">Name<\/label>\n     <input type=\"text\" class=\"form-control\" id=\"name\"\n            required\n            [(ngModel)]=\"model.name\" name=\"name\"\n            #name=\"ngModel\">\n     <div [hidden]=\"name.valid || name.pristine\"\n          class=\"alert alert-danger\">\n       Please enter your name\n     <\/div>\nLet's submit the form with ngSubmit directive and add type=\"submit\" button at the bottom of the form to trigger form submit.\n     html\n     <form (ngSubmit)=\"onSubmit()\" #heroForm=\"ngForm\">\n     \/\/ Form goes here\n     <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"!registerForm.form.valid\">Submit<\/button>\n Finally, the completed template-driven registration form will be appeared as follow.\n html\n <div class=\"container\">\n   <h1>Registration Form<\/h1>\n   <form (ngSubmit)=\"onSubmit()\" #registerForm=\"ngForm\">\n     <div class=\"form-group\">\n       <label for=\"name\">Name<\/label>\n         <input type=\"text\" class=\"form-control\" id=\"name\"\n                required\n                [(ngModel)]=\"model.name\" name=\"name\"\n                #name=\"ngModel\">\n         <div [hidden]=\"name.valid || name.pristine\"\n              class=\"alert alert-danger\">\n           Please enter your name\n         <\/div>\n     <\/div>\n     <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"!registerForm.form.valid\">Submit<\/button>\n     <\/form>\n <\/div>"},{"question":"What are the differences between reactive forms and template driven forms?","answer":"Below are the main differences between reactive forms and template driven forms\n| Feature | Reactive | Template-Driven |\n |---- |---- | --------- |\n | Form model setup | Created(FormControl instance) in component explicitly | Created by directives  |\n | Data updates | Synchronous | Asynchronous |\n | Form custom validation | Defined as Functions | Defined as Directives |\n | Testing | No interaction with change detection cycle | Need knowledge of the change detection process |\n | Mutability | Immutable(by always returning new value for FormControl instance) | Mutable(Property always modified to new value) |\n | Scalability | More scalable using low-level APIs | Less scalable using due to abstraction on APIs|"},{"question":"What are the different ways to group form controls?","answer":"Reactive forms provide two ways of grouping multiple related controls.\n\n\nFormGroup: It defines a form with a fixed set of controls those can be managed together in an one object. It has same properties and methods similar to a FormControl instance.\n    This FormGroup can be nested to create complex forms as below.\n    ```js\n    import { Component } from '@angular\/core';\n    import { FormGroup, FormControl } from '@angular\/forms';\n@Component({\n  selector: 'user-profile',\n  templateUrl: '.\/user-profile.component.html',\n  styleUrls: ['.\/user-profile.component.css']\n})\nexport class UserProfileComponent {\n  userProfile = new FormGroup({\n    firstName: new FormControl(''),\n    lastName: new FormControl(''),\n    address: new FormGroup({\n          street: new FormControl(''),\n          city: new FormControl(''),\n          state: new FormControl(''),\n          zip: new FormControl('')\n        })\n  });\nonSubmit() {\n    \/\/ Store this.userProfile.value in DB\n  }\n}\nhtml\n\n\n    First Name:\n    \n\n\n    Last Name:\n    \n\n\nAddress\n<label>\n  Street:\n  <input type=\"text\" formControlName=\"street\">\n<\/label>\n\n<label>\n  City:\n  <input type=\"text\" formControlName=\"city\">\n<\/label>\n\n<label>\n  State:\n  <input type=\"text\" formControlName=\"state\">\n<\/label>\n\n<label>\n  Zip Code:\n  <input type=\"text\" formControlName=\"zip\">\n<\/label>\n\n\nSubmit\n\n2. **FormArray:** It defines a dynamic form in an array format, where you can add and remove controls at run time. This is useful for dynamic forms when you don\u2019t know how many controls will be present within the group.js\n    import { Component } from '@angular\/core';\n    import { FormArray, FormControl } from '@angular\/forms';\n@Component({\n  selector: 'order-form',\n  templateUrl: '.\/order-form.component.html',\n  styleUrls: ['.\/order-form.component.css']\n})\nexport class OrderFormComponent {\n  constructor () {\n    this.orderForm = new FormGroup({\n      firstName: new FormControl('John', Validators.minLength(3)),\n      lastName: new FormControl('Rodson'),\n      items: new FormArray([\n        new FormControl(null)\n      ])\n    });\n  }\n\n  onSubmitForm () {\n    \/\/ Save the items this.orderForm.value in DB\n  }\n\n  onAddItem () {\n    this.orderForm.controls\n    .items.push(new FormControl(null));\n  }\n\n  onRemoveItem (index) {\n    this.orderForm.controls['items'].removeAt(index);\n  }\n}\n\nhtml\n   \n <label>\n   First Name:\n   <input type=\"text\" formControlName=\"firstName\">\n <\/label>\n\n <label>\n   Last Name:\n   <input type=\"text\" formControlName=\"lastName\">\n <\/label>\n\n <div>\n <p>Add items<\/p>\n <ul formArrayName=\"items\">\n   <li *ngFor=\"let item of orderForm.controls.items.controls; let i = index\">\n     <input type=\"text\" formControlName=\"{{i}}\">\n     <button type=\"button\" title=\"Remove Item\" (click)=\"onRemoveItem(i)\">Remove<\/button>\n   <\/li>\n <\/ul>\n <button type=\"button\" (click)=\"onAddItem\">\n   Add an item\n <\/button>\n<\/div>\n\n```"},{"question":"Address","answer":""},{"question":"How do you update specific properties of a form model?","answer":"You can use `patchValue()` method to update specific properties defined in the form model. For example,you can update the name and street of certain profile on click of the update button as shown below.\n ```js\n updateProfile() {\n   this.userProfile.patchValue({\n     firstName: 'John',\n     address: {\n       street: '98 Crescent Street'\n     }\n   });\n }\n ```\n ```html\n   <button (click)=\"updateProfile()\">Update Profile<\/button>\n ```\nYou can also use setValue method to update properties.Note: Remember to update the properties against the exact model structure."},{"question":"What is the purpose of FormBuilder?","answer":"FormBuilder is used as syntactic sugar for easily creating instances of a FormControl, FormGroup, or FormArray. This is helpful to reduce the amount of boilerplate needed to build complex reactive forms. It is available as an injectable helper class of the `@angular\/forms` package.\nFor example, the user profile component creation becomes easier as shown here.\n js\n export class UserProfileComponent {\n   profileForm = this.formBuilder.group({\n     firstName: [''],\n     lastName: [''],\n     address: this.formBuilder.group({\n       street: [''],\n       city: [''],\n       state: [''],\n       zip: ['']\n     }),\n   });\n   constructor(private formBuilder: FormBuilder) { }\n   }"},{"question":"How do you verify the model changes in forms?","answer":"You can add a getter property(let's say, diagnostic) inside component to return a JSON representation of the model during the development. This is useful to verify whether the values are really flowing from the input box to the model and vice versa or not.\n ```js\n export class UserProfileComponent {\nmodel = new User('John', 29, 'Writer');\/\/ TODO: Remove after the verification\n   get diagnostic() { return JSON.stringify(this.model); }\n }\n and add `diagnostic` binding near the top of the formhtml\n {{diagnostic}}\n \n   \/\/ FormControls goes here\n \n ```"},{"question":"What are the state CSS classes provided by ngModel?","answer":"The ngModel directive updates the form control with special Angular CSS classes to reflect it's state. Let's find the list of classes in a tabular format,\n| Form control state | If true | If false |\n |---- | --------- | --- |\n | Visited | ng-touched | ng-untouched |\n | Value has changed | ng-dirty  | ng-pristine |\n | Value is valid|  ng-valid | ng-invalid |"},{"question":"How do you reset the form?","answer":"In a model-driven form, you can reset the form just by calling the function `reset()` on our form model.\n For example, you can reset the form model on submission as follows,\n ```js\n onSubmit() {\n   if (this.myform.valid) {\n     console.log(\"Form is submitted\");\n     \/\/ Perform business logic here\n     this.myform.reset();\n   }\n }\n ```\n Now, your form model resets the form back to its original pristine state."},{"question":"What are the types of validator functions?","answer":"In reactive forms, the validators can be either synchronous or asynchronous functions,\n\nSync validators: These are the synchronous functions which take a control instance and immediately return either a set of validation errors or null. Also, these functions passed as second argument while instantiating the form control. The main use cases are simple checks like whether a field is empty, whether it exceeds a maximum length etc.\nAsync validators: These are the asynchronous functions which take a control instance and return a Promise or Observable that later emits a set of validation errors or null. Also, these functions passed as second argument while instantiating the form control. The main use cases are complex validations like hitting a server to check the availability of a username or email.\nThe representation of these validators looks like below\n js\n this.myForm = formBuilder.group({\n     firstName: ['value'],\n     lastName: ['value', *Some Sync validation function*],\n     email: ['value', *Some validation function*, *Some asynchronous validation function*]\n });"},{"question":"Can you give an example of built-in validators?","answer":"In reactive forms, you can use built-in validator like `required` and `minlength` on your input form controls. For example, the registration form can have these validators on name input field\n ```js\n this.registrationForm = new FormGroup({\n     'name': new FormControl(this.hero.name, [\n       Validators.required,\n       Validators.minLength(4),\n     ])\n   });\n ```\n Whereas in template-driven forms, both `required` and `minlength` validators available as attributes."},{"question":"How do you optimize the performance of async validators?","answer":"Since all validators run after every form value change, it creates a major impact on performance with async validators by hitting the external API on each keystroke. This situation can be avoided by delaying the form validity by changing the updateOn property from change (default) to submit or blur.\n The usage would be different based on form types,\n\nTemplate-driven forms: Set the property on ngModelOptions directive\n     html\n     <input [(ngModel)]=\"name\" [ngModelOptions]=\"{updateOn: 'blur'}\">\nReactive-forms: Set the property on FormControl instance\n     js\n     name = new FormControl('', {updateOn: 'blur'});"},{"question":"How to set ngFor and ngIf on the same element?","answer":"Sometimes you may need to both ngFor and ngIf on the same element but unfortunately you are going to encounter below template error.\n ```cmd\n  Template parse errors: Can't have multiple template bindings on one element.\n ```\n  In this case, You need to use either ng-container or ng-template.\n  Let's say if you try to loop over the items only when the items are available, the below code throws an error in the browser\n  ```html\n  <ul *ngIf=\"items\" *ngFor=\"let item of items\">\n    <li><\/li>\n  <\/ul>\n  ```\n  and it can be fixed by\n  ```html\n  <ng-container *ngIf=\"items\">\n    <ul *ngFor=\"let item of items\">\n      <li><\/li>\n    <\/ul>\n  <\/ng-container>\n  ```"},{"question":"What is host property in css?","answer":"The `:host` pseudo-class selector is used to target styles in the element that hosts the component. Since the host element is in a parent component's template, you can't reach the host element from inside the component by other means.\n For example, you can create a border for parent element as below,\n ```js\n \/\/Other styles for app.component.css\n \/\/...\n :host {\n   display: block;\n   border: 1px solid black;\n   padding: 20px;\n }\n ```"},{"question":"How do you get the current route?","answer":"In Angular, there is an `url` property of router package to get the current route. You need to follow the below few steps,\n\nImport Router from @angular\/router\n  js\n    import { Router } from '@angular\/router';\nInject router inside constructor\n  ```js\n  constructor(private router: Router ) {\n}\n  3. Access url parameterjs\n    console.log(this.router.url); \/\/  \/routename\n  ```"},{"question":"What is Component Test Harnesses?","answer":"A component harness is a testing API around an Angular directive or component to make tests simpler by hiding implementation details from test suites. This can be shared between unit tests, integration tests, and end-to-end tests. The idea for component harnesses comes from the **PageObject** pattern commonly used for integration testing."},{"question":"What is the benefit of Automatic Inlining of Fonts?","answer":"During compile time, Angular CLI will download and inline the fonts that your application is using. This performance update speed up the first contentful paint(FCP) and this feature is enabled by default in apps built with version 11."},{"question":"What is content projection?","answer":"Content projection is a pattern in which you insert, or project, the content you want to use inside another component."},{"question":"What is ng-content and its purpose?","answer":"The ng-content is used to insert the content dynamically inside the component that helps to increase component reusability."},{"question":"What is standalone component?","answer":"A standalone component is a type of component which is not part of any Angular module. It provides a simplified way to build Angular applications."},{"question":"How to create a standalone component uing CLI command?","answer":"Generate standalone component using CLI command as shown below\n  bash\n  ng generate component component-name --standalone\n  On running the command standalone component is created.\n  Here is the list of file created.\ncomponent-name.component.ts\ncomponent-name.component.css\ncomponent-name.component.spec\ncomponent-name.component.html\nNext need to update app.module.ts as shown below.```typescript\n  import { NgModule } from '@angular\/core';\n  import { BrowserModule } from '@angular\/platform-browser';\n  import { ComponentNameComponent } from '.\/component-name\/component-name.component';@NgModule({\n    imports: [\n      BrowserModule,\n      ComponentNameComponent\n    ],\n    declarations: [AppComponent],\n    bootstrap: [AppComponent],\n  })\n  export class AppModule {}\n  ```"},{"question":"How to create a standalone component manually?","answer":"To make existing component to standalone, then add `standalone: true` in `component-name.component.ts`\n  as shown below\n```typescript\n  import { CommonModule } from '@angular\/common';\n  import { Component, OnInit } from '@angular\/core';@Component({\n    standalone: true,\n    imports: [CommonModule],\n    selector: 'app-standalone-component',\n    templateUrl: '.\/standalone-component.component.html',\n    styleUrls: ['.\/standalone-component.component.css'],\n  })\n  export class ComponentNameComponent implements OnInit {\n    constructor() {}ngOnInit() {}\n}\n  ``\n  Next need to updateapp.module.ts` as shown below.```typescript\n  import { NgModule } from '@angular\/core';\n  import { BrowserModule } from '@angular\/platform-browser';\n  import { ComponentNameComponent } from '.\/component-name\/component-name.component';@NgModule({\n    imports: [\n      BrowserModule,\n      ComponentNameComponent\n    ],\n    declarations: [AppComponent],\n    bootstrap: [AppComponent],\n  })\n  export class AppModule {}\n  ```"},{"question":"What are the possible ways to create objects in JavaScript","answer":""},{"question":"What is a prototype chain","answer":""},{"question":"What is the difference between Call, Apply and Bind","answer":""},{"question":"What is JSON and its common operations","answer":""},{"question":"What is the purpose of the array slice method","answer":""},{"question":"What is the purpose of the array splice method","answer":""},{"question":"What is the difference between slice and splice","answer":""},{"question":"How do you compare Object and Map","answer":""},{"question":"What is the difference between == and === operators","answer":""},{"question":"What are lambda or arrow functions","answer":"An arrow function is a shorter syntax for a function expression and does not have its own this, arguments, super,\nor new.target. These functions are best suited for non-method functions, and they cannot be used as constructors."},{"question":"What is a first class function","answer":"In Javascript, functions are first class objects. First-class functions means when functions in that language are\ntreated like any other variable.For example, in such a language, a function can be passed as an argument to other functions, can be returned by\nanother function and can be assigned as a value to a variable. For example, in the below example, handler functions\nassigned to a listenerjavascript\nconst handler = () => console.log(\"This is a click handler function\");\ndocument.addEventListener(\"click\", handler);"},{"question":"What is a first order function","answer":"First-order function is a function that doesn\u2019t accept another function as an argument and doesn\u2019t return a function\nas its return value.javascript\nconst firstOrder = () => console.log(\"I am a first order function!\");"},{"question":"What is a higher order function","answer":"Higher-order function is a function that accepts another function as an argument or returns a function as a return\nvalue or both.javascript\nconst firstOrderFunc = () =>\n  console.log(\"Hello, I am a First order function\");\nconst higherOrder = (ReturnFirstOrderFunc) => ReturnFirstOrderFunc();\nhigherOrder(firstOrderFunc);"},{"question":"What is a unary function","answer":"Unary function (i.e. monadic) is a function that accepts exactly one argument. It stands for a single argument\naccepted by a function.Let us take an example of unary function,javascript\nconst unaryFunction = (a) => console.log(a + 10); \/\/ Add 10 to the given argument and display the value"},{"question":"What is the currying function","answer":"Currying is the process of taking a function with multiple arguments and turning it into a sequence of functions\neach with only a single argument. Currying is named after a mathematician Haskell Curry. By applying currying, a\nn-ary function turns it into a unary function.Let's take an example of n-ary function and how it turns into a currying function,```javascript\nconst multiArgFunction = (a, b, c) => a + b + c;\nconsole.log(multiArgFunction(1, 2, 3)); \/\/ 6const curryUnaryFunction = (a) => (b) => (c) => a + b + c;\ncurryUnaryFunction(1); \/\/ returns a function: b => c =>  1 + b + c\ncurryUnaryFunction(1)(2); \/\/ returns a function: c => 3 + c\ncurryUnaryFunction(1)(2)(3); \/\/ returns the number 6\n```Curried functions are great to improve code reusability and functional composition."},{"question":"What is a pure function","answer":"A Pure function is a function where the return value is only determined by its arguments without any side\neffects. i.e, If you call a function with the same arguments 'n' number of times and 'n' number of places in the\napplication then it will always return the same value.Let's take an example to see the difference between pure and impure functions,```javascript\n\/\/Impure\nlet numberArray = [];\nconst impureAddNumber = (number) => numberArray.push(number);\n\/\/Pure\nconst pureAddNumber = (number) => (argNumberArray) =>\n  argNumberArray.concat([number]);\/\/Display the results\nconsole.log(impureAddNumber(6)); \/\/ returns 1\nconsole.log(numberArray); \/\/ returns [6]\nconsole.log(pureAddNumber(7)(numberArray)); \/\/ returns [6, 7]\nconsole.log(numberArray); \/\/ returns [6]\n```As per the above code snippets, the Push function is impure itself by altering the array and returning a push\nnumber index independent of the parameter value. . Whereas Concat on the other hand takes the array and\nconcatenates it with the other array producing a whole new array without side effects. Also, the return value is a\nconcatenation of the previous array.Remember that Pure functions are important as they simplify unit testing without any side effects and no need for\ndependency injection. They also avoid tight coupling and make it harder to break your application by not having any\nside effects. These principles are coming together with Immutability concept of ES6 by giving preference to *\nconst over let* usage."},{"question":"What is the purpose of the let keyword","answer":"The let statement declares a block scope local variable. Hence the variables defined with let keyword are\nlimited in scope to the block, statement, or expression on which it is used. Whereas variables declared with\nthe var keyword used to define a variable globally, or locally to an entire function regardless of block scope.Let's take an example to demonstrate the usage,javascript\nlet counter = 30;\nif (counter === 30) {\n  let counter = 31;\n  console.log(counter); \/\/ 31\n}\nconsole.log(counter); \/\/ 30 (because the variable in if block won't exist here)"},{"question":"What is the difference between let and var","answer":"You can list out the differences in a tabular format| var                                                   | let                         |\n        | ----------------------------------------------------- | --------------------------- |\n| It is been available from the beginning of JavaScript | Introduced as part of ES6   |\n| It has function scope                                 | It has block scope          |\n| Variables will be hoisted                             | Hoisted but not initialized |Let's take an example to see the difference,javascript\nfunction userDetails(username) {\n  if (username) {\n    console.log(salary); \/\/ undefined due to hoisting\n    console.log(age); \/\/ ReferenceError: Cannot access 'age' before initialization\n    let age = 30;\n    var salary = 10000;\n  }\n  console.log(salary); \/\/10000 (accessible due to function scope)\n  console.log(age); \/\/error: age is not defined(due to block scope)\n}\nuserDetails(\"John\");"},{"question":"What is the reason to choose the name let as a keyword","answer":"let is a mathematical statement that was adopted by early programming languages like Scheme and Basic. It\nhas been borrowed from dozens of other languages that use let already as a traditional keyword as close to var\nas possible."},{"question":"How do you redeclare variables in switch block without an error","answer":"If you try to redeclare variables in a switch block then it will cause errors because there is only one block. For\nexample, the below code block throws a syntax error as below,```javascript\nlet counter = 1;\nswitch (x) {\n  case 0:\n    let name;\n    break;case 1:\n    let name; \/\/ SyntaxError for redeclaration.\n    break;\n}\n```To avoid this error, you can create a nested block inside a case clause and create a new block scoped lexical\nenvironment.javascript\nlet counter = 1;\nswitch (x) {\n  case 0: {\n    let name;\n    break;\n  }\n  case 1: {\n    let name; \/\/ No SyntaxError for redeclaration.\n    break;\n  }\n}"},{"question":"What is the Temporal Dead Zone","answer":"The Temporal Dead Zone is a behavior in JavaScript that occurs when declaring a variable with the let and const\nkeywords, but not with var. In ECMAScript 6, accessing a let or const variable before its declaration (within\nits scope) causes a ReferenceError. The time span when that happens, between the creation of a variable\u2019s binding\nand its declaration, is called the temporal dead zone.Let's see this behavior with an example,javascript\nfunction somemethod() {\n  console.log(counter1); \/\/ undefined\n  console.log(counter2); \/\/ ReferenceError\n  var counter1 = 1;\n  let counter2 = 2;\n}"},{"question":"What is IIFE(Immediately Invoked Function Expression)","answer":"IIFE (Immediately Invoked Function Expression) is a JavaScript function that runs as soon as it is defined. The\nsignature of it would be as below,javascript\n(function () {\n  \/\/ logic here\n})();The primary reason to use an IIFE is to obtain data privacy because any variables declared within the IIFE cannot be\naccessed by the outside world. i.e, If you try to access variables with IIFE then it throws an error as below,javascript\n(function () {\n  var message = \"IIFE\";\n  console.log(message);\n})();\nconsole.log(message); \/\/Error: message is not defined"},{"question":"How do you decode or encode a URL in JavaScript?","answer":"encodeURI() function is used to encode an URL. This function requires a URL string as a parameter and return that\nencoded string.\ndecodeURI() function is used to decode an URL. This function requires an encoded URL string as parameter and\nreturn that decoded string.Note: If you want to encode characters such as \/ ? : @ & = + $ # then you need to use encodeURIComponent().javascript\nlet uri = \"employeeDetails?name=john&occupation=manager\";\nlet encoded_uri = encodeURI(uri);\nlet decoded_uri = decodeURI(encoded_uri);"},{"question":"What is memoization","answer":"Memoization is a programming technique which attempts to increase a function\u2019s performance by caching its previously\ncomputed results. Each time a memoized function is called, its parameters are used to index the cache. If the data\nis present, then it can be returned, without executing the entire function. Otherwise the function is executed and\nthen the result is added to the cache.\nLet's take an example of adding function with memoization,javascript\nconst memoizAddition = () => {\n  let cache = {};\n  return (value) => {\n    if (value in cache) {\n      console.log(\"Fetching from cache\");\n      return cache[value]; \/\/ Here, cache.value cannot be used as property name starts with the number which is not a valid JavaScript  identifier. Hence, can only be accessed using the square bracket notation.\n    } else {\n      console.log(\"Calculating result\");\n      let result = value + 20;\n      cache[value] = result;\n      return result;\n    }\n  };\n};\n\/\/ returned function from memoizAddition\nconst addition = memoizAddition();\nconsole.log(addition(20)); \/\/output: 40 calculated\nconsole.log(addition(20)); \/\/output: 40 cached"},{"question":"What is Hoisting","answer":"Hoisting is a JavaScript mechanism where variables, function declarations and classes are moved to the top of their\nscope before code execution. Remember that JavaScript only hoists declarations, not initialisation.\nLet's take a simple example of variable hoisting,javascript\nconsole.log(message); \/\/output : undefined\nvar message = \"The variable Has been hoisted\";The above code looks like as below to the interpreter,javascript\nvar message;\nconsole.log(message);\nmessage = \"The variable Has been hoisted\";In the same fashion, function declarations are hoisted too```javascript\nmessage(\"Good morning\"); \/\/Good morningfunction message(name) {\n  console.log(name);\n}\n```This hoisting makes functions to be safely used in code before they are declared."},{"question":"What are classes in ES6","answer":"In ES6, Javascript classes are primarily syntactic sugar over JavaScript\u2019s existing prototype-based inheritance.\nFor example, the prototype based inheritance written in function expression as below,```javascript\nfunction Bike(model, color) {\n  this.model = model;\n  this.color = color;\n}Bike.prototype.getDetails = function () {\n  return this.model + \" bike has\" + this.color + \" color\";\n};\n```Whereas ES6 classes can be defined as an alternative```javascript\nclass Bike {\n  constructor(color, model) {\n    this.color = color;\n    this.model = model;\n  }getDetails() {\n    return this.model + \" bike has\" + this.color + \" color\";\n  }\n}\n```"},{"question":"What are closures","answer":"A closure is the combination of a function and the lexical environment within which that function was declared. i.e,\nIt is an inner function that has access to the outer or enclosing function\u2019s variables. The closure has three scope\nchains\nOwn scope where variables defined between its curly brackets\nOuter function\u2019s variables\nGlobal variables\nLet's take an example of closure concept,javascript\nfunction Welcome(name) {\n  var greetingInfo = function (message) {\n    console.log(message + \" \" + name);\n  };\n  return greetingInfo;\n}\nvar myFunction = Welcome(\"John\");\nmyFunction(\"Welcome \"); \/\/Output: Welcome John\nmyFunction(\"Hello Mr.\"); \/\/output: Hello Mr.JohnAs per the above code, the inner function(i.e, greetingInfo) has access to the variables in the outer function\nscope(i.e, Welcome) even after the outer function has returned."},{"question":"What are modules","answer":"Modules refer to small units of independent, reusable code and also act as the foundation of many JavaScript design\npatterns. Most of the JavaScript modules export an object literal, a function, or a constructor"},{"question":"Why do you need modules","answer":"Below are the list of benefits using modules in javascript ecosystem\nMaintainability\nReusability\nNamespacing"},{"question":"What is scope in javascript","answer":"Scope is the accessibility of variables, functions, and objects in some particular part of your code during runtime.\nIn other words, scope determines the visibility of variables and other resources in areas of your code."},{"question":"What is a service worker","answer":"A Service worker is basically a script (JavaScript file) that runs in the background, separate from a web page and\nprovides features that don't need a web page or user interaction. Some of the major features of service workers are\nRich offline experiences(offline first web application development), periodic background syncs, push notifications,\nintercept and handle network requests and programmatically managing a cache of responses."},{"question":"How do you manipulate DOM using a service worker","answer":"Service worker can't access the DOM directly. But it can communicate with the pages it controls by responding to\nmessages sent via the postMessage interface, and those pages can manipulate the DOM."},{"question":"How do you reuse information across service worker restarts","answer":"The problem with service worker is that it gets terminated when not in use, and restarted when it's next needed, so\nyou cannot rely on global state within a service worker's onfetch and onmessage handlers. In this case, service\nworkers will have access to IndexedDB API in order to persist and reuse across restarts."},{"question":"What is IndexedDB","answer":"IndexedDB is a low-level API for client-side storage of larger amounts of structured data, including files\/blobs.\nThis API uses indexes to enable high-performance searches of this data."},{"question":"What is web storage","answer":"Web storage is an API that provides a mechanism by which browsers can store key\/value pairs locally within the\nuser's browser, in a much more intuitive fashion than using cookies. The web storage provides two mechanisms for\nstoring data on the client.\nLocal storage: It stores data for current origin with no expiration date.\nSession storage: It stores data for one session and the data is lost when the browser tab is closed."},{"question":"What is a post message","answer":"Post message is a method that enables cross-origin communication between Window objects.(i.e, between a page and a\npop-up that it spawned, or between a page and an iframe embedded within it). Generally, scripts on different pages\nare allowed to access each other if and only if the pages follow same-origin policy(i.e, pages share the same\nprotocol, port number, and host)."},{"question":"What is a Cookie","answer":"A cookie is a piece of data that is stored on your computer to be accessed by your browser. Cookies are saved as\nkey\/value pairs.\nFor example, you can create a cookie named username as below,javascript\ndocument.cookie = \"username=John\";"},{"question":"Why do you need a Cookie","answer":"Cookies are used to remember information about the user profile(such as username). It basically involves two steps,\nWhen a user visits a web page, the user profile can be stored in a cookie.\nNext time the user visits the page, the cookie remembers the user profile."},{"question":"What are the options in a cookie","answer":"There are few below options available for a cookie,\nBy default, the cookie is deleted when the browser is closed but you can change this behavior by setting expiry\n   date (in UTC time).\njavascript\ndocument.cookie = \"username=John; expires=Sat, 8 Jun 2019 12:00:00 UTC\";\nBy default, the cookie belongs to a current page. But you can tell the browser what path the cookie belongs to\n   using a path parameter.\njavascript\ndocument.cookie = \"username=John; path=\/services\";"},{"question":"How do you delete a cookie","answer":"You can delete a cookie by setting the expiry date as a passed date. You don't need to specify a cookie value in\nthis case.\nFor example, you can delete a username cookie in the current page as below.javascript\ndocument.cookie =\n  \"username=; expires=Fri, 07 Jun 2019 00:00:00 UTC; path=\/;\";Note: You should define the cookie path option to ensure that you delete the right cookie. Some browsers doesn't\nallow to delete a cookie unless you specify a path parameter."},{"question":"What are the differences between cookie, local storage and session storage","answer":"Below are some of the differences between cookie, local storage and session storage,| Feature                           | Cookie                             | Local storage    | Session storage     |\n        | --------------------------------- | ---------------------------------- | ---------------- | ------------------- |\n| Accessed on client or server side | Both server-side & client-side     | client-side only | client-side only    |\n| Lifetime                          | As configured using Expires option | until deleted    | until tab is closed |\n| SSL support                       | Supported                          | Not supported    | Not supported       |\n| Maximum data size                 | 4KB                                | 5 MB             | 5MB                 |"},{"question":"What is the main difference between localStorage and sessionStorage","answer":"LocalStorage is the same as SessionStorage but it persists the data even when the browser is closed and reopened(i.e\nit has no expiration time) whereas in sessionStorage data gets cleared when the page session ends."},{"question":"How do you access web storage","answer":"The Window object implements the WindowLocalStorage and WindowSessionStorage objects which has localStorage(\nwindow.localStorage) and sessionStorage(window.sessionStorage) properties respectively. These properties create an\ninstance of the Storage object, through which data items can be set, retrieved and removed for a specific domain and\nstorage type (session or local).\nFor example, you can read and write on local storage objects as belowjavascript\nlocalStorage.setItem(\"logo\", document.getElementById(\"logo\").value);\nlocalStorage.getItem(\"logo\");"},{"question":"What are the methods available on session storage","answer":"The session storage provided methods for reading, writing and clearing the session data```javascript\n\/\/ Save data to sessionStorage\nsessionStorage.setItem(\"key\", \"value\");\/\/ Get saved data from sessionStorage\nlet data = sessionStorage.getItem(\"key\");\/\/ Remove saved data from sessionStorage\nsessionStorage.removeItem(\"key\");\/\/ Remove all saved data from sessionStorage\nsessionStorage.clear();\n```"},{"question":"What is a storage event and its event handler","answer":"The StorageEvent is an event that fires when a storage area has been changed in the context of another document.\nWhereas onstorage property is an EventHandler for processing storage events.\nThe syntax would be as belowjavascript\nwindow.onstorage = functionRef;Let's take the example usage of onstorage event handler which logs the storage key and it's valuesjavascript\nwindow.onstorage = function (e) {\n  console.log(\n    \"The \" +\n      e.key +\n      \" key has been changed from \" +\n      e.oldValue +\n      \" to \" +\n      e.newValue +\n      \".\"\n  );\n};"},{"question":"Why do you need web storage","answer":"Web storage is more secure, and large amounts of data can be stored locally, without affecting website performance.\nAlso, the information is never transferred to the server. Hence this is a more recommended approach than Cookies."},{"question":"How do you check web storage browser support","answer":"You need to check browser support for localStorage and sessionStorage before using web storage,javascript\nif (typeof Storage !== \"undefined\") {\n  \/\/ Code for localStorage\/sessionStorage.\n} else {\n  \/\/ Sorry! No Web Storage support..\n}"},{"question":"How do you check web workers browser support","answer":"You need to check browser support for web workers before using itjavascript\nif (typeof Worker !== \"undefined\") {\n  \/\/ code for Web worker support.\n} else {\n  \/\/ Sorry! No Web Worker support..\n}"},{"question":"Give an example of a web worker","answer":"You need to follow below steps to start using web workers for counting example\nCreate a Web Worker File: You need to write a script to increment the count value. Let's name it as counter.js\n```javascript\nlet i = 0;function timedCount() {\n  i = i + 1;\n  postMessage(i);\n  setTimeout(\"timedCount()\", 500);\n}timedCount();\n```Here postMessage() method is used to post a message back to the HTML page\nCreate a Web Worker Object: You can create a web worker object by checking for browser support. Let's name this\n   file as web_worker_example.js\njavascript\nif (typeof w == \"undefined\") {\n  w = new Worker(\"counter.js\");\n}and we can receive messages from web workerjavascript\nw.onmessage = function (event) {\n  document.getElementById(\"message\").innerHTML = event.data;\n};\nTerminate a Web Worker:\n   Web workers will continue to listen for messages (even after the external script is finished) until it is\n   terminated. You can use the terminate() method to terminate listening to the messages.\njavascript\nw.terminate();\nReuse the Web Worker: If you set the worker variable to undefined you can reuse the code\njavascript\nw = undefined;"},{"question":"What are the restrictions of web workers on DOM","answer":"WebWorkers don't have access to below javascript objects since they are defined in an external files\nWindow object\nDocument object\nParent object"},{"question":"What is a promise","answer":"A promise is an object that may produce a single value some time in the future with either a resolved value or a\nreason that it\u2019s not resolved(for example, network error). It will be in one of the 3 possible states: fulfilled,\nrejected, or pending.The syntax of Promise creation looks like below,javascript\nconst promise = new Promise(function (resolve, reject) {\n  \/\/ promise description\n});The usage of a promise would be as below,```javascript\nconst promise = new Promise(\n  (resolve) => {\n    setTimeout(() => {\n      resolve(\"I'm a Promise!\");\n    }, 5000);\n  },\n  (reject) => {}\n);promise.then((value) => console.log(value));\n```The action flow of a promise will be as below,"},{"question":"Why do you need a promise","answer":"Promises are used to handle asynchronous operations. They provide an alternative approach for callbacks by reducing\nthe callback hell and writing the cleaner code."},{"question":"What are the three states of promise","answer":"Promises have three states:\nPending: This is an initial state of the Promise before an operation begins\nFulfilled: This state indicates that the specified operation was completed.\nRejected: This state indicates that the operation did not complete. In this case an error value will be\n   thrown."},{"question":"What is a callback function","answer":"A callback function is a function passed into another function as an argument. This function is invoked inside the\nouter function to complete an action.\nLet's take a simple example of how to use callback function```javascript\nfunction callbackFunction(name) {\n  console.log(\"Hello \" + name);\n}function outerFunction(callback) {\n  let name = prompt(\"Please enter your name.\");\n  callback(name);\n}outerFunction(callbackFunction);\n```"},{"question":"Why do we need callbacks","answer":"The callbacks are needed because javascript is an event driven language. That means instead of waiting for a\nresponse javascript will keep executing while listening for other events.\nLet's take an example with the first function invoking an API call(simulated by setTimeout) and the next function\nwhich logs the message.```javascript\nfunction firstFunction() {\n  \/\/ Simulate a code delay\n  setTimeout(function () {\n    console.log(\"First function called\");\n  }, 1000);\n}\nfunction secondFunction() {\n  console.log(\"Second function called\");\n}\nfirstFunction();\nsecondFunction();Output;\n\/\/ Second function called\n\/\/ First function called\n```As observed from the output, javascript didn't wait for the response of the first function and the remaining code\nblock got executed. So callbacks are used in a way to make sure that certain code doesn\u2019t execute until the other\ncode finishes execution."},{"question":"What is a callback hell","answer":"Callback Hell is an anti-pattern with multiple nested callbacks which makes code hard to read and debug when dealing\nwith asynchronous logic. The callback hell looks like below,javascript\nasync1(function(){\n    async2(function(){\n        async3(function(){\n            async4(function(){\n                ....\n            });\n        });\n    });\n});"},{"question":"What are server-sent events","answer":"Server-sent events (SSE) is a server push technology enabling a browser to receive automatic updates from a server\nvia HTTP connection without resorting to polling. These are a one way communications channel - events flow from\nserver to client only. This has been used in Facebook\/Twitter updates, stock price updates, news feeds etc."},{"question":"How do you receive server-sent event notifications","answer":"The EventSource object is used to receive server-sent event notifications. For example, you can receive messages\nfrom server as below,javascript\nif (typeof EventSource !== \"undefined\") {\n  var source = new EventSource(\"sse_generator.js\");\n  source.onmessage = function (event) {\n    document.getElementById(\"output\").innerHTML += event.data + \"<br>\";\n  };\n}"},{"question":"How do you check browser support for server-sent events","answer":"You can perform browser support for server-sent events before using it as below,javascript\nif (typeof EventSource !== \"undefined\") {\n  \/\/ Server-sent events supported. Let's have some code here!\n} else {\n  \/\/ No server-sent events supported\n}"},{"question":"What are the events available for server sent events","answer":"Below are the list of events available for server sent events\n| Event | Description |\n|---- | ---------\n| onopen | It is used when a connection to the server is opened |\n| onmessage | This event is used when a message is received |\n| onerror | It happens when an error occurs|"},{"question":"What are the main rules of promise","answer":"A promise must follow a specific set of rules:\nA promise is an object that supplies a standard-compliant .then() method\nA pending promise may transition into either fulfilled or rejected state\nA fulfilled or rejected promise is settled and it must not transition into any other state.\nOnce a promise is settled, the value must not change."},{"question":"What is callback in callback","answer":"You can nest one callback inside in another callback to execute the actions sequentially one by one. This is known\nas callbacks in callbacks.```javascript\nloadScript(\"\/script1.js\", function (script) {\n  console.log(\"first script is loaded\");loadScript(\"\/script2.js\", function (script) {\n    console.log(\"second script is loaded\");loadScript(\"\/script3.js\", function (script) {\n  console.log(\"third script is loaded\");\n  \/\/ after all scripts are loaded\n});\n});\n});\n```"},{"question":"What is promise chaining","answer":"The process of executing a sequence of asynchronous tasks one after another using promises is known as Promise\nchaining. Let's take an example of promise chaining for calculating the final result,javascript\nnew Promise(function (resolve, reject) {\n  setTimeout(() => resolve(1), 1000);\n})\n  .then(function (result) {\n    console.log(result); \/\/ 1\n    return result * 2;\n  })\n  .then(function (result) {\n    console.log(result); \/\/ 2\n    return result * 3;\n  })\n  .then(function (result) {\n    console.log(result); \/\/ 6\n    return result * 4;\n  });In the above handlers, the result is passed to the chain of .then() handlers with the below work flow,\nThe initial promise resolves in 1 second,\nAfter that .then handler is called by logging the result(1) and then return a promise with the value of\n   result * 2.\nAfter that the value passed to the next .then handler by logging the result(2) and return a promise with\n   result * 3.\nFinally the value passed to the last .then handler by logging the result(6) and return a promise with result *\n    4."},{"question":"What is promise.all","answer":"Promise.all is a promise that takes an array of promises as an input (an iterable), and it gets resolved when all\nthe promises get resolved or any one of them gets rejected. For example, the syntax of promise.all method is below,javascript\nPromise.all([Promise1, Promise2, Promise3]) .then(result) => {   console.log(result) }) .catch(error => console.log(`Error in promises ${error}`))Note: Remember that the order of the promises(output the result) is maintained as per input order."},{"question":"What is the purpose of the race method in promise","answer":"Promise.race() method will return the promise instance which is firstly resolved or rejected. Let's take an example\nof race() method where promise2 is resolved first```javascript\nvar promise1 = new Promise(function (resolve, reject) {\n  setTimeout(resolve, 500, \"one\");\n});\nvar promise2 = new Promise(function (resolve, reject) {\n  setTimeout(resolve, 100, \"two\");\n});Promise.race([promise1, promise2]).then(function (value) {\n  console.log(value); \/\/ \"two\" \/\/ Both promises will resolve, but promise2 is faster\n});\n```"},{"question":"What is a strict mode in javascript","answer":"Strict Mode is a new feature in ECMAScript 5 that allows you to place a program, or a function, in a \u201cstrict\u201d\noperating context. This way it prevents certain actions from being taken and throws more exceptions. The literal\nexpression \"use strict\"; instructs the browser to use the javascript code in the Strict mode."},{"question":"Why do you need strict mode","answer":"Strict mode is useful to write \"secure\" JavaScript by notifying \"bad syntax\" into real errors. For example, it\neliminates accidentally creating a global variable by throwing an error and also throws an error for assignment to a\nnon-writable property, a getter-only property, a non-existing property, a non-existing variable, or a non-existing\nobject."},{"question":"How do you declare strict mode","answer":"The strict mode is declared by adding \"use strict\"; to the beginning of a script or a function.\nIf declared at the beginning of a script, it has global scope.javascript\n\"use strict\";\nx = 3.14; \/\/ This will cause an error because x is not declaredand if you declare inside a function, it has local scope```javascript\nx = 3.14; \/\/ This will not cause an error.\nmyFunction();function myFunction() {\n  \"use strict\";\n  y = 3.14; \/\/ This will cause an error\n}\n```"},{"question":"What is the purpose of double exclamation","answer":"The double exclamation or negation(!!) ensures the resulting type is a boolean. If it was falsey (e.g. 0, null,\nundefined, etc.), it will be false, otherwise, it will be true.\nFor example, you can test IE version using this expression as below,javascript\nlet isIE8 = false;\nisIE8 = !!navigator.userAgent.match(\/MSIE 8.0\/);\nconsole.log(isIE8); \/\/ returns true or falseIf you don't use this expression then it returns the original value.javascript\nconsole.log(navigator.userAgent.match(\/MSIE 8.0\/)); \/\/ returns either an Array or nullNote: The expression !! is not an operator, but it is just twice of ! operator."},{"question":"What is the purpose of the delete operator","answer":"The delete keyword is used to delete the property as well as its value.```javascript\nvar user = { name: \"John\", age: 20 };\ndelete user.age;console.log(user); \/\/ {name: \"John\"}\n```"},{"question":"What is typeof operator","answer":"You can use the JavaScript typeof operator to find the type of a JavaScript variable. It returns the type of a\nvariable or an expression.javascript\ntypeof \"John Abraham\"; \/\/ Returns \"string\"\ntypeof (1 + 2); \/\/ Returns \"number\"\ntypeof [1, 2, 3] \/\/ Returns \"object\" because all arrays are also objects"},{"question":"What is undefined property","answer":"The undefined property indicates that a variable has not been assigned a value, or declared but not initialized at\nall. The type of undefined value is undefined too.javascript\nvar user; \/\/ Value is undefined, type is undefined\nconsole.log(typeof user); \/\/undefinedAny variable can be emptied by setting the value to undefined.javascript\nuser = undefined;"},{"question":"What is null value","answer":"The value null represents the intentional absence of any object value. It is one of JavaScript's primitive values.\nThe type of null value is object.\nYou can empty the variable by setting the value to null.javascript\nvar user = null;\nconsole.log(typeof user); \/\/object"},{"question":"What is the difference between null and undefined","answer":"Below are the main differences between null and undefined,| Null                                                                                            | Undefined                                                                                               |\n        | ----------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------- |\n| It is an assignment value which indicates that variable points to no object.                    | It is not an assignment value where a variable has been declared but has not yet been assigned a value. |\n| Type of null is object                                                                          | Type of undefined is undefined                                                                          |\n| The null value is a primitive value that represents the null, empty, or non-existent reference. | The undefined value is a primitive value used when a variable has not been assigned a value.            |\n| Indicates the absence of a value for a variable                                                 | Indicates absence of variable itself                                                                    |\n| Converted to zero (0) while performing primitive operations                                     | Converted to NaN while performing primitive operations                                                  |"},{"question":"What is eval","answer":"The eval() function evaluates JavaScript code represented as a string. The string can be a JavaScript expression,\nvariable, statement, or sequence of statements.javascript\nconsole.log(eval(\"1 + 2\")); \/\/  3"},{"question":"What is the difference between window and document","answer":"Below are the main differences between window and document,| Window                                                                        | Document                                                                                      |\n        | ----------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------- |\n| It is the root level element in any web page                                  | It is the direct child of the window object. This is also known as Document Object Model(DOM) |\n| By default window object is available implicitly in the page                  | You can access it via window.document or document.                                            |\n| It has methods like alert(), confirm() and properties like document, location | It provides methods like getElementById, getElementsByTagName, createElement etc              |"},{"question":"How do you access history in javascript","answer":"The window.history object contains the browser's history. You can load previous and next URLs in the history using\nback() and next() methods.javascript\nfunction goBack() {\n  window.history.back();\n}\nfunction goForward() {\n  window.history.forward();\n}Note: You can also access history without window prefix."},{"question":"How do you detect caps lock key turned on or not","answer":"The mouseEvent getModifierState() is used to return a boolean value that indicates whether the specified modifier\nkey is activated or not. The modifiers such as CapsLock, ScrollLock and NumLock are activated when they are clicked,\nand deactivated when they are clicked again.Let's take an input element to detect the CapsLock on\/off behavior with an example,```html\n\n\n```"},{"question":"What is isNaN","answer":"The isNaN() function is used to determine whether a value is an illegal number (Not-a-Number) or not. i.e, This\nfunction returns true if the value equates to NaN. Otherwise it returns false.javascript\nisNaN(\"Hello\"); \/\/true\nisNaN(\"100\"); \/\/false"},{"question":"What are the differences between undeclared and undefined variables","answer":"Below are the major differences between undeclared(not defined) and undefined variables,| undeclared                                                                                  | undefined                                                                              |\n        | ------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------- |\n| These variables do not exist in a program and are not declared                              | These variables declared in the program but have not assigned any value                |\n| If you try to read the value of an undeclared variable, then a runtime error is encountered | If you try to read the value of an undefined variable, an undefined value is returned. |"},{"question":"What are global variables","answer":"Global variables are those that are available throughout the length of the code without any scope. The var keyword\nis used to declare a local variable but if you omit it then it will become global variablejavascript\nmsg = \"Hello\"; \/\/ var is missing, it becomes global variable"},{"question":"What are the problems with global variables","answer":"The problem with global variables is the conflict of variable names of local and global scope. It is also difficult\nto debug and test the code that relies on global variables."},{"question":"What is NaN property","answer":"The NaN property is a global property that represents \"Not-a-Number\" value. i.e, It indicates that a value is not a\nlegal number. It is very rare to use NaN in a program but it can be used as return value for few casesjavascript\nMath.sqrt(-1);\nparseInt(\"Hello\");"},{"question":"What is the purpose of isFinite function","answer":"The isFinite() function is used to determine whether a number is a finite, legal number. It returns false if the\nvalue is +infinity, -infinity, or NaN (Not-a-Number), otherwise it returns true.```javascript\nisFinite(Infinity); \/\/ false\nisFinite(NaN); \/\/ false\nisFinite(-Infinity); \/\/ falseisFinite(100); \/\/ true\n```"},{"question":"What is an event flow","answer":"Event flow is the order in which event is received on the web page. When you click an element that is nested in\nvarious other elements, before your click actually reaches its destination, or target element, it must trigger the\nclick event for each of its parent elements first, starting at the top with the global window object.\nThere are two ways of event flow\nTop to Bottom(Event Capturing)\nBottom to Top (Event Bubbling)"},{"question":"What is event bubbling","answer":"Event bubbling is a type of event propagation where the event first triggers on the innermost target element, and\nthen successively triggers on the ancestors (parents) of the target element in the same nesting hierarchy till it\nreaches the outermost DOM element."},{"question":"What is event capturing","answer":"Event capturing is a type of event propagation where the event is first captured by the outermost element, and then\nsuccessively triggers on the descendants (children) of the target element in the same nesting hierarchy till it\nreaches the innermost DOM element."},{"question":"How do you submit a form using JavaScript","answer":"You can submit a form using document.forms[0].submit(). All the form input's information is submitted using\nonsubmit event handlerjavascript\nfunction submit() {\n  document.forms[0].submit();\n}"},{"question":"How do you find operating system details","answer":"The window.navigator object contains information about the visitor's browser OS details. Some of the OS properties\nare available under platform property,javascript\nconsole.log(navigator.platform);"},{"question":"What is the difference between document load and DOMContentLoaded events","answer":"The DOMContentLoaded event is fired when the initial HTML document has been completely loaded and parsed, without\nwaiting for assets(stylesheets, images, and subframes) to finish loading. Whereas The load event is fired when the\nwhole page has loaded, including all dependent resources(stylesheets, images)."},{"question":"What is the difference between native, host and user objects","answer":"Native objects are objects that are part of the JavaScript language defined by the ECMAScript specification. For\nexample, String, Math, RegExp, Object, Function etc core objects defined in the ECMAScript spec.\nHost objects are objects provided by the browser or runtime environment (Node). For example, window,\nXmlHttpRequest, DOM nodes etc are considered as host objects.\nUser objects are objects defined in the javascript code. For example, User objects created for profile\ninformation."},{"question":"What are the tools or techniques used for debugging JavaScript code","answer":"You can use below tools or techniques for debugging javascript\nChrome Devtools\ndebugger statement\nGood old console.log statement"},{"question":"What are the pros and cons of promises over callbacks","answer":"Below are the list of pros and cons of promises over callbacks,Pros:\nIt avoids callback hell which is unreadable\nEasy to write sequential asynchronous code with .then()\nEasy to write parallel asynchronous code with Promise.all()\nSolves some of the common problems of callbacks(call the callback too late, too early, many times and swallow\n   errors\/exceptions)\nCons:\nIt makes little complex code\nYou need to load a polyfill if ES6 is not supported"},{"question":"What is the difference between an attribute and a property","answer":"Attributes are defined on the HTML markup whereas properties are defined on the DOM. For example, the below HTML\nelement has 2 attributes type and value,javascript\n<input type=\"text\" value=\"Name:\">You can retrieve the attribute value as below,javascript\nconst input = document.querySelector(\"input\");\nconsole.log(input.getAttribute(\"value\")); \/\/ Good morning\nconsole.log(input.value); \/\/ Good morningAnd after you change the value of the text field to \"Good evening\", it becomes likejavascript\nconsole.log(input.getAttribute(\"value\")); \/\/ Good evening\nconsole.log(input.value); \/\/ Good evening"},{"question":"What is same-origin policy","answer":"The same-origin policy is a policy that prevents JavaScript from making requests across domain boundaries. An origin\nis defined as a combination of URI scheme, hostname, and port number. If you enable this policy then it prevents a\nmalicious script on one page from obtaining access to sensitive data on another web page using Document Object\nModel(DOM)."},{"question":"What is the purpose of void 0","answer":"Void(0) is used to prevent the page from refreshing. This will be helpful to eliminate the unwanted side-effect,\nbecause it will return the undefined primitive value. It is commonly used for HTML documents that use href=\"\nJavaScript:Void(0);\" within an <a> element. i.e, when you click a link, the browser loads a new page or refreshes\nthe same page. But this behavior will be prevented using this expression.\nFor example, the below link notify the message without reloading the pagejavascript\n<a href=\"JavaScript:void(0);\" onclick=\"alert('Well done!')\">\n  Click Me!\n<\/a>"},{"question":"Is JavaScript a compiled or interpreted language","answer":"JavaScript is an interpreted language, not a compiled language. An interpreter in the browser reads over the\nJavaScript code, interprets each line, and runs it. Nowadays modern browsers use a technology known as\nJust-In-Time (JIT) compilation, which compiles JavaScript to executable bytecode just as it is about to run."},{"question":"Is JavaScript a case-sensitive language","answer":"Yes, JavaScript is a case sensitive language. The language keywords, variables, function & object names, and any\nother identifiers must always be typed with a consistent capitalization of letters."},{"question":"Is there any relation between Java and JavaScript","answer":"No, they are entirely two different programming languages and have nothing to do with each other. But both of them\nare Object Oriented Programming languages and like many other languages, they follow similar syntax for basic\nfeatures(if, else, for, switch, break, continue etc)."},{"question":"What are events","answer":"Events are \"things\" that happen to HTML elements. When JavaScript is used in HTML pages, JavaScript can react on\n these events. Some of the examples of HTML events are,"},{"question":"Who created javascript","answer":"JavaScript was created by Brendan Eich in 1995 during his time at Netscape Communications. Initially it was\n developed under the name Mocha, but later the language was officially called LiveScript when it first shipped\n in beta releases of Netscape."},{"question":"What is the use of preventDefault method","answer":"The preventDefault() method cancels the event if it is cancelable, meaning that the default action or behaviour\n that belongs to the event will not occur. For example, prevent form submission when clicking on submit button and\n prevent opening the page URL when clicking on hyperlink are some common use cases.javascript\n document\n   .getElementById(\"link\")\n   .addEventListener(\"click\", function (event) {\n     event.preventDefault();\n   });Note: Remember that not all events are cancelable."},{"question":"What is the use of stopPropagation method","answer":"The stopPropagation method is used to stop the event from bubbling up the event chain. For example, the below\n nested divs with stopPropagation method prevents default event propagation when clicking on nested div(Div1)```javascript\n Click DIV1 Element\n DIV 2\n   DIV 1\n\n\n ```"},{"question":"What are the steps involved in return false usage","answer":"The return false statement in event handlers performs the below steps,\nFirst it stops the browser's default action or behaviour.\nIt prevents the event from propagating the DOM\nStops callback execution and returns immediately when called."},{"question":"What is BOM","answer":"The Browser Object Model (BOM) allows JavaScript to \"talk to\" the browser. It consists of the objects navigator,\n history, screen, location and document which are children of the window. The Browser Object Model is not\n standardized and can change based on different browsers."},{"question":"What is the use of setTimeout","answer":"The setTimeout() method is used to call a function or evaluate an expression after a specified number of\n milliseconds. For example, let's log a message after 2 seconds using setTimeout method,javascript\n setTimeout(function () {\n   console.log(\"Good morning\");\n }, 2000);"},{"question":"What is the use of setInterval","answer":"The setInterval() method is used to call a function or evaluate an expression at specified intervals (in\n milliseconds). For example, let's log a message after 2 seconds using setInterval method,javascript\n setInterval(function () {\n   console.log(\"Good morning\");\n }, 2000);"},{"question":"Why is JavaScript treated as Single threaded","answer":"JavaScript is a single-threaded language. Because the language specification does not allow the programmer to write\n code so that the interpreter can run parts of it in parallel in multiple threads or processes. Whereas languages\n like java, go, C++ can make multi-threaded and multi-process programs."},{"question":"What is an event delegation","answer":"Event delegation is a technique for listening to events where you delegate a parent element as the listener for all\n of the events that happen inside it.For example, if you wanted to detect field changes in inside a specific form, you can use event delegation\n technique,```javascript\n var form = document.querySelector(\"#registration-form\");\/\/ Listen for changes to fields inside the form\n form.addEventListener(\n   \"input\",\n   function (event) {\n     \/\/ Log the field that was changed\n     console.log(event.target);\n   },\n   false\n );\n ```"},{"question":"What is ECMAScript","answer":"ECMAScript is the scripting language that forms the basis of JavaScript. ECMAScript standardized by the ECMA\n International standards organization in the ECMA-262 and ECMA-402 specifications. The first edition of ECMAScript\n was released in 1997."},{"question":"What is JSON","answer":"JSON (JavaScript Object Notation) is a lightweight format that is used for data interchanging. It is based on a\n subset of JavaScript language in the way objects are built in JavaScript."},{"question":"What are the syntax rules of JSON","answer":"Below are the list of syntax rules of JSON\nThe data is in name\/value pairs\nThe data is separated by commas\nCurly braces hold objects\nSquare brackets hold arrays"},{"question":"What is the purpose JSON stringify","answer":"When sending data to a web server, the data has to be in a string format. You can achieve this by converting JSON\n object into a string using stringify() method.javascript\n var userJSON = { name: \"John\", age: 31 };\n var userString = JSON.stringify(userJSON);\n console.log(userString); \/\/\"{\"name\":\"John\",\"age\":31}\""},{"question":"How do you parse JSON string","answer":"When receiving the data from a web server, the data is always in a string format. But you can convert this string\n value to a javascript object using parse() method.javascript\n var userString = '{\"name\":\"John\",\"age\":31}';\n var userJSON = JSON.parse(userString);\n console.log(userJSON); \/\/ {name: \"John\", age: 31}"},{"question":"Why do you need JSON","answer":"When exchanging data between a browser and a server, the data can only be text. Since JSON is text only, it can\n easily be sent to and from a server, and used as a data format by any programming language."},{"question":"What are PWAs","answer":"Progressive web applications (PWAs) are a type of mobile app delivered through the web, built using common web\n technologies including HTML, CSS and JavaScript. These PWAs are deployed to servers, accessible through URLs, and\n indexed by search engines."},{"question":"What is the purpose of clearTimeout method","answer":"The clearTimeout() function is used in javascript to clear the timeout which has been set by setTimeout()function\n before that. i.e, The return value of setTimeout() function is stored in a variable and it\u2019s passed into the\n clearTimeout() function to clear the timer.For example, the below setTimeout method is used to display the message after 3 seconds. This timeout can be\n cleared by the clearTimeout() method.```javascript\n \n ```"},{"question":"What is the purpose of clearInterval method","answer":"The clearInterval() function is used in javascript to clear the interval which has been set by setInterval()\n function. i.e, The return value returned by setInterval() function is stored in a variable and it\u2019s passed into the\n clearInterval() function to clear the interval.For example, the below setInterval method is used to display the message for every 3 seconds. This interval can be\n cleared by the clearInterval() method.```javascript\n \n ```"},{"question":"How do you redirect new page in javascript","answer":"In vanilla javascript, you can redirect to a new page using the location property of window object. The syntax\n would be as follows,javascript\n function redirect() {\n   window.location.href = \"newPage.html\";\n }"},{"question":"How do you check whether a string contains a substring","answer":"There are 3 possible ways to check whether a string contains a substring or not,\nUsing includes: ES6 provided String.prototype.includes method to test a string contains a substring\njavascript\n var mainString = \"hello\",\n   subString = \"hell\";\n mainString.includes(subString);\nUsing indexOf: In an ES5 or older environment, you can use String.prototype.indexOf which returns the index\n   of a substring. If the index value is not equal to -1 then it means the substring exists in the main string.\njavascript\n var mainString = \"hello\",\n   subString = \"hell\";\n mainString.indexOf(subString) !== -1;\nUsing RegEx: The advanced solution is using Regular expression's test method(RegExp.test), which allows for\n   testing for against regular expressions\njavascript\n var mainString = \"hello\",\n   regex = \/hell\/;\n regex.test(mainString);"},{"question":"How do you validate an email in javascript","answer":"You can validate an email in javascript using regular expressions. It is recommended to do validations on the\n server side instead of the client side. Because the javascript can be disabled on the client side.javascript\n function validateEmail(email) {\n   var re =\n     \/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$\/;\n   return re.test(String(email).toLowerCase());\n }The above regular expression accepts unicode characters."},{"question":"How do you get the current url with javascript","answer":"You can use window.location.href expression to get the current url path and you can use the same expression for\n updating the URL too. You can also use document.URL for read-only purposes but this solution has issues in FF.javascript\n console.log(\"location.href\", window.location.href); \/\/ Returns full URL"},{"question":"What are the various url properties of location object","answer":"The below Location object properties can be used to access URL components of the page,\nhref - The entire URL\nprotocol - The protocol of the URL\nhost - The hostname and port of the URL\nhostname - The hostname of the URL\nport - The port number in the URL\npathname - The path name of the URL\nsearch - The query portion of the URL\nhash - The anchor portion of the URL"},{"question":"How do get query string values in javascript","answer":"You can use URLSearchParams to get query string values in javascript. Let's see an example to get the client code\n value from URL query string,javascript\n const urlParams = new URLSearchParams(window.location.search);\n const clientCode = urlParams.get(\"clientCode\");"},{"question":"How do you check if a key exists in an object","answer":"You can check whether a key exists in an object or not using three approaches,\nUsing in operator: You can use the in operator whether a key exists in an object or not\njavascript\n \"key\" in obj;and If you want to check if a key doesn't exist, remember to use parenthesis,javascript\n !(\"key\" in obj);\nUsing hasOwnProperty method: You can use hasOwnProperty to particularly test for properties of the object\n   instance (and not inherited properties)\njavascript\n obj.hasOwnProperty(\"key\"); \/\/ true\nUsing undefined comparison: If you access a non-existing property from an object, the result is undefined.\n   Let\u2019s compare the properties against undefined to determine the existence of the property.\n```javascript\n const user = {\n   name: \"John\",\n };console.log(user.name !== undefined); \/\/ true\n console.log(user.nickName !== undefined); \/\/ false\n ```"},{"question":"How do you loop through or enumerate javascript object","answer":"You can use the for-in loop to loop through javascript object. You can also make sure that the key you get is an\n actual property of an object, and doesn't come from the prototype using hasOwnProperty method.```javascript\n var object = {\n   k1: \"value1\",\n   k2: \"value2\",\n   k3: \"value3\",\n };for (var key in object) {\n   if (object.hasOwnProperty(key)) {\n     console.log(key + \" -> \" + object[key]); \/\/ k1 -> value1 ...\n   }\n }\n ```"},{"question":"How do you test for an empty object","answer":"There are different solutions based on ECMAScript versions\nUsing Object entries(ECMA 7+): You can use object entries length along with constructor type.\njavascript\n Object.entries(obj).length === 0 && obj.constructor === Object; \/\/ Since date object length is 0, you need to check constructor check as well\nUsing Object keys(ECMA 5+): You can use object keys length along with constructor type.\njavascript\n Object.keys(obj).length === 0 && obj.constructor === Object; \/\/ Since date object length is 0, you need to check constructor check as well\nUsing for-in with hasOwnProperty(Pre-ECMA 5): You can use a for-in loop along with hasOwnProperty.\n```javascript\n function isEmpty(obj) {\n   for (var prop in obj) {\n     if (obj.hasOwnProperty(prop)) {\n       return false;\n     }\n   }return JSON.stringify(obj) === JSON.stringify({});\n }\n ```"},{"question":"What is an arguments object","answer":"The arguments object is an Array-like object accessible inside functions that contains the values of the arguments\n passed to that function. For example, let's see how to use arguments object inside sum function,```javascript\n function sum() {\n   var total = 0;\n   for (var i = 0, len = arguments.length; i < len; ++i) {\n     total += arguments[i];\n   }\n   return total;\n }sum(1, 2, 3); \/\/ returns 6\n ```Note: You can't apply array methods on arguments object. But you can convert into a regular array as below.javascript\n var argsArray = Array.prototype.slice.call(arguments);"},{"question":"How do you make first letter of the string in an uppercase","answer":"You can create a function which uses a chain of string methods such as charAt, toUpperCase and slice methods to\n generate a string with the first letter in uppercase.javascript\n function capitalizeFirstLetter(string) {\n   return string.charAt(0).toUpperCase() + string.slice(1);\n }"},{"question":"What are the pros and cons of for loop","answer":"The for-loop is a commonly used iteration syntax in javascript. It has both pros and cons#### Pros\nWorks on every environment\nYou can use break and continue flow control statements\n#### Cons\nToo verbose\nImperative\nYou might face one-by-off errors"},{"question":"How do you display the current date in javascript","answer":"You can use new Date() to generate a new Date object containing the current date and time. For example, let's\n display the current date in mm\/dd\/yyyy```javascript\n var today = new Date();\n var dd = String(today.getDate()).padStart(2, \"0\");\n var mm = String(today.getMonth() + 1).padStart(2, \"0\"); \/\/January is 0!\n var yyyy = today.getFullYear();today = mm + \"\/\" + dd + \"\/\" + yyyy;\n document.write(today);\n ```"},{"question":"How do you compare two date objects","answer":"You need to use date.getTime() method to compare date values instead of comparison operators (==, !=, ===, and !==\n operators)javascript\n var d1 = new Date();\n var d2 = new Date(d1);\n console.log(d1.getTime() === d2.getTime()); \/\/True\n console.log(d1 === d2); \/\/ False"},{"question":"How do you check if a string starts with another string","answer":"You can use ECMAScript 6's String.prototype.startsWith() method to check if a string starts with another string\n or not. But it is not yet supported in all browsers. Let's see an example to see this usage,javascript\n \"Good morning\".startsWith(\"Good\"); \/\/ true\n \"Good morning\".startsWith(\"morning\"); \/\/ false"},{"question":"How do you trim a string in javascript","answer":"JavaScript provided a trim method on string types to trim any whitespaces present at the beginning or ending of the\n string.javascript\n \"  Hello World   \".trim(); \/\/Hello WorldIf your browser(<IE9) doesn't support this method then you can use below polyfill.javascript\n if (!String.prototype.trim) {\n   (function () {\n     \/\/ Make sure we trim BOM and NBSP\n     var rtrim = \/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$\/g;\n     String.prototype.trim = function () {\n       return this.replace(rtrim, \"\");\n     };\n   })();\n }"},{"question":"How do you add a key value pair in javascript","answer":"There are two possible solutions to add new properties to an object. Let's take a simple object to explain these\n solutions.javascript\n var object = {\n   key1: value1,\n   key2: value2,\n };\nUsing dot notation: This solution is useful when you know the name of the property\njavascript\n object.key3 = \"value3\";\nUsing square bracket notation: This solution is useful when the name of the property is dynamically\n   determined.\njavascript\n obj[\"key3\"] = \"value3\";"},{"question":"Is the !-- notation represents a special operator","answer":"No,that's not a special operator. But it is a combination of 2 standard operators one after the other,\nA logical not (!)\nA prefix decrement (--)\nAt first, the value decremented by one and then tested to see if it is equal to zero or not for determining the\n truthy\/falsy value."},{"question":"How do you assign default values to variables","answer":"You can use the logical or operator || in an assignment expression to provide a default value. The syntax looks\n like as below,javascript\n var a = b || c;As per the above expression, variable 'a 'will get the value of 'c' only if 'b' is falsy (if is null, false,\n undefined, 0, empty string, or NaN), otherwise 'a' will get the value of 'b'."},{"question":"How do you define multiline strings","answer":"You can define multiline string literals using the '\\' character followed by line terminator.javascript\n var str =\n   \"This is a \\\n very lengthy \\\n sentence!\";But if you have a space after the '\\' character, the code will look exactly the same, but it will raise a\n SyntaxError."},{"question":"What is an app shell model","answer":"An application shell (or app shell) architecture is one way to build a Progressive Web App that reliably and\n instantly loads on your users' screens, similar to what you see in native applications. It is useful for getting\n some initial HTML to the screen fast without a network."},{"question":"Can we define properties for functions","answer":"Yes, We can define properties for functions because functions are also objects.```javascript\n fn = function (x) {\n   \/\/Function code goes here\n };fn.name = \"John\";fn.profile = function (y) {\n   \/\/Profile code goes here\n };\n ```"},{"question":"What is the way to find the number of parameters expected by a function","answer":"You can use function.length syntax to find the number of parameters expected by a function. Let's take an example\n of sum function to calculate the sum of numbers,javascript\n function sum(num1, num2, num3, num4) {\n   return num1 + num2 + num3 + num4;\n }\n sum.length; \/\/ 4 is the number of parameters expected."},{"question":"What is a polyfill","answer":"A polyfill is a piece of JS code used to provide modern functionality on older browsers that do not natively\n support it. For example, Silverlight plugin polyfill can be used to mimic the functionality of an HTML Canvas\n element on Microsoft Internet Explorer 7."},{"question":"What are break and continue statements","answer":"The break statement is used to \"jump out\" of a loop. i.e, It breaks the loop and continues executing the code after\n the loop.javascript\n for (i = 0; i < 10; i++) {\n   if (i === 5) {\n     break;\n   }\n   text += \"Number: \" + i + \"<br>\";\n }The continue statement is used to \"jump over\" one iteration in the loop. i.e, It breaks one iteration (in the\n loop), if a specified condition occurs, and continues with the next iteration in the loop.javascript\n for (i = 0; i < 10; i++) {\n   if (i === 5) {\n     continue;\n   }\n   text += \"Number: \" + i + \"<br>\";\n }"},{"question":"What are js labels","answer":"The label statement allows us to name loops and blocks in JavaScript. We can then use these labels to refer back to\n the code later. For example, the below code with labels avoids printing the numbers when they are same,```javascript\n var i, j;loop1: for (i = 0; i < 3; i++) {\n   loop2: for (j = 0; j < 3; j++) {\n     if (i === j) {\n       continue loop1;\n     }\n     console.log(\"i = \" + i + \", j = \" + j);\n   }\n }\/\/ Output is:\n \/\/   \"i = 1, j = 0\"\n \/\/   \"i = 2, j = 0\"\n \/\/   \"i = 2, j = 1\"\n ```"},{"question":"What are the benefits of keeping declarations at the top","answer":"It is recommended to keep all declarations at the top of each script or function. The benefits of doing this are,\nGives cleaner code\nIt provides a single place to look for local variables\nEasy to avoid unwanted global variables\nIt reduces the possibility of unwanted re-declarations"},{"question":"What are the benefits of initializing variables","answer":"It is recommended to initialize variables because of the below benefits,\nIt gives cleaner code\nIt provides a single place to initialize variables\nAvoid undefined values in the code"},{"question":"What are the recommendations to create new object","answer":"It is recommended to avoid creating new objects using new Object(). Instead you can initialize values based on\n it's type to create the objects.\nAssign {} instead of new Object()\nAssign \"\" instead of new String()\nAssign 0 instead of new Number()\nAssign false instead of new Boolean()\nAssign [] instead of new Array()\nAssign \/()\/ instead of new RegExp()\nAssign function (){} instead of new Function()\nYou can define them as an example,javascript\n var v1 = {};\n var v2 = \"\";\n var v3 = 0;\n var v4 = false;\n var v5 = [];\n var v6 = \/()\/;\n var v7 = function () {};"},{"question":"How do you define JSON arrays","answer":"JSON arrays are written inside square brackets and arrays contain javascript objects. For example, the JSON array\n of users would be as below,javascript\n \"users\":[\n   {\"firstName\":\"John\", \"lastName\":\"Abrahm\"},\n   {\"firstName\":\"Anna\", \"lastName\":\"Smith\"},\n   {\"firstName\":\"Shane\", \"lastName\":\"Warn\"}\n ]"},{"question":"How do you generate random integers","answer":"You can use Math.random() with Math.floor() to return random integers. For example, if you want generate random\n integers between 1 to 10, the multiplication factor should be 10,javascript\n Math.floor(Math.random() * 10) + 1; \/\/ returns a random integer from 1 to 10\n Math.floor(Math.random() * 100) + 1; \/\/ returns a random integer from 1 to 100Note: Math.random() returns a random number between 0 (inclusive), and 1 (exclusive)"},{"question":"Can you write a random integers function to print integers with in a range","answer":"Yes, you can create a proper random function to return a random number between min and max (both included)javascript\n function randomInteger(min, max) {\n   return Math.floor(Math.random() * (max - min + 1)) + min;\n }\n randomInteger(1, 100); \/\/ returns a random integer from 1 to 100\n randomInteger(1, 1000); \/\/ returns a random integer from 1 to 1000"},{"question":"What is tree shaking","answer":"Tree shaking is a form of dead code elimination. It means that unused modules will not be included in the bundle\n during the build process and for that it relies on the static structure of ES2015 module syntax,( i.e. import and\n export). Initially this has been popularized by the ES2015 module bundler rollup."},{"question":"What is the need of tree shaking","answer":"Tree Shaking can significantly reduce the code size in any application. i.e, The less code we send over the wire\n the more performant the application will be. For example, if we just want to create a \u201cHello World\u201d Application\n using SPA frameworks then it will take around a few MBs, but by tree shaking it can bring down the size to just a\n few hundred KBs. Tree shaking is implemented in Rollup and Webpack bundlers."},{"question":"Is it recommended to use eval","answer":"No, it allows arbitrary code to be run which causes a security problem. As we know that the eval() function is used\n to run text as code. In most of the cases, it should not be necessary to use it."},{"question":"What is a Regular Expression","answer":"A regular expression is a sequence of characters that forms a search pattern. You can use this search pattern for\n searching data in a text. These can be used to perform all types of text search and text replace operations. Let's\n see the syntax format now,javascript\n \/pattern\/modifiers;For example, the regular expression or search pattern with case-insensitive username would be,javascript\n \/John\/i;"},{"question":"What are the string methods available in Regular expression","answer":"Regular Expressions has two string methods: search() and replace().\n The search() method uses an expression to search for a match, and returns the position of the match.javascript\n var msg = \"Hello John\";\n var n = msg.search(\/John\/i); \/\/ 6The replace() method is used to return a modified string where the pattern is replaced.javascript\n var msg = \"Hello John\";\n var n = msg.replace(\/John\/i, \"Buttler\"); \/\/ Hello Buttler"},{"question":"What are modifiers in regular expression","answer":"Modifiers can be used to perform case-insensitive and global searches. Let's list down some of the modifiers,| Modifier | Description                                             |\n           | -------- | ------------------------------------------------------- |\n | i        | Perform case-insensitive matching                       |\n | g        | Perform a global match rather than stops at first match |\n | m        | Perform multiline matching                              |Let's take an example of global modifier,javascript\n var text = \"Learn JS one by one\";\n var pattern = \/one\/g;\n var result = text.match(pattern); \/\/ one,one"},{"question":"What are regular expression patterns","answer":"Regular Expressions provide a group of patterns in order to match characters. Basically they are categorized into 3\n types,\nBrackets: These are used to find a range of characters.\n   For example, below are some use cases,\n[abc]: Used to find any of the characters between the brackets(a,b,c)\n[0-9]: Used to find any of the digits between the brackets\n(a|b): Used to find any of the alternatives separated with |\n\n\nMetacharacters: These are characters with a special meaning\n   For example, below are some use cases,\n\\d: Used to find a digit\n\\s: Used to find a whitespace character\n\\b: Used to find a match at the beginning or ending of a word\n\n\nQuantifiers: These are useful to define quantities\n   For example, below are some use cases,\nn+: Used to find matches for any string that contains at least one n\nn*: Used to find matches for any string that contains zero or more occurrences of n\nn?: Used to find matches for any string that contains zero or one occurrences of n"},{"question":"What is a RegExp object","answer":"RegExp object is a regular expression object with predefined properties and methods. Let's see the simple usage of\n RegExp object,javascript\n var regexp = new RegExp(\"\\\\w+\");\n console.log(regexp);\n \/\/ expected output: \/\\w+\/"},{"question":"How do you search a string for a pattern","answer":"You can use the test() method of regular expression in order to search a string for a pattern, and return true or\n false depending on the result.javascript\n var pattern = \/you\/;\n console.log(pattern.test(\"How are you?\")); \/\/true"},{"question":"What is the purpose of exec method","answer":"The purpose of exec method is similar to test method but it executes a search for a match in a specified string and\n returns a result array, or null instead of returning true\/false.javascript\n var pattern = \/you\/;\n console.log(pattern.exec(\"How are you?\")); \/\/[\"you\", index: 8, input: \"How are you?\", groups: undefined]"},{"question":"How do you change the style of a HTML element","answer":"You can change inline style or classname of a HTML element using javascript\nUsing style property: You can modify inline style using style property\njavascript\n document.getElementById(\"title\").style.fontSize = \"30px\";\nUsing ClassName property: It is easy to modify element class using className property\njavascript\n document.getElementById(\"title\").className = \"custom-title\";"},{"question":"What would be the result of 1+2+'3'","answer":"The output is going to be 33. Since 1 and 2 are numeric values, the result of the first two digits is going\n to be a numeric value 3. The next digit is a string type value because of that the addition of numeric value 3\n and string type value 3 is just going to be a concatenation value 33."},{"question":"What is a debugger statement","answer":"The debugger statement invokes any available debugging functionality, such as setting a breakpoint. If no debugging\n functionality is available, this statement has no effect.\n For example, in the below function a debugger statement has been inserted. So\n execution is paused at the debugger statement just like a breakpoint in the script source.javascript\n function getProfile() {\n   \/\/ code goes here\n   debugger;\n   \/\/ code goes here\n }"},{"question":"What is the purpose of breakpoints in debugging","answer":"You can set breakpoints in the javascript code once the debugger statement is executed and the debugger window pops\n up. At each breakpoint, javascript will stop executing, and let you examine the JavaScript values. After examining\n values, you can resume the execution of code using the play button."},{"question":"Can I use reserved words as identifiers","answer":"No, you cannot use the reserved words as variables, labels, object or function names. Let's see one simple example,javascript\n var else = \"hello\"; \/\/ Uncaught SyntaxError: Unexpected token else"},{"question":"How do you detect a mobile browser","answer":"You can use regex which returns a true or false value depending on whether or not the user is browsing with a\n mobile.javascript\n window.mobilecheck = function () {\n   var mobileCheck = false;\n   (function (a) {\n     if (\n       \/(android|bb\\d+|meego).+mobile|avantgo|bada\\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino\/i.test(\n         a\n       ) ||\n       \/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-\/i.test(\n         a.substr(0, 4)\n       )\n     )\n       mobileCheck = true;\n   })(navigator.userAgent || navigator.vendor || window.opera);\n   return mobileCheck;\n };"},{"question":"How do you detect a mobile browser without regexp","answer":"You can detect mobile browsers by simply running through a list of devices and checking if the useragent matches\n anything. This is an alternative solution for RegExp usage,javascript\n function detectmob() {\n   if (\n     navigator.userAgent.match(\/Android\/i) ||\n     navigator.userAgent.match(\/webOS\/i) ||\n     navigator.userAgent.match(\/iPhone\/i) ||\n     navigator.userAgent.match(\/iPad\/i) ||\n     navigator.userAgent.match(\/iPod\/i) ||\n     navigator.userAgent.match(\/BlackBerry\/i) ||\n     navigator.userAgent.match(\/Windows Phone\/i)\n   ) {\n     return true;\n   } else {\n     return false;\n   }\n }"},{"question":"How do you get the image width and height using JS","answer":"You can programmatically get the image and check the dimensions(width and height) using Javascript.javascript\n var img = new Image();\n img.onload = function () {\n   console.log(this.width + \"x\" + this.height);\n };\n img.src = \"http:\/\/www.google.com\/intl\/en_ALL\/images\/logo.gif\";"},{"question":"How do you make synchronous HTTP request","answer":"Browsers provide an XMLHttpRequest object which can be used to make synchronous HTTP requests from JavaScriptjavascript\n function httpGet(theUrl) {\n   var xmlHttpReq = new XMLHttpRequest();\n   xmlHttpReq.open(\"GET\", theUrl, false); \/\/ false for synchronous request\n   xmlHttpReq.send(null);\n   return xmlHttpReq.responseText;\n }"},{"question":"How do you make asynchronous HTTP request","answer":"Browsers provide an XMLHttpRequest object which can be used to make asynchronous HTTP requests from JavaScript by\n passing the 3rd parameter as true.javascript\n function httpGetAsync(theUrl, callback) {\n   var xmlHttpReq = new XMLHttpRequest();\n   xmlHttpReq.onreadystatechange = function () {\n     if (xmlHttpReq.readyState == 4 && xmlHttpReq.status == 200)\n       callback(xmlHttpReq.responseText);\n   };\n   xmlHttp.open(\"GET\", theUrl, true); \/\/ true for asynchronous\n   xmlHttp.send(null);\n }"},{"question":"How do you convert date to another timezone in javascript","answer":"You can use the toLocaleString() method to convert dates in one timezone to another. For example, let's convert\n current date to British English timezone as below,javascript\n console.log(event.toLocaleString(\"en-GB\", { timeZone: \"UTC\" })); \/\/29\/06\/2019, 09:56:00"},{"question":"What are the properties used to get size of window","answer":"You can use innerWidth, innerHeight, clientWidth, clientHeight properties of windows, document element and document\n body objects to find the size of a window. Let's use them combination of these properties to calculate the size of\n a window or document,```javascript\n var width =\n   window.innerWidth ||\n   document.documentElement.clientWidth ||\n   document.body.clientWidth;var height =\n   window.innerHeight ||\n   document.documentElement.clientHeight ||\n   document.body.clientHeight;\n ```"},{"question":"What is a conditional operator in javascript","answer":"The conditional (ternary) operator is the only JavaScript operator that takes three operands which acts as a\n shortcut for if statements.javascript\n var isAuthenticated = false;\n console.log(\n   isAuthenticated ? \"Hello, welcome\" : \"Sorry, you are not authenticated\"\n ); \/\/Sorry, you are not authenticated"},{"question":"Can you apply chaining on conditional operator","answer":"Yes, you can apply chaining on conditional operators similar to if \u2026 else if \u2026 else if \u2026 else chain. The syntax is\n going to be as below,```javascript\n function traceValue(someParam) {\n   return condition1\n     ? value1\n     : condition2\n     ? value2\n     : condition3\n     ? value3\n     : value4;\n }\/\/ The above conditional operator is equivalent to:function traceValue(someParam) {\n   if (condition1) {\n     return value1;\n   } else if (condition2) {\n     return value2;\n   } else if (condition3) {\n     return value3;\n   } else {\n     return value4;\n   }\n }\n ```"},{"question":"What are the ways to execute javascript after page load","answer":"You can execute javascript after page load in many different ways,\nwindow.onload:\njavascript\n window.onload = function ...\ndocument.onload:\njavascript\n document.onload = function ...\nbody onload:\njavascript\n <body onload=\"script();\">"},{"question":"What is the difference between proto and prototype","answer":"The __proto__ object is the actual object that is used in the lookup chain to resolve methods, etc.\n Whereas prototype is the object that is used to build __proto__ when you create an object with new.javascript\n new Employee().__proto__ === Employee.prototype;\n new Employee().prototype === undefined;There are few more differences,| feature             | Prototype                            | proto                                      |\n           | ------------------- | ------------------------------------- | ----------------------------------------------- |\n | Access   | All the function constructors have prototype properties.  |   All the objects have __proto__ property                      |\n | Purpose      | Used to reduce memory wastage with a single copy of function               | Used in lookup chain to resolve methods, constructors etc.                        |\n | ECMAScript      | Introduced in ES6               | Introduced in ES5                          |\n | Usage             | Frequently used                             | Rarely used                                 |"},{"question":"Give an example where do you really need semicolon","answer":"It is recommended to use semicolons after every statement in JavaScript. For example, in the below case it throws\n an error \".. is not a function\" at runtime due to missing semicolon.```javascript\n \/\/ define a function\n var fn = (function () {\n   \/\/...\n })(\n   \/\/ semicolon missing at this line\/\/ then execute some code inside a closure\n   function () {\n     \/\/...\n   }\n )();\n ```and it will be interpreted asjavascript\n var fn = (function () {\n   \/\/...\n })(function () {\n   \/\/...\n })();In this case, we are passing the second function as an argument to the first function and then trying to call the\n result of the first function call as a function. Hence, the second function will fail with a \"... is not a\n function\" error at runtime."},{"question":"What is a freeze method","answer":"The freeze() method is used to freeze an object. Freezing an object does not allow adding new properties to an\n object,prevents from removing and prevents changing the enumerability, configurability, or writability of existing\n properties. i.e, It returns the passed object and does not create a frozen copy.```javascript\n const obj = {\n   prop: 100,\n };Object.freeze(obj);\n obj.prop = 200; \/\/ Throws an error in strict modeconsole.log(obj.prop); \/\/100\n ```Remember freezing is only applied to the top-level properties in objects but not for nested objects.\n For example, let's try to freeze user object which has employment details as nested object and observe that details\n have been changed.```javascript\n const user = {\n   name: 'John',\n   employment: {\n     department: 'IT'\n   }\n };Object.freeze(user);\n user.employment.department = 'HR';\n ```Note: It causes a TypeError if the argument passed is not an object."},{"question":"What is the purpose of freeze method","answer":"Below are the main benefits of using freeze method,\nIt is used for freezing objects and arrays.\nIt is used to make an object immutable."},{"question":"Why do I need to use freeze method","answer":"In the Object-oriented paradigm, an existing API contains certain elements that are not intended to be extended,\n modified, or re-used outside of their current context. Hence it works as the final keyword which is used in\n various languages."},{"question":"How do you detect a browser language preference","answer":"You can use navigator object to detect a browser language preference as below,```javascript\n var language =\n   (navigator.languages && navigator.languages[0]) || \/\/ Chrome \/ Firefox\n   navigator.language || \/\/ All browsers\n   navigator.userLanguage; \/\/ IE <= 10console.log(language);\n ```"},{"question":"How to convert string to title case with javascript","answer":"Title case means that the first letter of each word is capitalized. You can convert a string to title case using\n the below function,javascript\n function toTitleCase(str) {\n   return str.replace(\/\\w\\S*\/g, function (txt) {\n     return txt.charAt(0).toUpperCase() + txt.substring(1).toLowerCase();\n   });\n }\n toTitleCase(\"good morning john\"); \/\/ Good Morning John"},{"question":"How do you detect javascript disabled in the page","answer":"You can use the <noscript> tag to detect javascript disabled or not. The code block inside <noscript> gets\n executed when JavaScript is disabled, and is typically used to display alternative content when the page generated\n in JavaScript.javascript\n <script type=\"javascript\">\n     \/\/ JS related code goes here\n <\/script>\n <noscript>\n     <a href=\"next_page.html?noJS=true\">JavaScript is disabled in the page. Please click Next Page<\/a>\n <\/noscript>"},{"question":"What are various operators supported by javascript","answer":"An operator is capable of manipulating(mathematical and logical computations) a certain value or operand. There are\n various operators supported by JavaScript as below,\nArithmetic Operators: Includes + (Addition),\u2013 (Subtraction), * (Multiplication), \/ (Division), % (\n   Modulus), + + (Increment) and \u2013 \u2013 (Decrement)\nComparison Operators: Includes = =(Equal),!= (Not Equal), ===(Equal with type), > (Greater than),> = (Greater\n   than or Equal to),< (Less than),<= (Less than or Equal to)\nLogical Operators: Includes &&(Logical AND),||(Logical OR),!(Logical NOT)\nAssignment Operators: Includes = (Assignment Operator), += (Add and Assignment Operator), \u2013 = (Subtract and\n   Assignment Operator), *= (Multiply and Assignment), \/= (Divide and Assignment), %= (Modules and Assignment)\nTernary Operators: It includes conditional(: ?) Operator\ntypeof Operator: It uses to find type of variable. The syntax looks like typeof variable"},{"question":"What is a rest parameter","answer":"Rest parameter is an improved way to handle function parameters which allows us to represent an indefinite number\n of arguments as an array. The syntax would be as below,javascript\n function f(a, b, ...theArgs) {\n   \/\/ ...\n }For example, let's take a sum example to calculate on dynamic number of parameters,javascript\n function total(\u2026args){\n let sum = 0;\n for(let i of args){\n sum+=i;\n }\n return sum;\n }\n console.log(fun(1,2)); \/\/3\n console.log(fun(1,2,3)); \/\/6\n console.log(fun(1,2,3,4)); \/\/13\n console.log(fun(1,2,3,4,5)); \/\/15Note: Rest parameter is added in ES2015 or ES6"},{"question":"What happens if you do not use rest parameter as a last argument","answer":"The rest parameter should be the last argument, as its job is to collect all the remaining arguments into an array.\n For example, if you define a function like below it doesn\u2019t make any sense and will throw an error.javascript\n function someFunc(a,\u2026b,c){\n \/\/You code goes here\n return;\n }"},{"question":"What are the bitwise operators available in javascript","answer":"Below are the list of bitwise logical operators used in JavaScript\nBitwise AND ( & )\nBitwise OR ( | )\nBitwise XOR ( ^ )\nBitwise NOT ( ~ )\nLeft Shift ( << )\nSign Propagating Right Shift ( >> )\nZero fill Right Shift ( >>> )"},{"question":"What is a spread operator","answer":"Spread operator allows iterables( arrays \/ objects \/ strings ) to be expanded into single arguments\/elements. Let's\n take an example to see this behavior,```javascript\n function calculateSum(x, y, z) {\n   return x + y + z;\n }const numbers = [1, 2, 3];console.log(calculateSum(...numbers)); \/\/ 6\n ```"},{"question":"How do you determine whether object is frozen or not","answer":"Object.isFrozen() method is used to determine if an object is frozen or not.An object is frozen if all of the below\n conditions hold true,\nIf it is not extensible.\nIf all of its properties are non-configurable.\nIf all its data properties are non-writable.\n   The usage is going to be as follows,\njavascript\n const object = {\n   property: \"Welcome JS world\",\n };\n Object.freeze(object);\n console.log(Object.isFrozen(object));"},{"question":"How do you determine two values same or not using object","answer":"The Object.is() method determines whether two values are the same value. For example, the usage with different\n types of values would be,javascript\n Object.is(\"hello\", \"hello\"); \/\/ true\n Object.is(window, window); \/\/ true\n Object.is([], []); \/\/ falseTwo values are the same if one of the following holds:\nboth undefined\nboth null\nboth true or both false\nboth strings of the same length with the same characters in the same order\nboth the same object (means both object have same reference)\nboth numbers and\n   both +0\n   both -0\n   both NaN\n   both non-zero and both not NaN and both have the same value."},{"question":"What is the purpose of using object is method","answer":"Some of the applications of Object's is method are follows,\nIt is used for comparison of two strings.\nIt is used for comparison of two numbers.\nIt is used for comparing the polarity of two numbers.\nIt is used for comparison of two objects."},{"question":"How do you copy properties from one object to other","answer":"You can use the Object.assign() method which is used to copy the values and properties from one or more source\n objects to a target object. It returns the target object which has properties and values copied from the source\n objects. The syntax would be as below,javascript\n Object.assign(target, ...sources);Let's take example with one source and one target object,```javascript\n const target = { a: 1, b: 2 };\n const source = { b: 3, c: 4 };const returnedTarget = Object.assign(target, source);console.log(target); \/\/ { a: 1, b: 3, c: 4 }console.log(returnedTarget); \/\/ { a: 1, b: 3, c: 4 }\n ```As observed in the above code, there is a common property(b) from source to target so it's value has been\n overwritten."},{"question":"What are the applications of assign method","answer":"Below are the some of main applications of Object.assign() method,\nIt is used for cloning an object.\nIt is used to merge objects with the same properties."},{"question":"What is a proxy object","answer":"The Proxy object is used to define custom behavior for fundamental operations such as property lookup, assignment,\n enumeration, function invocation, etc. The syntax would be as follows,javascript\n var p = new Proxy(target, handler);Let's take an example of proxy object,```javascript\n var handler = {\n   get: function (obj, prop) {\n     return prop in obj ? obj[prop] : 100;\n   },\n };var p = new Proxy({}, handler);\n p.a = 10;\n p.b = null;console.log(p.a, p.b); \/\/ 10, null\n console.log(\"c\" in p, p.c); \/\/ false, 100\n ```In the above code, it uses get handler which define the behavior of the proxy when an operation is performed on\n it"},{"question":"What is the purpose of seal method","answer":"The Object.seal() method is used to seal an object, by preventing new properties from being added to it and\n marking all existing properties as non-configurable. But values of present properties can still be changed as long\n as they are writable. Let's see the below example to understand more about seal() methodjavascript\n const object = {\n   property: \"Welcome JS world\",\n };\n Object.seal(object);\n object.property = \"Welcome to object world\";\n console.log(Object.isSealed(object)); \/\/ true\n delete object.property; \/\/ You cannot delete when sealed\n console.log(object.property); \/\/Welcome to object world"},{"question":"What are the applications of seal method","answer":"Below are the main applications of Object.seal() method,\nIt is used for sealing objects and arrays.\nIt is used to make an object immutable."},{"question":"What are the differences between freeze and seal methods","answer":"If an object is frozen using the Object.freeze() method then its properties become immutable and no changes can be\n made in them whereas if an object is sealed using the Object.seal() method then the changes can be made in the\n existing properties of the object."},{"question":"How do you determine if an object is sealed or not","answer":"The Object.isSealed() method is used to determine if an object is sealed or not. An object is sealed if all of the\n below conditions hold true\nIf it is not extensible.\nIf all of its properties are non-configurable.\nIf it is not removable (but not necessarily non-writable).\n   Let's see it in the action\n```javascript\n const object = {\n   property: \"Hello, Good morning\",\n };Object.seal(object); \/\/ Using seal() method to seal the objectconsole.log(Object.isSealed(object)); \/\/ checking whether the object is sealed or not\n ```"},{"question":"How do you get enumerable key and value pairs","answer":"The Object.entries() method is used to return an array of a given object's own enumerable string-keyed\n property [key, value] pairs, in the same order as that provided by a for...in loop. Let's see the functionality of\n object.entries() method in an example,```javascript\n const object = {\n   a: \"Good morning\",\n   b: 100,\n };for (let [key, value] of Object.entries(object)) {\n   console.log(${key}: ${value}); \/\/ a: 'Good morning'\n   \/\/ b: 100\n }\n ```Note: The order is not guaranteed as object defined."},{"question":"What is the main difference between Object.values and Object.entries method","answer":"The Object.values() method's behavior is similar to Object.entries() method but it returns an array of values\n instead [key,value] pairs.```javascript\n const object = {\n   a: \"Good morning\",\n   b: 100,\n };for (let value of Object.values(object)) {\n   console.log(${value}); \/\/ 'Good morning'\n   100;\n }\n ```"},{"question":"How can you get the list of keys of any object","answer":"You can use the Object.keys() method which is used to return an array of a given object's own property names, in\n the same order as we get with a normal loop. For example, you can get the keys of a user object,```javascript\n const user = {\n   name: \"John\",\n   gender: \"male\",\n   age: 40,\n };console.log(Object.keys(user)); \/\/['name', 'gender', 'age']\n ```"},{"question":"How do you create an object with prototype","answer":"The Object.create() method is used to create a new object with the specified prototype object and properties. i.e,\n It uses an existing object as the prototype of the newly created object. It returns a new object with the specified\n prototype object and properties.``javascript\n const user = {\n   name: \"John\",\n   printInfo: function () {\n     console.log(My name is ${this.name}.`);\n   },\n };const admin = Object.create(user);admin.name = \"Nick\"; \/\/ Remember that \"name\" is a property set on \"admin\" but not on \"user\" objectadmin.printInfo(); \/\/ My name is Nick\n ```"},{"question":"What is a WeakSet","answer":"WeakSet is used to store a collection of weakly(weak references) held objects. The syntax would be as follows,javascript\n new WeakSet([iterable]);Let's see the below example to explain it's behavior,javascript\n var ws = new WeakSet();\n var user = {};\n ws.add(user);\n ws.has(user); \/\/ true\n ws.delete(user); \/\/ removes user from the set\n ws.has(user); \/\/ false, user has been removed"},{"question":"What are the differences between WeakSet and Set","answer":"The main difference is that references to objects in Set are strong while references to objects in WeakSet are\n weak. i.e, An object in WeakSet can be garbage collected if there is no other reference to it.\n Other differences are,\nSets can store any value Whereas WeakSets can store only collections of objects\nWeakSet does not have size property unlike Set\nWeakSet does not have methods such as clear, keys, values, entries, forEach.\nWeakSet is not iterable."},{"question":"List down the collection of methods available on WeakSet","answer":"Below are the list of methods available on WeakSet,\nadd(value): A new object is appended with the given value to the weakset\ndelete(value): Deletes the value from the WeakSet collection.\nhas(value): It returns true if the value is present in the WeakSet Collection, otherwise it returns false.\nLet's see the functionality of all the above methods in an example,javascript\n var weakSetObject = new WeakSet();\n var firstObject = {};\n var secondObject = {};\n \/\/ add(value)\n weakSetObject.add(firstObject);\n weakSetObject.add(secondObject);\n console.log(weakSetObject.has(firstObject)); \/\/true\n weakSetObject.delete(secondObject);"},{"question":"What is a WeakMap","answer":"The WeakMap object is a collection of key\/value pairs in which the keys are weakly referenced. In this case, keys\n must be objects and the values can be arbitrary values. The syntax is looking like as below,javascript\n new WeakMap([iterable]);Let's see the below example to explain it's behavior,javascript\n var ws = new WeakMap();\n var user = {};\n ws.set(user);\n ws.has(user); \/\/ true\n ws.delete(user); \/\/ removes user from the map\n ws.has(user); \/\/ false, user has been removed"},{"question":"What are the differences between WeakMap and Map","answer":"The main difference is that references to key objects in Map are strong while references to key objects in WeakMap\n are weak. i.e, A key object in WeakMap can be garbage collected if there is no other reference to it.\n Other differences are,\nMaps can store any key type Whereas WeakMaps can store only collections of key objects\nWeakMap does not have size property unlike Map\nWeakMap does not have methods such as clear, keys, values, entries, forEach.\nWeakMap is not iterable."},{"question":"List down the collection of methods available on WeakMap","answer":"Below are the list of methods available on WeakMap,\nset(key, value): Sets the value for the key in the WeakMap object. Returns the WeakMap object.\ndelete(key): Removes any value associated to the key.\nhas(key): Returns a Boolean asserting whether a value has been associated to the key in the WeakMap object or\n   not.\nget(key): Returns the value associated to the key, or undefined if there is none.\n   Let's see the functionality of all the above methods in an example,\njavascript\n var weakMapObject = new WeakMap();\n var firstObject = {};\n var secondObject = {};\n \/\/ set(key, value)\n weakMapObject.set(firstObject, \"John\");\n weakMapObject.set(secondObject, 100);\n console.log(weakMapObject.has(firstObject)); \/\/true\n console.log(weakMapObject.get(firstObject)); \/\/ John\n weakMapObject.delete(secondObject);"},{"question":"What is the purpose of uneval","answer":"The uneval() is an inbuilt function which is used to create a string representation of the source code of an\n Object. It is a top-level function and is not associated with any object. Let's see the below example to know more\n about it's functionality,javascript\n var a = 1;\n uneval(a); \/\/ returns a String containing 1\n uneval(function user() {}); \/\/ returns \"(function user(){})\""},{"question":"How do you encode an URL","answer":"The encodeURI() function is used to encode complete URI which has special characters except (, \/ ? : @ & = + $ #)\n characters.javascript\n var uri = \"https:\/\/mozilla.org\/?x=\u0448\u0435\u043b\u043b\u044b\";\n var encoded = encodeURI(uri);\n console.log(encoded); \/\/ https:\/\/mozilla.org\/?x=%D1%88%D0%B5%D0%BB%D0%BB%D1%8B"},{"question":"How do you decode an URL","answer":"The decodeURI() function is used to decode a Uniform Resource Identifier (URI) previously created by encodeURI().javascript\n var uri = \"https:\/\/mozilla.org\/?x=\u0448\u0435\u043b\u043b\u044b\";\n var encoded = encodeURI(uri);\n console.log(encoded); \/\/ https:\/\/mozilla.org\/?x=%D1%88%D0%B5%D0%BB%D0%BB%D1%8B\n try {\n   console.log(decodeURI(encoded)); \/\/ \"https:\/\/mozilla.org\/?x=\u0448\u0435\u043b\u043b\u044b\"\n } catch (e) {\n   \/\/ catches a malformed URI\n   console.error(e);\n }"},{"question":"How do you print the contents of web page","answer":"The window object provided a print() method which is used to print the contents of the current window. It opens a\n Print dialog box which lets you choose between various printing options. Let's see the usage of print method in an\n example,html\n <input type=\"button\" value=\"Print\" onclick=\"window.print()\" \/>Note: In most browsers, it will block while the print dialog is open."},{"question":"What is the difference between uneval and eval","answer":"The uneval function returns the source of a given object; whereas the eval function does the opposite, by\n evaluating that source code in a different memory area. Let's see an example to clarify the difference,javascript\n var msg = uneval(function greeting() {\n   return \"Hello, Good morning\";\n });\n var greeting = eval(msg);\n greeting(); \/\/ returns \"Hello, Good morning\""},{"question":"What is an anonymous function","answer":"An anonymous function is a function without a name! Anonymous functions are commonly assigned to a variable name or\n used as a callback function. The syntax would be as below,```javascript\n function (optionalParameters) {\n   \/\/do something\n }const myFunction = function(){ \/\/Anonymous function assigned to a variable\n   \/\/do something\n };[1, 2, 3].map(function(element){ \/\/Anonymous function used as a callback function\n   \/\/do something\n });\n ```Let's see the above anonymous function in an example,javascript\n var x = function (a, b) {\n   return a * b;\n };\n var z = x(5, 10);\n console.log(z); \/\/ 50"},{"question":"What is the precedence order between local and global variables","answer":"A local variable takes precedence over a global variable with the same name. Let's see this behavior in an example.javascript\n var msg = \"Good morning\";\n function greeting() {\n   msg = \"Good Evening\";\n   console.log(msg); \/\/ Good Evening\n }\n greeting();"},{"question":"What are javascript accessors","answer":"ECMAScript 5 introduced javascript object accessors or computed properties through getters and setters. Getters\n uses the get keyword whereas Setters uses the set keyword.javascript\n var user = {\n   firstName: \"John\",\n   lastName : \"Abraham\",\n   language : \"en\",\n   get lang() {\n     return this.language;\n   },\n   set lang(lang) {\n   this.language = lang;\n   }\n };\n console.log(user.lang); \/\/ getter access lang as en\n user.lang = 'fr';\n console.log(user.lang); \/\/ setter used to set lang as fr"},{"question":"How do you define property on Object constructor","answer":"The Object.defineProperty() static method is used to define a new property directly on an object, or modify an\n existing property on an object, and returns the object. Let's see an example to know how to define property,```javascript\n const newObject = {};Object.defineProperty(newObject, \"newProperty\", {\n   value: 100,\n   writable: false,\n });console.log(newObject.newProperty); \/\/ 100newObject.newProperty = 200; \/\/ It throws an error in strict mode due to writable setting\n ```"},{"question":"What is the difference between get and defineProperty","answer":"Both have similar results until unless you use classes. If you use get the property will be defined on the\n prototype of the object whereas using Object.defineProperty() the property will be defined on the instance it is\n applied to."},{"question":"What are the advantages of Getters and Setters","answer":"Below are the list of benefits of Getters and Setters,\nThey provide simpler syntax\nThey are used for defining computed properties, or accessors in JS.\nUseful to provide equivalence relation between properties and methods\nThey can provide better data quality\nUseful for doing things behind the scenes with the encapsulated logic."},{"question":"Can I add getters and setters using defineProperty method","answer":"Yes, You can use the Object.defineProperty() method to add Getters and Setters. For example, the below counter\n object uses increment, decrement, add and subtract properties,```javascript\n var obj = { counter: 0 };\/\/ Define getters\n Object.defineProperty(obj, \"increment\", {\n   get: function () {\n     this.counter++;\n   },\n });\n Object.defineProperty(obj, \"decrement\", {\n   get: function () {\n     this.counter--;\n   },\n });\/\/ Define setters\n Object.defineProperty(obj, \"add\", {\n   set: function (value) {\n     this.counter += value;\n   },\n });\n Object.defineProperty(obj, \"subtract\", {\n   set: function (value) {\n     this.counter -= value;\n   },\n });obj.add = 10;\n obj.subtract = 5;\n console.log(obj.increment); \/\/6\n console.log(obj.decrement); \/\/5\n ```"},{"question":"What is the purpose of switch-case","answer":"The switch case statement in JavaScript is used for decision making purposes. In a few cases, using the switch case\n statement is going to be more convenient than if-else statements. The syntax would be as below,javascript\n switch (expression)\n {\n     case value1:\n         statement1;\n         break;\n     case value2:\n         statement2;\n         break;\n     .\n     .\n     case valueN:\n         statementN;\n         break;\n     default:\n         statementDefault;\n }The above multi-way branch statement provides an easy way to dispatch execution to different parts of code based on\n the value of the expression."},{"question":"What are the conventions to be followed for the usage of switch case","answer":"Below are the list of conventions should be taken care,\nThe expression can be of type either number or string.\nDuplicate values are not allowed for the expression.\nThe default statement is optional. If the expression passed to switch does not match with any case value then the\n   statement within default case will be executed.\nThe break statement is used inside the switch to terminate a statement sequence.\nThe break statement is optional. But if it is omitted, the execution will continue on into the next case."},{"question":"What are primitive data types","answer":"A primitive data type is data that has a primitive value (which has no properties or methods). There are 7 types of\n primitive data types.\nstring\nnumber\nboolean\nnull\nundefined\nbigint\nsymbol"},{"question":"What are the different ways to access object properties","answer":"There are 3 possible ways for accessing the property of an object.\nDot notation: It uses dot for accessing the properties\njavascript\n objectName.property;\nSquare brackets notation: It uses square brackets for property access\njavascript\n objectName[\"property\"];\nExpression notation: It uses expression in the square brackets\njavascript\n objectName[expression];"},{"question":"What are the function parameter rules","answer":"JavaScript functions follow below rules for parameters,\nThe function definitions do not specify data types for parameters.\nDo not perform type checking on the passed arguments.\nDo not check the number of arguments received.\n   i.e, The below function follows the above rules,\njavascript\n function functionName(parameter1, parameter2, parameter3) {\n   console.log(parameter1); \/\/ 1\n }\n functionName(1);"},{"question":"What is an error object","answer":"An error object is a built in error object that provides error information when an error occurs. It has two\n properties: name and message. For example, the below function logs error details,javascript\n try {\n   greeting(\"Welcome\");\n } catch (err) {\n   console.log(err.name + \"<br>\" + err.message);\n }"},{"question":"When you get a syntax error","answer":"A SyntaxError is thrown if you try to evaluate code with a syntax error. For example, the below missing quote for\n the function parameter throws a syntax errorjavascript\n try {\n   eval(\"greeting('welcome)\"); \/\/ Missing ' will produce an error\n } catch (err) {\n   console.log(err.name);\n }"},{"question":"What are the different error names from error object","answer":"There are 6 different types of error names returned from error object,\n | Error Name | Description |\n |---- | ---------\n | EvalError | An error has occurred in the eval() function |\n | RangeError | An error has occurred with a number \"out of range\" |\n | ReferenceError | An error due to an illegal reference|\n | SyntaxError | An error due to a syntax error|\n | TypeError | An error due to a type error |\n | URIError | An error due to encodeURI() |"},{"question":"What are the various statements in error handling","answer":"Below are the list of statements used in an error handling,\ntry: This statement is used to test a block of code for errors\ncatch: This statement is used to handle the error\nthrow: This statement is used to create custom errors.\nfinally: This statement is used to execute code after try and catch regardless of the result."},{"question":"What are the two types of loops in javascript","answer":"Entry Controlled loops: In this kind of loop type, the test condition is tested before entering the loop\n   body. For example, For Loop and While Loop comes under this category.\nExit Controlled Loops: In this kind of loop type, the test condition is tested or evaluated at the end of the\n   loop body. i.e, the loop body will execute at least once irrespective of test condition true or false. For\n   example, do-while loop comes under this category."},{"question":"What is nodejs","answer":"Node.js is a server-side platform built on Chrome's JavaScript runtime for easily building fast and scalable\n network applications. It is an event-based, non-blocking, asynchronous I\/O runtime that uses Google's V8 JavaScript\n engine and libuv library."},{"question":"What is an Intl object","answer":"The Intl object is the namespace for the ECMAScript Internationalization API, which provides language sensitive\n string comparison, number formatting, and date and time formatting. It provides access to several constructors and\n language sensitive functions."},{"question":"How do you perform language specific date and time formatting","answer":"You can use the Intl.DateTimeFormat object which is a constructor for objects that enable language-sensitive date\n and time formatting. Let's see this behavior with an example,javascript\n var date = new Date(Date.UTC(2019, 07, 07, 3, 0, 0));\n console.log(new Intl.DateTimeFormat(\"en-GB\").format(date)); \/\/ 07\/08\/2019\n console.log(new Intl.DateTimeFormat(\"en-AU\").format(date)); \/\/ 07\/08\/2019"},{"question":"What is an Iterator","answer":"An iterator is an object which defines a sequence and a return value upon its termination. It implements the\n Iterator protocol with a next() method which returns an object with two properties: value (the next value in\n the sequence) and done (which is true if the last value in the sequence has been consumed)."},{"question":"How does synchronous iteration works","answer":"Synchronous iteration was introduced in ES6 and it works with below set of components,Iterable: It is an object which can be iterated over via a method whose key is Symbol.iterator.\n Iterator: It is an object returned by invoking [Symbol.iterator]() on an iterable. This iterator object wraps\n each iterated element in an object and returns it via next() method one by one.\n IteratorResult: It is an object returned by next() method. The object contains two properties; the value\n property contains an iterated element and the done property determines whether the element is the last element or\n not.Let's demonstrate synchronous iteration with an array as below,javascript\n const iterable = [\"one\", \"two\", \"three\"];\n const iterator = iterable[Symbol.iterator]();\n console.log(iterator.next()); \/\/ { value: 'one', done: false }\n console.log(iterator.next()); \/\/ { value: 'two', done: false }\n console.log(iterator.next()); \/\/ { value: 'three', done: false }\n console.log(iterator.next()); \/\/ { value: 'undefined, done: true }"},{"question":"What is an event loop","answer":"The event loop is a process that continuously monitors both the call stack and the event queue and checks whether\n or not the call stack is empty. If the call stack is empty and there are pending events in the event queue, the\n event loop dequeues the event from the event queue and pushes it to the call stack. The call stack executes the\n event, and any additional events generated during the execution are added to the end of the event queue.Note: The event loop allows Node.js to perform non-blocking I\/O operations, even though JavaScript is\n single-threaded, by offloading operations to the system kernel whenever possible. Since most modern kernels are\n multi-threaded, they can handle multiple operations executing in the background."},{"question":"What is call stack","answer":"Call Stack is a data structure for javascript interpreters to keep track of function calls(creates execution\n context) in the program. It has two major actions,\nWhenever you call a function for its execution, you are pushing it to the stack.\nWhenever the execution is completed, the function is popped out of the stack.\nLet's take an example and it's state representation in a diagram format```javascript\n function hungry() {\n   eatFruits();\n }\n function eatFruits() {\n   return \"I'm eating fruits\";\n }\/\/ Invoke the hungry function\n hungry();\n ```The above code processed in a call stack as below,\nAdd the hungry() function to the call stack list and execute the code.\nAdd the eatFruits() function to the call stack list and execute the code.\nDelete the eatFruits() function from our call stack list.\nDelete the hungry() function from the call stack list since there are no items anymore."},{"question":"What is an event queue","answer":"The event queue follows the queue data structure. It stores async callbacks to be added to the call stack. It is\n also known as the Callback Queue or Macrotask Queue.Whenever the call stack receives an async function, it is moved into the Web API. Based on the function, Web API\n executes it and awaits the result. Once it is finished, it moves the callback into the event queue (the callback of\n the promise is moved into the microtask queue).The event queue constantly checks whether or not the call stack is empty. Once the call stack is empty and there is\n a callback in the event queue, the event queue moves the callback into the call stack. If there is a callback in\n the microtask queue as well, it is moved first. The microtask queue has a higher priority than the event queue."},{"question":"What is a decorator","answer":"A decorator is an expression that evaluates to a function and that takes the target, name, and decorator descriptor\n as arguments. Also, it optionally returns a decorator descriptor to install on the target object. Let's define\n admin decorator for user class at design time,```javascript\n function admin(isAdmin) {\n    return function(target) {\n        target.isAdmin = isAdmin;\n    }\n }@admin(true)\n class User() {\n }\n console.log(User.isAdmin); \/\/true@admin(false)\n  class User() {\n  }\n  console.log(User.isAdmin); \/\/false\n ```"},{"question":"What are the properties of Intl object","answer":"Below are the list of properties available on Intl object,\nCollator: These are the objects that enable language-sensitive string comparison.\nDateTimeFormat: These are the objects that enable language-sensitive date and time formatting.\nListFormat: These are the objects that enable language-sensitive list formatting.\nNumberFormat: Objects that enable language-sensitive number formatting.\nPluralRules: Objects that enable plural-sensitive formatting and language-specific rules for plurals.\nRelativeTimeFormat: Objects that enable language-sensitive relative time formatting."},{"question":"What is an Unary operator","answer":"The unary(+) operator is used to convert a variable to a number.If the variable cannot be converted, it will still\n become a number but with the value NaN. Let's see this behavior in an action.```javascript\n var x = \"100\";\n var y = +x;\n console.log(typeof x, typeof y); \/\/ string, numbervar a = \"Hello\";\n var b = +a;\n console.log(typeof a, typeof b, b); \/\/ string, number, NaN\n ```"},{"question":"How do you sort elements in an array","answer":"The sort() method is used to sort the elements of an array in place and returns the sorted array. The example usage\n would be as below,javascript\n var months = [\"Aug\", \"Sep\", \"Jan\", \"June\"];\n months.sort();\n console.log(months); \/\/  [\"Aug\", \"Jan\", \"June\", \"Sep\"]"},{"question":"What is the purpose of compareFunction while sorting arrays","answer":"The compareFunction is used to define the sort order. If omitted, the array elements are converted to strings, then\n sorted according to each character's Unicode code point value. Let's take an example to see the usage of\n compareFunction,javascript\n let numbers = [1, 2, 5, 3, 4];\n numbers.sort((a, b) => b - a);\n console.log(numbers); \/\/ [5, 4, 3, 2, 1]"},{"question":"How do you reversing an array","answer":"You can use the reverse() method to reverse the elements in an array. This method is useful to sort an array in\n descending order. Let's see the usage of reverse() method in an example,javascript\n let numbers = [1, 2, 5, 3, 4];\n numbers.sort((a, b) => b - a);\n numbers.reverse();\n console.log(numbers); \/\/ [1, 2, 3, 4 ,5]"},{"question":"How do you find min and max value in an array","answer":"You can use Math.min and Math.max methods on array variables to find the minimum and maximum elements within an\n array. Let's create two functions to find the min and max value with in an array,```javascript\n var marks = [50, 20, 70, 60, 45, 30];\n function findMin(arr) {\n   return Math.min.apply(null, arr);\n }\n function findMax(arr) {\n   return Math.max.apply(null, arr);\n }console.log(findMin(marks));\n console.log(findMax(marks));\n ```"},{"question":"How do you find min and max values without Math functions","answer":"You can write functions which loop through an array comparing each value with the lowest value or highest value to\n find the min and max values. Let's create those functions to find min and max values,```javascript\n var marks = [50, 20, 70, 60, 45, 30];\n function findMin(arr) {\n   var length = arr.length;\n   var min = Infinity;\n   while (length--) {\n     if (arr[length] < min) {\n       min = arr[length];\n     }\n   }\n   return min;\n }function findMax(arr) {\n   var length = arr.length;\n   var max = -Infinity;\n   while (length--) {\n     if (arr[length] > max) {\n       max = arr[length];\n     }\n   }\n   return max;\n }console.log(findMin(marks));\n console.log(findMax(marks));\n ```"},{"question":"What is an empty statement and purpose of it","answer":"The empty statement is a semicolon (;) indicating that no statement will be executed, even if JavaScript syntax\n requires one. Since there is no action with an empty statement you might think that it's usage is quite less, but\n the empty statement is occasionally useful when you want to create a loop that has an empty body. For example, you\n can initialize an array with zero values as below,javascript\n \/\/ Initialize an array a\n for(let i=0; i < a.length; a[i++] = 0) ;"},{"question":"How do you get metadata of a module","answer":"You can use the import.meta object which is a meta-property exposing context-specific meta data to a JavaScript\n module. It contains information about the current module, such as the module's URL. In browsers, you might get\n different meta data than NodeJS.javascript\n <script type=\"module\" src=\"welcome-module.js\"><\/script>;\n console.log(import.meta); \/\/ { url: \"file:\/\/\/home\/user\/welcome-module.js\" }"},{"question":"What is a comma operator","answer":"The comma operator is used to evaluate each of its operands from left to right and returns the value of the last\n operand. This is totally different from comma usage within arrays, objects, and function arguments and parameters.\n For example, the usage for numeric expressions would be as below,```javascript\n var x = 1;\n x = (x++, x);console.log(x); \/\/ 2\n ```"},{"question":"What is the advantage of a comma operator","answer":"It is normally used to include multiple expressions in a location that requires a single expression. One of the\n common usages of this comma operator is to supply multiple parameters in a for loop. For example, the below for\n loop uses multiple expressions in a single location using comma operator,javascript\n for (var a = 0, b =10; a <= 10; a++, b--)You can also use the comma operator in a return statement where it processes before returning.javascript\n function myFunction() {\n   var a = 1;\n   return (a += 10), a; \/\/ 11\n }"},{"question":"What is typescript","answer":"TypeScript is a typed superset of JavaScript created by Microsoft that adds optional types, classes, async\/await,\n and many other features, and compiles to plain JavaScript. Angular built entirely in TypeScript and used as a\n primary language. You can install it globally asbash\n npm install -g typescriptLet's see a simple example of TypeScript usage,```typescript\n function greeting(name: string): string {\n   return \"Hello, \" + name;\n }let user = \"Sudheer\";console.log(greeting(user));\n ```The greeting method allows only string type as argument."},{"question":"What are the differences between javascript and typescript","answer":"Below are the list of differences between javascript and typescript,| feature             | typescript                            | javascript                                      |\n           | ------------------- | ------------------------------------- | ----------------------------------------------- |\n | Language paradigm   | Object oriented programming language  | Scripting language                              |\n | Typing support      | Supports static typing                | It has dynamic typing                           |\n | Modules             | Supported                             | Not supported                                   |\n | Interface           | It has interfaces concept             | Doesn't support interfaces                      |\n | Optional parameters | Functions support optional parameters | No support of optional parameters for functions |"},{"question":"What are the advantages of typescript over javascript","answer":"Below are some of the advantages of typescript over javascript,\nTypeScript is able to find compile time errors at the development time only and it makes sures less runtime\n   errors. Whereas javascript is an interpreted language.\nTypeScript is strongly-typed or supports static typing which allows for checking type correctness at compile\n   time. This is not available in javascript.\nTypeScript compiler can compile the .ts files into ES3,ES4 and ES5 unlike ES6 features of javascript which may\n   not be supported in some browsers."},{"question":"What is an object initializer","answer":"An object initializer is an expression that describes the initialization of an Object. The syntax for this\n expression is represented as a comma-delimited list of zero or more pairs of property names and associated values\n of an object, enclosed in curly braces ({}). This is also known as literal notation. It is one of the ways to\n create an object.```javascript\n var initObject = { a: \"John\", b: 50, c: {} };console.log(initObject.a); \/\/ John\n ```"},{"question":"What is a constructor method","answer":"The constructor method is a special method for creating and initializing an object created within a class. If you\n do not specify a constructor method, a default constructor is used. The example usage of constructor would be as\n below,```javascript\n class Employee {\n   constructor() {\n     this.name = \"John\";\n   }\n }var employeeObject = new Employee();console.log(employeeObject.name); \/\/ John\n ```"},{"question":"What happens if you write constructor more than once in a class","answer":"The \"constructor\" in a class is a special method and it should be defined only once in a class. i.e, If you write a\n constructor method more than once in a class it will throw a SyntaxError error.```javascript\n  class Employee {\n    constructor() {\n      this.name = \"John\";\n    }\n    constructor() {   \/\/  Uncaught SyntaxError: A class may only have one constructor\n      this.age = 30;\n    }\n  }var employeeObject = new Employee();console.log(employeeObject.name);\n ```"},{"question":"How do you call the constructor of a parent class","answer":"You can use the super keyword to call the constructor of a parent class. Remember that super() must be called\n before using 'this' reference. Otherwise it will cause a reference error. Let's the usage of it,```javascript\n class Square extends Rectangle {\n   constructor(length) {\n     super(length, length);\n     this.name = \"Square\";\n   }get area() {\n     return this.width * this.height;\n   }set area(value) {\n     this.area = value;\n   }\n }\n ```"},{"question":"How do you get the prototype of an object","answer":"You can use the Object.getPrototypeOf(obj) method to return the prototype of the specified object. i.e. The value\n of the internal prototype property. If there are no inherited properties then null value is returned.```javascript\n const newPrototype = {};\n const newObject = Object.create(newPrototype);console.log(Object.getPrototypeOf(newObject) === newPrototype); \/\/ true\n ```"},{"question":"What happens If I pass string type for getPrototype method","answer":"In ES5, it will throw a TypeError exception if the obj parameter isn't an object. Whereas in ES2015, the parameter\n will be coerced to an Object.javascript\n \/\/ ES5\n Object.getPrototypeOf(\"James\"); \/\/ TypeError: \"James\" is not an object\n \/\/ ES2015\n Object.getPrototypeOf(\"James\"); \/\/ String.prototype"},{"question":"How do you set prototype of one object to another","answer":"You can use the Object.setPrototypeOf() method that sets the prototype (i.e., the internal Prototype property)\n of a specified object to another object or null. For example, if you want to set prototype of a square object to\n rectangle object would be as follows,javascript\n Object.setPrototypeOf(Square.prototype, Rectangle.prototype);\n Object.setPrototypeOf({}, null);"},{"question":"How do you check whether an object can be extendable or not","answer":"The Object.isExtensible() method is used to determine if an object is extendable or not. i.e, Whether it can have\n new properties added to it or not.javascript\n const newObject = {};\n console.log(Object.isExtensible(newObject)); \/\/trueNote: By default, all the objects are extendable. i.e, The new properties can be added or modified."},{"question":"How do you prevent an object to extend","answer":"The Object.preventExtensions() method is used to prevent new properties from ever being added to an object. In\n other words, it prevents future extensions to the object. Let's see the usage of this property,```javascript\n const newObject = {};\n Object.preventExtensions(newObject); \/\/ NOT extendabletry {\n   Object.defineProperty(newObject, \"newProperty\", {\n     \/\/ Adding new property\n     value: 100,\n   });\n } catch (e) {\n   console.log(e); \/\/ TypeError: Cannot define property newProperty, object is not extensible\n }\n ```"},{"question":"What are the different ways to make an object non-extensible","answer":"You can mark an object non-extensible in 3 ways,\nObject.preventExtensions\nObject.seal\nObject.freeze\n```javascript\n var newObject = {};Object.preventExtensions(newObject); \/\/ Prevent objects are non-extensible\n Object.isExtensible(newObject); \/\/ falsevar sealedObject = Object.seal({}); \/\/ Sealed objects are non-extensible\n Object.isExtensible(sealedObject); \/\/ falsevar frozenObject = Object.freeze({}); \/\/ Frozen objects are non-extensible\n Object.isExtensible(frozenObject); \/\/ false\n ```"},{"question":"How do you define multiple properties on an object","answer":"The Object.defineProperties() method is used to define new or modify existing properties directly on an object\n and returning the object. Let's define multiple properties on an empty object,```javascript\n const newObject = {};Object.defineProperties(newObject, {\n   newProperty1: {\n     value: \"John\",\n     writable: true,\n   },\n   newProperty2: {},\n });\n ```"},{"question":"What is MEAN in javascript","answer":"The MEAN (MongoDB, Express, AngularJS, and Node.js) stack is the most popular open-source JavaScript software tech\n stack available for building dynamic web apps where you can write both the server-side and client-side halves of\n the web project entirely in JavaScript."},{"question":"What Is Obfuscation in javascript","answer":"Obfuscation is the deliberate act of creating obfuscated javascript code(i.e, source or machine code) that is\n difficult for humans to understand. It is something similar to encryption, but a machine can understand the code\n and execute it.\n Let's see the below function before Obfuscation,javascript\n function greeting() {\n   console.log(\"Hello, welcome to JS world\");\n }And after the code Obfuscation, it would be appeared as below,javascript\n eval(\n   (function (p, a, c, k, e, d) {\n     e = function (c) {\n       return c;\n     };\n     if (!\"\".replace(\/^\/, String)) {\n       while (c--) {\n         d[c] = k[c] || c;\n       }\n       k = [\n         function (e) {\n           return d[e];\n         },\n       ];\n       e = function () {\n         return \"\\\\w+\";\n       };\n       c = 1;\n     }\n     while (c--) {\n       if (k[c]) {\n         p = p.replace(new RegExp(\"\\\\b\" + e(c) + \"\\\\b\", \"g\"), k[c]);\n       }\n     }\n     return p;\n   })(\n     \"2 1(){0.3('4, 7 6 5 8')}\",\n     9,\n     9,\n     \"console|greeting|function|log|Hello|JS|to|welcome|world\".split(\"|\"),\n     0,\n     {}\n   )\n );"},{"question":"Why do you need Obfuscation","answer":"Below are the few reasons for Obfuscation,\nThe Code size will be reduced. So data transfers between server and client will be fast.\nIt hides the business logic from outside world and protects the code from others\nReverse engineering is highly difficult\nThe download time will be reduced"},{"question":"What is Minification","answer":"Minification is the process of removing all unnecessary characters(empty spaces are removed) and variables will be\n renamed without changing it's functionality. It is also a type of obfuscation ."},{"question":"What are the advantages of minification","answer":"Normally it is recommended to use minification for heavy traffic and intensive requirements of resources. It\n reduces file sizes with below benefits,\nDecreases loading times of a web page\nSaves bandwidth usages"},{"question":"What are the differences between Obfuscation and Encryption","answer":"Below are the main differences between Obfuscation and Encryption,| Feature            | Obfuscation                                     | Encryption                                                              |\n           | ------------------ | ----------------------------------------------- | ----------------------------------------------------------------------- |\n | Definition         | Changing the form of any data in any other form | Changing the form of information to an unreadable format by using a key |\n | A key to decode    | It can be decoded without any key               | It is required                                                          |\n | Target data format | It will be converted to a complex form          | Converted into an unreadable format                                     |"},{"question":"What are the common tools used for minification","answer":"There are many online\/offline tools to minify the javascript files,\nGoogle's Closure Compiler\nUglifyJS2\njsmin\njavascript-minifier.com\/\nprettydiff.com"},{"question":"How do you perform form validation using javascript","answer":"JavaScript can be used to perform HTML form validation. For example, if the form field is empty, the function needs\n to notify, and return false, to prevent the form being submitted.\n Lets' perform user login in an html form,html\n <form name=\"myForm\" onsubmit=\"return validateForm()\" method=\"post\">\n   User name: <input type=\"text\" name=\"uname\" \/>\n   <input type=\"submit\" value=\"Submit\" \/>\n <\/form>And the validation on user login is below,javascript\n function validateForm() {\n   var x = document.forms[\"myForm\"][\"uname\"].value;\n   if (x == \"\") {\n     alert(\"The username shouldn't be empty\");\n     return false;\n   }\n }"},{"question":"How do you perform form validation without javascript","answer":"You can perform HTML form validation automatically without using javascript. The validation enabled by applying\n the required attribute to prevent form submission when the input is empty.html\n <form method=\"post\">\n   <input type=\"text\" name=\"uname\" required \/>\n   <input type=\"submit\" value=\"Submit\" \/>\n <\/form>Note: Automatic form validation does not work in Internet Explorer 9 or earlier."},{"question":"What are the DOM methods available for constraint validation","answer":"The below DOM methods are available for constraint validation on an invalid input,\ncheckValidity(): It returns true if an input element contains valid data.\nsetCustomValidity(): It is used to set the validationMessage property of an input element.\n   Let's take an user login form with DOM validations\njavascript\n function myFunction() {\n   var userName = document.getElementById(\"uname\");\n   if (!userName.checkValidity()) {\n     document.getElementById(\"message\").innerHTML =\n       userName.validationMessage;\n   } else {\n     document.getElementById(\"message\").innerHTML =\n       \"Entered a valid username\";\n   }\n }"},{"question":"What are the available constraint validation DOM properties","answer":"Below are the list of some of the constraint validation DOM properties available,\nvalidity: It provides a list of boolean properties related to the validity of an input element.\nvalidationMessage: It displays the message when the validity is false.\nwillValidate: It indicates if an input element will be validated or not."},{"question":"What are the list of validity properties","answer":"The validity property of an input element provides a set of properties related to the validity of data.\ncustomError: It returns true, if a custom validity message is set.\npatternMismatch: It returns true, if an element's value does not match its pattern attribute.\nrangeOverflow: It returns true, if an element's value is greater than its max attribute.\nrangeUnderflow: It returns true, if an element's value is less than its min attribute.\nstepMismatch: It returns true, if an element's value is invalid according to step attribute.\ntooLong: It returns true, if an element's value exceeds its maxLength attribute.\ntypeMismatch: It returns true, if an element's value is invalid according to type attribute.\nvalueMissing: It returns true, if an element with a required attribute has no value.\nvalid: It returns true, if an element's value is valid."},{"question":"Give an example usage of rangeOverflow property","answer":"If an element's value is greater than its max attribute then rangeOverflow property returns true. For example, the\n below form submission throws an error if the value is more than 100,html\n <input id=\"age\" type=\"number\" max=\"100\" \/>\n <button onclick=\"myOverflowFunction()\">OK<\/button>javascript\n function myOverflowFunction() {\n   if (document.getElementById(\"age\").validity.rangeOverflow) {\n     alert(\"The mentioned age is not allowed\");\n   }\n }"},{"question":"Is enums feature available in javascript","answer":"No, javascript does not natively support enums. But there are different kinds of solutions to simulate them even\n though they may not provide exact equivalents. For example, you can use freeze or seal on object,javascript\n var DaysEnum = Object.freeze({\"monday\":1, \"tuesday\":2, \"wednesday\":3, ...})"},{"question":"What is an enum","answer":"An enum is a type restricting variables to one value from a predefined set of constants. JavaScript has no enums\n but typescript provides built-in enum support.javascript\n enum Color {\n  RED, GREEN, BLUE\n }"},{"question":"How do you list all properties of an object","answer":"You can use the Object.getOwnPropertyNames() method which returns an array of all properties found directly in a\n given object. Let's the usage of it in an example,```javascript\n const newObject = {\n   a: 1,\n   b: 2,\n   c: 3,\n };console.log(Object.getOwnPropertyNames(newObject));\n [\"a\", \"b\", \"c\"];\n ```"},{"question":"How do you get property descriptors of an object","answer":"You can use the Object.getOwnPropertyDescriptors() method which returns all own property descriptors of a given\n object. The example usage of this method is below,javascript\n const newObject = {\n   a: 1,\n   b: 2,\n   c: 3,\n };\n const descriptorsObject = Object.getOwnPropertyDescriptors(newObject);\n console.log(descriptorsObject.a.writable); \/\/true\n console.log(descriptorsObject.a.configurable); \/\/true\n console.log(descriptorsObject.a.enumerable); \/\/true\n console.log(descriptorsObject.a.value); \/\/ 1"},{"question":"What are the attributes provided by a property descriptor","answer":"A property descriptor is a record which has the following attributes\nvalue: The value associated with the property\nwritable: Determines whether the value associated with the property can be changed or not\nconfigurable: Returns true if the type of this property descriptor can be changed and if the property can be\n   deleted from the corresponding object.\nenumerable: Determines whether the property appears during enumeration of the properties on the corresponding\n   object or not.\nset: A function which serves as a setter for the property\nget: A function which serves as a getter for the property"},{"question":"How do you extend classes","answer":"The extends keyword is used in class declarations\/expressions to create a class which is a child of another\n class. It can be used to subclass custom classes as well as built-in objects. The syntax would be as below,javascript\n class ChildClass extends ParentClass { ... }Let's take an example of Square subclass from Polygon parent class,```javascript\n class Square extends Rectangle {\n   constructor(length) {\n     super(length, length);\n     this.name = \"Square\";\n   }get area() {\n     return this.width * this.height;\n   }set area(value) {\n     this.area = value;\n   }\n }\n ```"},{"question":"How do I modify the url without reloading the page","answer":"The window.location.href property will be helpful to modify the url but it reloads the page. HTML5 introduced\n the history.pushState() and history.replaceState() methods, which allow you to add and modify history entries,\n respectively. For example, you can use pushState as below,javascript\n window.history.pushState(\"page2\", \"Title\", \"\/page2.html\");"},{"question":"How do you check whether an array includes a particular value or not","answer":"The Array#includes() method is used to determine whether an array includes a particular value among its entries\n by returning either true or false. Let's see an example to find an element(numeric and string) within an array.```javascript\n var numericArray = [1, 2, 3, 4];\n console.log(numericArray.includes(3)); \/\/ truevar stringArray = [\"green\", \"yellow\", \"blue\"];\n console.log(stringArray.includes(\"blue\")); \/\/true\n ```"},{"question":"How do you compare scalar arrays","answer":"You can use length and every method of arrays to compare two scalar(compared directly using ===) arrays. The\n combination of these expressions can give the expected result,javascript\n const arrayFirst = [1, 2, 3, 4, 5];\n const arraySecond = [1, 2, 3, 4, 5];\n console.log(\n   arrayFirst.length === arraySecond.length &&\n     arrayFirst.every((value, index) => value === arraySecond[index])\n ); \/\/ trueIf you would like to compare arrays irrespective of order then you should sort them before,javascript\n const arrayFirst = [2, 3, 1, 4, 5];\n const arraySecond = [1, 2, 3, 4, 5];\n console.log(\n   arrayFirst.length === arraySecond.length &&\n     arrayFirst.sort().every((value, index) => value === arraySecond[index])\n ); \/\/true"},{"question":"How to get the value from get parameters","answer":"The new URL() object accepts the url string and searchParams property of this object can be used to access the\n get parameters. Remember that you may need to use polyfill or window.location to access the URL in older\n browsers(including IE).javascript\n let urlString = \"http:\/\/www.some-domain.com\/about.html?x=1&y=2&z=3\"; \/\/window.location.href\n let url = new URL(urlString);\n let parameterZ = url.searchParams.get(\"z\");\n console.log(parameterZ); \/\/ 3"},{"question":"How do you print numbers with commas as thousand separators","answer":"You can use the Number.prototype.toLocaleString() method which returns a string with a language-sensitive\n representation such as thousand separator,currency etc of this number.```javascript\n function convertToThousandFormat(x) {\n   return x.toLocaleString(); \/\/ 12,345.679\n }console.log(convertToThousandFormat(12345.6789));\n ```"},{"question":"What is the difference between java and javascript","answer":"Both are totally unrelated programming languages and no relation between them. Java is statically typed, compiled,\n runs on its own VM. Whereas Javascript is dynamically typed, interpreted, and runs in a browser and nodejs\n environments. Let's see the major differences in a tabular format,\n | Feature | Java | JavaScript |\n |---- | ---- | -----\n | Typed | It's a strongly typed language | It's a dynamic typed language |\n | Paradigm | Object oriented programming | Prototype based programming |\n | Scoping | Block scoped | Function-scoped |\n | Concurrency | Thread based | event based |\n | Memory | Uses more memory | Uses less memory. Hence it will be used for web pages |"},{"question":"Does JavaScript supports namespace","answer":"JavaScript doesn\u2019t support namespace by default. So if you create any element(function, method, object, variable)\n then it becomes global and pollutes the global namespace. Let's take an example of defining two functions without\n any namespace,javascript\n function func1() {\n   console.log(\"This is a first definition\");\n }\n function func1() {\n   console.log(\"This is a second definition\");\n }\n func1(); \/\/ This is a second definitionIt always calls the second function definition. In this case, namespace will solve the name collision problem."},{"question":"How do you declare namespace","answer":"Even though JavaScript lacks namespaces, we can use Objects , IIFE to create namespaces.\nUsing Object Literal Notation: Let's wrap variables and functions inside an Object literal which acts as a\n   namespace. After that you can access them using object notation\njavascript\n var namespaceOne = {\n    function func1() {\n        console.log(\"This is a first definition\");\n    }\n }\n var namespaceTwo = {\n      function func1() {\n          console.log(\"This is a second definition\");\n      }\n  }\n namespaceOne.func1(); \/\/ This is a first definition\n namespaceTwo.func1(); \/\/ This is a second definition\nUsing IIFE (Immediately invoked function expression): The outer pair of parentheses of IIFE creates a local\n   scope for all the code inside of it and makes the anonymous function a function expression. Due to that, you can\n   create the same function in two different function expressions to act as a namespace.\n```javascript\n (function () {\n   function fun1() {\n     console.log(\"This is a first definition\");\n   }\n   fun1();\n })();(function () {\n   function fun1() {\n     console.log(\"This is a second definition\");\n   }\n   fun1();\n })();\n ```\nUsing a block and a let\/const declaration: In ECMAScript 6, you can simply use a block and a let declaration\n   to restrict the scope of a variable to a block.\n```javascript\n {\n   let myFunction = function fun1() {\n     console.log(\"This is a first definition\");\n   };\n   myFunction();\n }\n \/\/myFunction(): ReferenceError: myFunction is not defined.{\n   let myFunction = function fun1() {\n     console.log(\"This is a second definition\");\n   };\n   myFunction();\n }\n \/\/myFunction(): ReferenceError: myFunction is not defined.\n ```"},{"question":"How do you invoke javascript code in an iframe from parent page","answer":"Initially iFrame needs to be accessed using either document.getElementBy or window.frames. After\n that contentWindow property of iFrame gives the access for targetFunctionjavascript\n document.getElementById(\"targetFrame\").contentWindow.targetFunction();\n window.frames[0].frameElement.contentWindow.targetFunction(); \/\/ Accessing iframe this way may not work in latest versions chrome and firefox"},{"question":"How do get the timezone offset from date","answer":"You can use the getTimezoneOffset method of the date object. This method returns the time zone difference, in\n minutes, from current locale (host system settings) to UTCjavascript\n var offset = new Date().getTimezoneOffset();\n console.log(offset); \/\/ -480"},{"question":"How do you load CSS and JS files dynamically","answer":"You can create both link and script elements in the DOM and append them as child to head tag. Let's create a\n function to add script and style resources as below,javascript\n function loadAssets(filename, filetype) {\n   if (filetype == \"css\") {\n     \/\/ External CSS file\n     var fileReference = document.createElement(\"link\");\n     fileReference.setAttribute(\"rel\", \"stylesheet\");\n     fileReference.setAttribute(\"type\", \"text\/css\");\n     fileReference.setAttribute(\"href\", filename);\n   } else if (filetype == \"js\") {\n     \/\/ External JavaScript file\n     var fileReference = document.createElement(\"script\");\n     fileReference.setAttribute(\"type\", \"text\/javascript\");\n     fileReference.setAttribute(\"src\", filename);\n   }\n   if (typeof fileReference != \"undefined\")\n     document.getElementsByTagName(\"head\")[0].appendChild(fileReference);\n }"},{"question":"What are the different methods to find HTML elements in DOM","answer":"If you want to access any element in an HTML page, you need to start with accessing the document object. Later you\n can use any of the below methods to find the HTML element,\ndocument.getElementById(id): It finds an element by Id\ndocument.getElementsByTagName(name): It finds an element by tag name\ndocument.getElementsByClassName(name): It finds an element by class name"},{"question":"What is jQuery","answer":"jQuery is a popular cross-browser JavaScript library that provides Document Object Model (DOM) traversal, event\n handling, animations and AJAX interactions by minimizing the discrepancies across browsers. It is widely famous\n with its philosophy of \u201cWrite less, do more\u201d. For example, you can display welcome message on the page load using\n jQuery as below,javascript\n $(document).ready(function () {\n   \/\/ It selects the document and apply the function on page load\n   alert(\"Welcome to jQuery world\");\n });Note: You can download it from jquery's official site or install it from CDNs, like google."},{"question":"What is V8 JavaScript engine","answer":"V8 is an open source high-performance JavaScript engine used by the Google Chrome browser, written in C++. It is\n also being used in the node.js project. It implements ECMAScript and WebAssembly, and runs on Windows 7 or later,\n macOS 10.12+, and Linux systems that use x64, IA-32, ARM, or MIPS processors.\n Note: It can run standalone, or can be embedded into any C++ application."},{"question":"Why do we call javascript as dynamic language","answer":"JavaScript is a loosely typed or a dynamic language because variables in JavaScript are not directly associated\n with any particular value type, and any variable can be assigned\/reassigned with values of all types.javascript\n let age = 50; \/\/ age is a number now\n age = \"old\"; \/\/ age is a string now\n age = true; \/\/ age is a boolean"},{"question":"What is a void operator","answer":"The void operator evaluates the given expression and then returns undefined(i.e, without returning value). The\n syntax would be as below,javascript\n void expression;\n void expression;Let's display a message without any redirection or reloadjavascript\n <a href=\"javascript:void(alert('Welcome to JS world'))\">\n   Click here to see a message\n <\/a>Note: This operator is often used to obtain the undefined primitive value, using \"void(0)\"."},{"question":"How to set the cursor to wait","answer":"The cursor can be set to wait in JavaScript by using the property \"cursor\". Let's perform this behavior on page\n load using the below function.javascript\n function myFunction() {\n   window.document.body.style.cursor = \"wait\";\n }and this function invoked on page loadhtml\n <body onload=\"myFunction()\"><\/body>"},{"question":"How do you create an infinite loop","answer":"You can create infinite loops using for and while loops without using any expressions. The for loop construct or\n syntax is better approach in terms of ESLint and code optimizer tools,javascript\n for (;;) {}\n while (true) {}"},{"question":"Why do you need to avoid with statement","answer":"JavaScript's with statement was intended to provide a shorthand for writing recurring accesses to objects. So it\n can help reduce file size by reducing the need to repeat a lengthy object reference without performance penalty.\n Let's take an example where it is used to avoid redundancy when accessing an object several times.javascript\n a.b.c.greeting = \"welcome\";\n a.b.c.age = 32;Using with it turns this into:javascript\n with (a.b.c) {\n   greeting = \"welcome\";\n   age = 32;\n }But this with statement creates performance problems since one cannot predict whether an argument will refer to a\n real variable or to a property inside the with argument."},{"question":"What is the output of below for loops","answer":"```javascript\n for (var i = 0; i < 4; i++) {\n   \/\/ global scope\n   setTimeout(() => console.log(i));\n }for (let i = 0; i < 4; i++) {\n   \/\/ block scope\n   setTimeout(() => console.log(i));\n }\n ```The output of the above for loops is 4 4 4 4 and 0 1 2 3Explanation: Due to the event queue\/loop of javascript, the setTimeout callback function is called after the\n loop has been executed. Since the variable i is declared with the var keyword it became a global variable and the\n value was equal to 4 using iteration when the time setTimeout function is invoked. Hence, the output of the first\n loop is 4 4 4 4.Whereas in the second loop, the variable i is declared as the let keyword it becomes a block scoped variable and\n it holds a new value(0, 1 ,2 3) for each iteration. Hence, the output of the first loop is 0 1 2 3."},{"question":"List down some of the features of ES6","answer":"Below are the list of some new features of ES6,\nSupport for constants or immutable variables\nBlock-scope support for variables, constants and functions\nArrow functions\nDefault parameters\nRest and Spread Parameters\nTemplate Literals\nMulti-line Strings\nDestructuring Assignment\nEnhanced Object Literals\nPromises\nClasses\nModules"},{"question":"What is ES6","answer":"ES6 is the sixth edition of the javascript language and it was released in June 2015. It was initially known as\n ECMAScript 6 (ES6) and later renamed to ECMAScript 2015. Almost all the modern browsers support ES6 but for the old\n browsers there are many transpilers, like Babel.js etc."},{"question":"Can I redeclare let and const variables","answer":"No, you cannot redeclare let and const variables. If you do, it throws below errorbash\n Uncaught SyntaxError: Identifier 'someVariable' has already been declaredExplanation: The variable declaration with var keyword refers to a function scope and the variable is treated\n as if it were declared at the top of the enclosing scope due to hoisting feature. So all the multiple declarations\n contributing to the same hoisted variable without any error. Let's take an example of re-declaring variables in the\n same scope for both var and let\/const variables.javascript\n var name = \"John\";\n function myFunc() {\n   var name = \"Nick\";\n   var name = \"Abraham\"; \/\/ Re-assigned in the same function block\n   alert(name); \/\/ Abraham\n }\n myFunc();\n alert(name); \/\/ JohnThe block-scoped multi-declaration throws syntax error,```javascript\n let name = \"John\";\n function myFunc() {\n   let name = \"Nick\";\n   let name = \"Abraham\"; \/\/ Uncaught SyntaxError: Identifier 'name' has already been declared\n   alert(name);\n }myFunc();\n alert(name);\n ```"},{"question":"Is const variable makes the value immutable","answer":"No, the const variable doesn't make the value immutable. But it disallows subsequent assignments(i.e, You can\n declare with assignment but can't assign another value later)javascript\n const userList = [];\n userList.push(\"John\"); \/\/ Can mutate even though it can't re-assign\n console.log(userList); \/\/ ['John']"},{"question":"What are default parameters","answer":"In E5, we need to depend on logical OR operators to handle default values of function parameters. Whereas in ES6,\n Default function parameters feature allows parameters to be initialized with default values if no value or\n undefined is passed. Let's compare the behavior with an examples,```javascript\n \/\/ES5\n var calculateArea = function (height, width) {\n   height = height || 50;\n   width = width || 60;return width * height;\n };\n console.log(calculateArea()); \/\/300\n ```The default parameters makes the initialization more simpler,```javascript\n \/\/ES6\n var calculateArea = function (height = 50, width = 60) {\n   return width * height;\n };console.log(calculateArea()); \/\/300\n ```"},{"question":"What are template literals","answer":"Template literals or template strings are string literals allowing embedded expressions. These are enclosed by the\n back-tick (`) character instead of double or single quotes.\n In E6, this feature enables using dynamic expressions as below,javascript\n var greeting = `Welcome to JS World, Mr. ${firstName} ${lastName}.`;In ES5, you need break string like below,javascript\n var greeting = 'Welcome to JS World, Mr. ' + firstName + ' ' + lastName.`Note: You can use multi-line strings and string interpolation features with template literals."},{"question":"How do you write multi-line strings in template literals","answer":"In ES5, you would have to use newline escape characters('\\n') and concatenation symbols(+) in order to get\n multi-line strings.javascript\n console.log(\"This is string sentence 1\\n\" + \"This is string sentence 2\");Whereas in ES6, You don't need to mention any newline sequence character,javascript\n console.log(`This is string sentence\n 'This is string sentence 2`);"},{"question":"What are nesting templates","answer":"The nesting template is a feature supported within template literals syntax to allow inner backticks inside a\n placeholder ${ } within the template. For example, the below nesting template is used to display the icons based on\n user permissions whereas outer template checks for platform type,javascript\n const iconStyles = `icon ${\n   isMobilePlatform()\n     ? \"\"\n     : `icon-${user.isAuthorized ? \"submit\" : \"disabled\"}`\n }`;You can write the above use case without nesting template features as well. However, the nesting template feature\n is more compact and readable.javascript\n \/\/Without nesting templates\n  const iconStyles = `icon ${ isMobilePlatform() ? '' :\n    user.isAuthorized ? 'icon-submit' : 'icon-disabled'}`;"},{"question":"What are tagged templates","answer":"Tagged templates are the advanced form of templates in which tags allow you to parse template literals with a\n function. The tag function accepts the first parameter as an array of strings and remaining parameters as\n expressions. This function can also return manipulated strings based on parameters. Let's see the usage of this\n tagged template behavior of an IT professional skill set in an organization,```javascript\n var user1 = \"John\";\n var skill1 = \"JavaScript\";\n var experience1 = 15;var user2 = \"Kane\";\n var skill2 = \"JavaScript\";\n var experience2 = 5;function myInfoTag(strings, userExp, experienceExp, skillExp) {\n   var str0 = strings[0]; \/\/ \"Mr\/Ms. \"\n   var str1 = strings[1]; \/\/ \" is a\/an \"\n   var str2 = strings[2]; \/\/ \"in\"var expertiseStr;\n   if (experienceExp > 10) {\n     expertiseStr = \"expert developer\";\n   } else if (skillExp > 5 && skillExp <= 10) {\n     expertiseStr = \"senior developer\";\n   } else {\n     expertiseStr = \"junior developer\";\n   }return ${str0}${userExp}${str1}${expertiseStr}${str2}${skillExp};\n }var output1 = myInfoTagMr\/Ms. ${user1} is a\/an ${experience1} in ${skill1};\n var output2 = myInfoTagMr\/Ms. ${user2} is a\/an ${experience2} in ${skill2};console.log(output1); \/\/ Mr\/Ms. John is a\/an expert developer in JavaScript\n console.log(output2); \/\/ Mr\/Ms. Kane is a\/an junior developer in JavaScript\n ```"},{"question":"What are raw strings","answer":"ES6 provides a raw strings feature using the String.raw() method which is used to get the raw string form of\n template strings. This feature allows you to access the raw strings as they were entered, without processing escape\n sequences. For example, the usage would be as below,javascript\n var calculationString = String.raw`The sum of numbers is \\n${\n   1 + 2 + 3 + 4\n }!`;\n console.log(calculationString); \/\/ The sum of numbers is 10If you don't use raw strings, the newline character sequence will be processed by displaying the output in multiple\n linesjavascript\n var calculationString = `The sum of numbers is \\n${1 + 2 + 3 + 4}!`;\n console.log(calculationString);\n \/\/ The sum of numbers is\n \/\/ 10Also, the raw property is available on the first argument to the tag functionjavascript\n function tag(strings) {\n   console.log(strings.raw[0]);\n }"},{"question":"What is destructuring assignment","answer":"The destructuring assignment is a JavaScript expression that makes it possible to unpack values from arrays or\n properties from objects into distinct variables.\n Let's get the month values from an array using destructuring assignment```javascript\n var [one, two, three] = [\"JAN\", \"FEB\", \"MARCH\"];console.log(one); \/\/ \"JAN\"\n console.log(two); \/\/ \"FEB\"\n console.log(three); \/\/ \"MARCH\"\n ```and you can get user properties of an object using destructuring assignment,```javascript\n var { name, age } = { name: \"John\", age: 32 };console.log(name); \/\/ John\n console.log(age); \/\/ 32\n ```"},{"question":"What are default values in destructuring assignment","answer":"A variable can be assigned a default value when the value unpacked from the array or object is undefined during\n destructuring assignment. It helps to avoid setting default values separately for each assignment. Let's take an\n example for both arrays and object use cases,Arrays destructuring:```javascript\n var x, y, z;[x = 2, y = 4, z = 6] = [10];\n console.log(x); \/\/ 10\n console.log(y); \/\/ 4\n console.log(z); \/\/ 6\n ```Objects destructuring:```javascript\n var { x = 2, y = 4, z = 6 } = { x: 10 };console.log(x); \/\/ 10\n console.log(y); \/\/ 4\n console.log(z); \/\/ 6\n ```"},{"question":"How do you swap variables in destructuring assignment","answer":"If you don't use destructuring assignment, swapping two values requires a temporary variable. Whereas using a\n destructuring feature, two variable values can be swapped in one destructuring expression. Let's swap two number\n variables in array destructuring assignment,```javascript\n var x = 10,\n   y = 20;[x, y] = [y, x];\n console.log(x); \/\/ 20\n console.log(y); \/\/ 10\n ```"},{"question":"What are enhanced object literals","answer":"Object literals make it easy to quickly create objects with properties inside the curly braces. For example, it\n provides shorter syntax for common object property definition as below.javascript\n \/\/ES6\n var x = 10,\n   y = 20;\n obj = { x, y };\n console.log(obj); \/\/ {x: 10, y:20}\n \/\/ES5\n var x = 10,\n   y = 20;\n obj = { x: x, y: y };\n console.log(obj); \/\/ {x: 10, y:20}"},{"question":"What are dynamic imports","answer":"The dynamic imports using import() function syntax allows us to load modules on demand by using promises or the\n async\/await syntax. Currently this feature is\n in stage4 proposal. The main advantage of dynamic imports is\n reduction of our bundle's sizes, the size\/payload response of our requests and overall improvements in the user\n experience.\n The syntax of dynamic imports would be as below,javascript\n import(\".\/Module\").then((Module) => Module.method());"},{"question":"What are the use cases for dynamic imports","answer":"Below are some of the use cases of using dynamic imports over static imports,\nImport a module on-demand or conditionally. For example, if you want to load a polyfill on legacy browser\njavascript\n if (isLegacyBrowser()) {\n     import(\u00b7\u00b7\u00b7)\n     .then(\u00b7\u00b7\u00b7);\n }\nCompute the module specifier at runtime. For example, you can use it for internationalization.\njavascript\n import(`messages_${getLocale()}.js`).then(\u00b7\u00b7\u00b7);\nImport a module from within a regular script instead a module."},{"question":"What are typed arrays","answer":"Typed arrays are array-like objects from ECMAScript 6 API for handling binary data. JavaScript provides 8 Typed\n array types,\nInt8Array: An array of 8-bit signed integers\nInt16Array: An array of 16-bit signed integers\nInt32Array: An array of 32-bit signed integers\nUint8Array: An array of 8-bit unsigned integers\nUint16Array: An array of 16-bit unsigned integers\nUint32Array: An array of 32-bit unsigned integers\nFloat32Array: An array of 32-bit floating point numbers\nFloat64Array: An array of 64-bit floating point numbers\nFor example, you can create an array of 8-bit signed integers as belowjavascript\n const a = new Int8Array();\n \/\/ You can pre-allocate n bytes\n const bytes = 1024;\n const a = new Int8Array(bytes);"},{"question":"What are the advantages of module loaders","answer":"The module loaders provides the below features,\nDynamic loading\nState isolation\nGlobal namespace isolation\nCompilation hooks\nNested virtualization"},{"question":"What is collation","answer":"Collation is used for sorting a set of strings and searching within a set of strings. It is parameterized by locale\n and aware of Unicode. Let's take comparison and sorting features,\nComparison:\njavascript\n var list = [\"\u00e4\", \"a\", \"z\"]; \/\/ In German,  \"\u00e4\" sorts with \"a\" Whereas in Swedish, \"\u00e4\" sorts after \"z\"\n var l10nDE = new Intl.Collator(\"de\");\n var l10nSV = new Intl.Collator(\"sv\");\n console.log(l10nDE.compare(\"\u00e4\", \"z\") === -1); \/\/ true\n console.log(l10nSV.compare(\"\u00e4\", \"z\") === +1); \/\/ true\nSorting:\njavascript\n var list = [\"\u00e4\", \"a\", \"z\"]; \/\/ In German,  \"\u00e4\" sorts with \"a\" Whereas in Swedish, \"\u00e4\" sorts after \"z\"\n var l10nDE = new Intl.Collator(\"de\");\n var l10nSV = new Intl.Collator(\"sv\");\n console.log(list.sort(l10nDE.compare)); \/\/ [ \"a\", \"\u00e4\", \"z\" ]\n console.log(list.sort(l10nSV.compare)); \/\/ [ \"a\", \"z\", \"\u00e4\" ]"},{"question":"What is for...of statement","answer":"The for...of statement creates a loop iterating over iterable objects or elements such as built-in String, Array,\n Array-like objects (like arguments or NodeList), TypedArray, Map, Set, and user-defined iterables. The basic usage\n of for...of statement on arrays would be as below,```javascript\n let arrayIterable = [10, 20, 30, 40, 50];for (let value of arrayIterable) {\n   value++;\n   console.log(value); \/\/ 11 21 31 41 51\n }\n ```"},{"question":"What is the output of below spread operator array","answer":"javascript\n [...\"John Resig\"];The output of the array is ['J', 'o', 'h', 'n', '', 'R', 'e', 's', 'i', 'g']\n Explanation: The string is an iterable type and the spread operator within an array maps every character of an\n iterable to one element. Hence, each character of a string becomes an element within an Array."},{"question":"Is PostMessage secure","answer":"Yes, postMessages can be considered very secure as long as the programmer\/developer is careful about checking the\n origin and source of an arriving message. But if you try to send\/receive a message without verifying its source\n will create cross-site scripting attacks."},{"question":"What are the problems with postmessage target origin as wildcard","answer":"The second argument of postMessage method specifies which origin is allowed to receive the message. If you use the\n wildcard \u201c*\u201d as an argument then any origin is allowed to receive the message. In this case, there is no way for\n the sender window to know if the target window is at the target origin when sending the message. If the target\n window has been navigated to another origin, the other origin would receive the data. Hence, this may lead to XSS\n vulnerabilities.javascript\n targetWindow.postMessage(message, \"*\");"},{"question":"How do you avoid receiving postMessages from attackers","answer":"Since the listener listens for any message, an attacker can trick the application by sending a message from the\n attacker\u2019s origin, which gives an impression that the receiver received the message from the actual sender\u2019s\n window. You can avoid this issue by validating the origin of the message on the receiver's end using the\n \u201cmessage.origin\u201d attribute. For examples, let's check the sender's\n origin http:\/\/www.some-sender.com on receiver\n side www.some-receiver.com,javascript\n \/\/Listener on http:\/\/www.some-receiver.com\/\n window.addEventListener(\"message\", function(message){\n     if(\/^http:\/\/www\\.some-sender\\.com$\/.test(message.origin)){\n          console.log('You received the data from valid sender', message.data);\n    }\n });"},{"question":"Can I avoid using postMessages completely","answer":"You cannot avoid using postMessages completely(or 100%). Even though your application doesn\u2019t use postMessage\n considering the risks, a lot of third party scripts use postMessage to communicate with the third party service. So\n your application might be using postMessage without your knowledge."},{"question":"Is postMessages synchronous","answer":"The postMessages are synchronous in IE8 browser but they are asynchronous in IE9 and all other modern browsers (\n i.e, IE9+, Firefox, Chrome, Safari).Due to this asynchronous behaviour, we use a callback mechanism when the\n postMessage is returned."},{"question":"What paradigm is Javascript","answer":"JavaScript is a multi-paradigm language, supporting imperative\/procedural programming, Object-Oriented Programming\n and functional programming. JavaScript supports Object-Oriented Programming with prototypical inheritance."},{"question":"What is the difference between internal and external javascript","answer":"Internal JavaScript: It is the source code within the script tag.\n External JavaScript: The source code is stored in an external file(stored with .js extension) and referred with\n in the tag."},{"question":"Is JavaScript faster than server side script","answer":"Yes, JavaScript is faster than server side script. Because JavaScript is a client-side script it does not require\n any web server\u2019s help for its computation or calculation. So JavaScript is always faster than any server-side\n script like ASP, PHP, etc."},{"question":"How do you get the status of a checkbox","answer":"You can apply the checked property on the selected checkbox in the DOM. If the value is true means the checkbox\n is checked otherwise it is unchecked. For example, the below HTML checkbox element can be access using javascript\n as below,html\n <input type=\"checkbox\" id=\"checkboxname\" value=\"Agree\" \/> Agree the\n conditions<br \/>javascript\n console.log(document.getElementById(\u2018checkboxname\u2019).checked); \/\/ true or false"},{"question":"What is the purpose of double tilde operator","answer":"The double tilde operator(~~) is known as double NOT bitwise operator. This operator is going to be a quicker\n substitute for Math.floor()."},{"question":"How do you convert character to ASCII code","answer":"You can use the String.prototype.charCodeAt() method to convert string characters to ASCII numbers. For example,\n let's find ASCII code for the first letter of 'ABC' string,javascript\n \"ABC\".charCodeAt(0); \/\/ returns 65Whereas String.fromCharCode() method converts numbers to equal ASCII characters.javascript\n String.fromCharCode(65, 66, 67); \/\/ returns 'ABC'"},{"question":"What is ArrayBuffer","answer":"An ArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer. You can create it as\n below,javascript\n let buffer = new ArrayBuffer(16); \/\/ create a buffer of length 16\n alert(buffer.byteLength); \/\/ 16To manipulate an ArrayBuffer, we need to use a \u201cview\u201d object.javascript\n \/\/Create a DataView referring to the buffer\n let view = new DataView(buffer);"},{"question":"What is the output of below string expression","answer":"javascript\n console.log(\"Welcome to JS world\"[0]);The output of the above expression is \"W\".\n Explanation: The bracket notation with specific index on a string returns the character at a specific location.\n Hence, it returns the character \"W\" of the string. Since this is not supported in IE7 and below versions, you may\n need to use the .charAt() method to get the desired result."},{"question":"What is the purpose of Error object","answer":"The Error constructor creates an error object and the instances of error objects are thrown when runtime errors\n occur. The Error object can also be used as a base object for user-defined exceptions. The syntax of error object\n would be as below,javascript\n new Error([message[, fileName[, lineNumber]]])You can throw user defined exceptions or errors using Error object in try...catch block as below,javascript\n try {\n   if (withdraw > balance)\n     throw new Error(\"Oops! You don't have enough balance\");\n } catch (e) {\n   console.log(e.name + \": \" + e.message);\n }"},{"question":"What is the purpose of EvalError object","answer":"The EvalError object indicates an error regarding the global eval() function. Even though this exception is not\n thrown by JavaScript anymore, the EvalError object remains for compatibility. The syntax of this expression would\n be as below,javascript\n new EvalError([message[, fileName[, lineNumber]]])You can throw EvalError with in try...catch block as below,javascript\n try {\n   throw new EvalError('Eval function error', 'someFile.js', 100);\n } catch (e) {\n   console.log(e.message, e.name, e.fileName);              \/\/ \"Eval function error\", \"EvalError\", \"someFile.js\""},{"question":"What are the list of cases error thrown from non-strict mode to strict mode","answer":"When you apply 'use strict'; syntax, some of the below cases will throw a SyntaxError before executing the script\nWhen you use Octal syntax\njavascript\n var n = 022;\nUsing with statement\nWhen you use delete operator on a variable name\nUsing eval or arguments as variable or function argument name\nWhen you use newly reserved keywords\nWhen you declare a function in a block\njavascript\n if (someCondition) {\n   function f() {}\n }Hence, the errors from above cases are helpful to avoid errors in development\/production environments."},{"question":"Do all objects have prototypes","answer":"No. All objects have prototypes except for the base object which is created by the user, or an object that is\n created using the new keyword."},{"question":"What is the difference between a parameter and an argument","answer":"Parameter is the variable name of a function definition whereas an argument represents the value given to a\n function when it is invoked. Let's explain this with a simple functionjavascript\n function myFunction(parameter1, parameter2, parameter3) {\n   console.log(arguments[0]); \/\/ \"argument1\"\n   console.log(arguments[1]); \/\/ \"argument2\"\n   console.log(arguments[2]); \/\/ \"argument3\"\n }\n myFunction(\"argument1\", \"argument2\", \"argument3\");"},{"question":"What is the purpose of some method in arrays","answer":"The some() method is used to test whether at least one element in the array passes the test implemented by the\n provided function. The method returns a boolean value. Let's take an example to test for any odd elements,```javascript\n var array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];var odd = (element) => element % 2 !== 0;console.log(array.some(odd)); \/\/ true (the odd element exists)\n ```"},{"question":"How do you combine two or more arrays","answer":"The concat() method is used to join two or more arrays by returning a new array containing all the elements. The\n syntax would be as below,javascript\n array1.concat(array2, array3, ..., arrayX)Let's take an example of array's concatenation with veggies and fruits arrays,javascript\n var veggies = [\"Tomato\", \"Carrot\", \"Cabbage\"];\n var fruits = [\"Apple\", \"Orange\", \"Pears\"];\n var veggiesAndFruits = veggies.concat(fruits);\n console.log(veggiesAndFruits); \/\/ Tomato, Carrot, Cabbage, Apple, Orange, Pears"},{"question":"What is the difference between Shallow and Deep copy","answer":"There are two ways to copy an object,Shallow Copy:\n Shallow copy is a bitwise copy of an object. A new object is created that has an exact copy of the values in the\n original object. If any of the fields of the object are references to other objects, just the reference addresses\n are copied i.e., only the memory address is copied.Examplejavascript\n var empDetails = {\n   name: \"John\",\n   age: 25,\n   expertise: \"Software Developer\",\n };to create a duplicatejavascript\n var empDetailsShallowCopy = empDetails; \/\/Shallow copying!if we change some property value in the duplicate one like this:javascript\n empDetailsShallowCopy.name = \"Johnson\";The above statement will also change the name of empDetails, since we have a shallow copy. That means we're\n losing the original data as well.Deep copy:\n A deep copy copies all fields, and makes copies of dynamically allocated memory pointed to by the fields. A deep\n copy occurs when an object is copied along with the objects to which it refers.Examplejavascript\n var empDetails = {\n   name: \"John\",\n   age: 25,\n   expertise: \"Software Developer\",\n };Create a deep copy by using the properties from the original object into new variablejavascript\n var empDetailsDeepCopy = {\n   name: empDetails.name,\n   age: empDetails.age,\n   expertise: empDetails.expertise,\n };Now if you change empDetailsDeepCopy.name, it will only affect empDetailsDeepCopy & not empDetails"},{"question":"How do you create specific number of copies of a string","answer":"The repeat() method is used to construct and return a new string which contains the specified number of copies of\n the string on which it was called, concatenated together. Remember that this method has been added to the\n ECMAScript 2015 specification.\n Let's take an example of Hello string to repeat it 4 times,javascript\n \"Hello\".repeat(4); \/\/ 'HelloHelloHelloHello'"},{"question":"How do you return all matching strings against a regular expression","answer":"The matchAll() method can be used to return an iterator of all results matching a string against a regular\n expression. For example, the below example returns an array of matching string results against a regular\n expression,```javascript\n let regexp = \/Hello(\\d?))\/g;\n let greeting = \"Hello1Hello2Hello3\";let greetingList = [...greeting.matchAll(regexp)];console.log(greetingList[0]); \/\/Hello1\n console.log(greetingList[1]); \/\/Hello2\n console.log(greetingList[2]); \/\/Hello3\n ```"},{"question":"How do you trim a string at the beginning or ending","answer":"The trim method of string prototype is used to trim on both sides of a string. But if you want to trim especially\n at the beginning or ending of the string then you can use trimStart\/trimLeft and trimEnd\/trimRight methods.\n Let's see an example of these methods on a greeting message,```javascript\n var greeting = \"   Hello, Goodmorning!   \";console.log(greeting); \/\/ \"   Hello, Goodmorning!   \"\n console.log(greeting.trimStart()); \/\/ \"Hello, Goodmorning!   \"\n console.log(greeting.trimLeft()); \/\/ \"Hello, Goodmorning!   \"console.log(greeting.trimEnd()); \/\/ \"   Hello, Goodmorning!\"\n console.log(greeting.trimRight()); \/\/ \"   Hello, Goodmorning!\"\n ```"},{"question":"What is the output of below console statement with unary operator","answer":"Let's take console statement with unary operator as given below,javascript\n console.log(+\"Hello\");The output of the above console log statement returns NaN. Because the element is prefixed by the unary operator\n and the JavaScript interpreter will try to convert that element into a number type. Since the conversion fails, the\n value of the statement results in NaN value."},{"question":"Does javascript uses mixins","answer":"Mixin is a generic object-oriented programming term - is a class containing methods that can be used by other\n classes without a need to inherit from it. In JavaScript we can only inherit from a single object. ie. There can be\n only one [[prototype]] for an object.But sometimes we require to extend more than one, to overcome this we can use Mixin which helps to copy methods to\n the prototype of another class.Say for instance, we've two classes User and CleanRoom. Suppose we need to add CleanRoom functionality\n to User, so that user can clean the room at demand. Here's where concept called mixins comes into picture.``javascript\n \/\/ mixin\n let cleanRoomMixin = {\n   cleanRoom() {\n     alert(Hello ${this.name}, your room is clean now);\n   },\n   sayBye() {\n     alert(Bye ${this.name}`);\n   },\n };\/\/ usage:\n class User {\n   constructor(name) {\n     this.name = name;\n   }\n }\/\/ copy the methods\n Object.assign(User.prototype, cleanRoomMixin);\/\/ now User can clean the room\n new User(\"Dude\").cleanRoom(); \/\/ Hello Dude, your room is clean now!\n ```"},{"question":"What is a thunk function","answer":"A thunk is just a function which delays the evaluation of the value. It doesn\u2019t take any arguments but gives the\n value whenever you invoke the thunk. i.e, It is used not to execute now but it will be sometime in the future.\n Let's take a synchronous example,```javascript\n const add = (x, y) => x + y;const thunk = () => add(2, 3);thunk(); \/\/ 5\n ```"},{"question":"What are asynchronous thunks","answer":"The asynchronous thunks are useful to make network requests. Let's see an example of network requests,```javascript\n function fetchData(fn) {\n   fetch(\"https:\/\/jsonplaceholder.typicode.com\/todos\/1\")\n     .then((response) => response.json())\n     .then((json) => fn(json));\n }const asyncThunk = function () {\n   return fetchData(function getData(data) {\n     console.log(data);\n   });\n };asyncThunk();\n ```The getData function won't be called immediately but it will be invoked only when the data is available from API\n endpoint. The setTimeout function is also used to make our code asynchronous. The best real time example is redux\n state management library which uses the asynchronous thunks to delay the actions to dispatch."},{"question":"What is the output of below function calls","answer":"Code snippet:javascript\n const circle = {\n   radius: 20,\n   diameter() {\n     return this.radius * 2;\n   },\n   perimeter: () => 2 * Math.PI * this.radius,\n };javascript\n console.log(circle.diameter());\n console.log(circle.perimeter());Output:The output is 40 and NaN. Remember that diameter is a regular function, whereas the value of perimeter is an arrow\n function. The this keyword of a regular function(i.e, diameter) refers to the surrounding scope which is a class(\n i.e, Shape object). Whereas this keyword of perimeter function refers to the surrounding scope which is a window\n object. Since there is no radius property on window objects it returns an undefined value and the multiple of\n number value returns NaN value."},{"question":"How to remove all line breaks from a string","answer":"The easiest approach is using regular expressions to detect and replace newlines in the string. In this case, we\n use replace function along with string to replace with, which in our case is an empty string.javascript\n function remove_linebreaks( var message ) {\n     return message.replace( \/[\\r\\n]+\/gm, \"\" );\n }In the above expression, g and m are for global and multiline flags."},{"question":"What is the difference between reflow and repaint","answer":"A repaint occurs when changes are made which affect the visibility of an element, but not its layout. Examples of\n this include outline, visibility, or background color. A reflow involves changes that affect the layout of a\n portion of the page (or the whole page). Resizing the browser window, changing the font, content changing (such as\n user typing text), using JavaScript methods involving computed styles, adding or removing elements from the DOM,\n and changing an element's classes are a few of the things that can trigger reflow. Reflow of an element causes the\n subsequent reflow of all child and ancestor elements as well as any elements following it in the DOM."},{"question":"What happens with negating an array","answer":"Negating an array with ! character will coerce the array into a boolean. Since Arrays are considered to be truthy\n So negating it will return false.javascript\n console.log(![]); \/\/ false"},{"question":"What happens if we add two arrays","answer":"If you add two arrays together, it will convert them both to strings and concatenate them. For example, the result\n of adding arrays would be as below,javascript\n console.log([\"a\"] + [\"b\"]); \/\/ \"ab\"\n console.log([] + []); \/\/ \"\"\n console.log(![] + []); \/\/ \"false\", because ![] returns false."},{"question":"What is the output of prepend additive operator on falsy values","answer":"If you prepend the additive(+) operator on falsy values(null, undefined, NaN, false, \"\"), the falsy value converts\n to a number value zero. Let's display them on browser console as below,javascript\n console.log(+null); \/\/ 0\n console.log(+undefined); \/\/ NaN\n console.log(+false); \/\/ 0\n console.log(+NaN); \/\/ NaN\n console.log(+\"\"); \/\/ 0"},{"question":"How do you create self string using special characters","answer":"The self string can be formed with the combination of []()!+ characters. You need to remember the below\n conventions to achieve this pattern.\nSince Arrays are truthful values, negating the arrays will produce false: ![] === false\nAs per JavaScript coercion rules, the addition of arrays together will toString them: [] + [] === \"\"\nPrepend an array with + operator will convert an array to false, the negation will make it true and finally\n   converting the result will produce value '1': +(!(+[])) === 1\nBy applying the above rules, we can derive below conditionsjavascript\n (![] + [] === \"false\" + !+[]) === 1;Now the character pattern would be created as below,```javascript\n       s               e               l               f\n  ^^^^^^^^^^^^^   ^^^^^^^^^^^^^   ^^^^^^^^^^^^^   ^^^^^^^^^^^^^(![] + [])[3] + (![] + [])[4] + (![] + [])[2] + (![] + [])[0]\n  ^^^^^^^^^^^^^   ^^^^^^^^^^^^^   ^^^^^^^^^^^^^   ^^^^^^^^^^^^^\n (![] + [])[+!+[]+!+[]+!+[]] +\n (![] + [])[+!+[]+!+[]+!+[]+!+[]] +\n (![] + [])[+!+[]+!+[]] +\n (![] + [])[+[]]\n ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n (![]+[])[+!+[]+!+[]+!+[]]+(![]+[])[+!+[]+!+[]+!+[]+!+[]]+(![]+[])[+!+[]+!+[]]+(![]+[])[+[]]\n ```"},{"question":"How do you remove falsy values from an array","answer":"You can apply the filter method on the array by passing Boolean as a parameter. This way it removes all falsy\n values(0, undefined, null, false and \"\") from the array.javascript\n const myArray = [false, null, 1, 5, undefined];\n myArray.filter(Boolean); \/\/ [1, 5] \/\/ is same as myArray.filter(x => x);"},{"question":"How do you get unique values of an array","answer":"You can get unique values of an array with the combination of Set and rest expression\/spread(...) syntax.javascript\n console.log([...new Set([1, 2, 4, 4, 3])]); \/\/ [1, 2, 4, 3]"},{"question":"What is destructuring aliases","answer":"Sometimes you would like to have a destructured variable with a different name than the property name. In that\n case, you'll use a : newName to specify a name for the variable. This process is called destructuring aliases.javascript\n const obj = { x: 1 };\n \/\/ Grabs obj.x as as { otherName }\n const { x: otherName } = obj;"},{"question":"How do you map the array values without using map method","answer":"You can map the array values without using the map method by just using the from method of Array. Let's map\n city names from Countries array,```javascript\n const countries = [\n   { name: \"India\", capital: \"Delhi\" },\n   { name: \"US\", capital: \"Washington\" },\n   { name: \"Russia\", capital: \"Moscow\" },\n   { name: \"Singapore\", capital: \"Singapore\" },\n   { name: \"China\", capital: \"Beijing\" },\n   { name: \"France\", capital: \"Paris\" },\n ];const cityNames = Array.from(countries, ({ capital }) => capital);\n console.log(cityNames); \/\/ ['Delhi, 'Washington', 'Moscow', 'Singapore', 'Beijing', 'Paris']\n ```"},{"question":"How do you empty an array","answer":"You can empty an array quickly by setting the array length to zero.javascript\n let cities = [\"Singapore\", \"Delhi\", \"London\"];\n cities.length = 0; \/\/ cities becomes []"},{"question":"How do you rounding numbers to certain decimals","answer":"You can round numbers to a certain number of decimals using toFixed method from native javascript.javascript\n let pie = 3.141592653;\n pie = pie.toFixed(3); \/\/ 3.142"},{"question":"What is the easiest way to convert an array to an object","answer":"You can convert an array to an object with the same data using spread(...) operator.javascript\n var fruits = [\"banana\", \"apple\", \"orange\", \"watermelon\"];\n var fruitsObject = { ...fruits };\n console.log(fruitsObject); \/\/ {0: \"banana\", 1: \"apple\", 2: \"orange\", 3: \"watermelon\"}"},{"question":"How do you create an array with some data","answer":"You can create an array with some data or an array with the same values using fill method.javascript\n var newArray = new Array(5).fill(\"0\");\n console.log(newArray); \/\/ [\"0\", \"0\", \"0\", \"0\", \"0\"]"},{"question":"What are the placeholders from console object","answer":"Below are the list of placeholders available from console object,\n%o \u2014 It takes an object,\n%s \u2014 It takes a string,\n%d \u2014 It is used for a decimal or integer\n   These placeholders can be represented in the console.log as below\njavascript\n const user = { name: \"John\", id: 1, city: \"Delhi\" };\n console.log(\n   \"Hello %s, your details %o are available in the object form\",\n   \"John\",\n   user\n ); \/\/ Hello John, your details {name: \"John\", id: 1, city: \"Delhi\"} are available in object"},{"question":"Is it possible to add CSS to console messages","answer":"Yes, you can apply CSS styles to console messages similar to html text on the web page.javascript\n console.log(\n   \"%c The text has blue color, with large font and red background\",\n   \"color: blue; font-size: x-large; background: red\"\n );The text will be displayed as below,Note: All CSS styles can be applied to console messages."},{"question":"What is the purpose of dir method of console object","answer":"The console.dir() is used to display an interactive list of the properties of the specified JavaScript object as\n JSON.javascript\n const user = { name: \"John\", id: 1, city: \"Delhi\" };\n console.dir(user);The user object displayed in JSON representation"},{"question":"Is it possible to debug HTML elements in console","answer":"Yes, it is possible to get and debug HTML elements in the console just like inspecting elements.javascript\n const element = document.getElementsByTagName(\"body\")[0];\n console.log(element);It prints the HTML element in the console,"},{"question":"How do you display data in a tabular format using console object","answer":"The console.table() is used to display data in the console in a tabular format to visualize complex arrays or\n objects.js\n const users = [\n   { name: \"John\", id: 1, city: \"Delhi\" },\n   { name: \"Max\", id: 2, city: \"London\" },\n   { name: \"Rod\", id: 3, city: \"Paris\" },\n ];\n console.table(users);The data visualized in a table format,  **Not:** Remember that `console.table()` is not supported in IE."},{"question":"How do you verify that an argument is a Number or not","answer":"The combination of IsNaN and isFinite methods are used to confirm whether an argument is a number or not.javascript\n function isNumber(n) {\n   return !isNaN(parseFloat(n)) && isFinite(n);\n }"},{"question":"How do you create copy to clipboard button","answer":"You need to select the content(using .select() method) of the input element and execute the copy command with\n execCommand (i.e, execCommand('copy')). You can also execute other system commands like cut and paste.javascript\n document.querySelector(\"#copy-button\").onclick = function () {\n   \/\/ Select the content\n   document.querySelector(\"#copy-input\").select();\n   \/\/ Copy to the clipboard\n   document.execCommand(\"copy\");\n };"},{"question":"What is the shortcut to get timestamp","answer":"You can use new Date().getTime() to get the current timestamp. There is an alternative shortcut to get the value.javascript\n console.log(+new Date());\n console.log(Date.now());"},{"question":"How do you flattening multi dimensional arrays","answer":"Flattening bi-dimensional arrays is trivial with Spread operator.javascript\n const biDimensionalArr = [11, [22, 33], [44, 55], [66, 77], 88, 99];\n const flattenArr = [].concat(...biDimensionalArr); \/\/ [11, 22, 33, 44, 55, 66, 77, 88, 99]But you can make it work with multi-dimensional arrays by recursive calls,javascript\n function flattenMultiArray(arr) {\n   const flattened = [].concat(...arr);\n   return flattened.some((item) => Array.isArray(item))\n     ? flattenMultiArray(flattened)\n     : flattened;\n }\n const multiDimensionalArr = [11, [22, 33], [44, [55, 66, [77, [88]], 99]]];\n const flatArr = flattenMultiArray(multiDimensionalArr); \/\/ [11, 22, 33, 44, 55, 66, 77, 88, 99]Also you can use the flat method of Array.```javascript\n const arr = [1, [2,3], 4, 5, [6,7]];\n const fllattenArr = arr.flat(); \/\/ [1, 2, 3, 4, 5, 6, 7]\/\/ And for multiDemensional arrays\n const multiDimensionalArr = [11, [22, 33], [44, [55, 66, [77, [88]], 99]]];\n const oneStepFlat = multiDimensionalArr.flat(1); \/\/ [11, 22, 33, 44, [55, 66, [77, [88]], 99]]\n const towStep = multiDimensionalArr.flat(2); \/\/ [11, 22, 33, 44, 55, 66, [77, [88]], 99]\n const fullyFlatArray = multiDimensionalArr.flat(Infinity); \/\/ [11, 22, 33, 44, 55, 66, 77, 88, 99]\n ```"},{"question":"What is the easiest multi condition checking","answer":"You can use indexOf to compare input with multiple values instead of checking each value as one condition.javascript\n \/\/ Verbose approach\n if (\n   input === \"first\" ||\n   input === 1 ||\n   input === \"second\" ||\n   input === 2\n ) {\n   someFunction();\n }\n \/\/ Shortcut\n if ([\"first\", 1, \"second\", 2].indexOf(input) !== -1) {\n   someFunction();\n }"},{"question":"How do you capture browser back button","answer":"The window.onbeforeunload method is used to capture browser back button events. This is helpful to warn users\n about losing the current data.javascript\n window.onbeforeunload = function () {\n   alert(\"You work will be lost\");\n };"},{"question":"How do you disable right click in the web page","answer":"The right click on the page can be disabled by returning false from the oncontextmenu attribute on the body\n element.html\n <body oncontextmenu=\"return false;\"><\/body>"},{"question":"What are wrapper objects","answer":"Primitive Values like string,number and boolean don't have properties and methods but they are temporarily\n converted or coerced to an object(Wrapper object) when you try to perform actions on them. For example, if you\n apply toUpperCase() method on a primitive string value, it does not throw an error but returns uppercase of the\n string.```javascript\n let name = \"john\";console.log(name.toUpperCase()); \/\/ Behind the scenes treated as console.log(new String(name).toUpperCase());\n ```i.e, Every primitive except null and undefined have Wrapper Objects and the list of wrapper objects are\n String,Number,Boolean,Symbol and BigInt."},{"question":"What is AJAX","answer":"AJAX stands for Asynchronous JavaScript and XML and it is a group of related technologies(HTML, CSS, JavaScript,\n XMLHttpRequest API etc) used to display data asynchronously. i.e. We can send data to the server and get data from\n the server without reloading the web page."},{"question":"What are the different ways to deal with Asynchronous Code","answer":"Below are the list of different ways to deal with Asynchronous code.\nCallbacks\nPromises\nAsync\/await\nThird-party libraries such as async.js,bluebird etc"},{"question":"How to cancel a fetch request","answer":"Until a few days back, One shortcoming of native promises is no direct way to cancel a fetch request. But the\n new AbortController from js specification allows you to use a signal to abort one or multiple fetch calls.\n The basic flow of cancelling a fetch request would be as below,\nCreate an AbortController instance\nGet the signal property of an instance and pass the signal as a fetch option for signal\nCall the AbortController's abort property to cancel all fetches that use that signal\n   For example, let's pass the same signal to multiple fetch calls will cancel all requests with that signal,\n```javascript\n const controller = new AbortController();\n const { signal } = controller;fetch(\"http:\/\/localhost:8000\", { signal })\n   .then((response) => {\n     console.log(Request 1 is complete!);\n   })\n   .catch((e) => {\n     if (e.name === \"AbortError\") {\n       \/\/ We know it's been canceled!\n     }\n   });fetch(\"http:\/\/localhost:8000\", { signal })\n   .then((response) => {\n     console.log(Request 2 is complete!);\n   })\n   .catch((e) => {\n     if (e.name === \"AbortError\") {\n       \/\/ We know it's been canceled!\n     }\n   });\/\/ Wait 2 seconds to abort both requests\n setTimeout(() => controller.abort(), 2000);\n ```"},{"question":"What is web speech API","answer":"Web speech API is used to enable modern browsers recognize and synthesize speech(i.e, voice data into web apps).\n This API has been introduced by W3C Community in the year 2012. It has two main parts,\nSpeechRecognition (Asynchronous Speech Recognition or Speech-to-Text): It provides the ability to recognize\n   voice context from an audio input and respond accordingly. This is accessed by the SpeechRecognition interface.\n   The below example shows on how to use this API to get text from speech,\njavascript\n window.SpeechRecognition =\n   window.webkitSpeechRecognition || window.SpeechRecognition; \/\/ webkitSpeechRecognition for Chrome and SpeechRecognition for FF\n const recognition = new window.SpeechRecognition();\n recognition.onresult = (event) => {\n   \/\/ SpeechRecognitionEvent type\n   const speechToText = event.results[0][0].transcript;\n   console.log(speechToText);\n };\n recognition.start();In this API, browser is going to ask you for permission to use your microphone\nSpeechSynthesis (Text-to-Speech): It provides the ability to recognize voice context from an audio input and\n   respond. This is accessed by the SpeechSynthesis interface.\n   For example, the below code is used to get voice\/speech from text,\njavascript\n if (\"speechSynthesis\" in window) {\n   var speech = new SpeechSynthesisUtterance(\"Hello World!\");\n   speech.lang = \"en-US\";\n   window.speechSynthesis.speak(speech);\n }The above examples can be tested on chrome(33+) browser's developer console.\n Note: This API is still a working draft and only available in Chrome and Firefox browsers(ofcourse Chrome only\n implemented the specification)"},{"question":"What is minimum timeout throttling","answer":"Both browser and NodeJS javascript environments throttles with a minimum delay that is greater than 0ms. That means\n even though setting a delay of 0ms will not happen instantaneously.\n Browsers: They have a minimum delay of 4ms. This throttle occurs when successive calls are triggered due to\n callback nesting(certain depth) or after a certain number of successive intervals.\n Note: The older browsers have a minimum delay of 10ms.\n Nodejs: They have a minimum delay of 1ms. This throttle happens when the delay is larger than 2147483647 or\n less than 1.\n The best example to explain this timeout throttling behavior is the order of below code snippet.javascript\n function runMeFirst() {\n   console.log(\"My script is initialized\");\n }\n setTimeout(runMeFirst, 0);\n console.log(\"Script loaded\");and the output would be incmd\n Script loaded\n My script is initializedIf you don't use setTimeout, the order of logs will be sequential.javascript\n function runMeFirst() {\n   console.log(\"My script is initialized\");\n }\n runMeFirst();\n console.log(\"Script loaded\");and the output is,cmd\n My script is initialized\n Script loaded"},{"question":"How do you implement zero timeout in modern browsers","answer":"You can't use setTimeout(fn, 0) to execute the code immediately due to minimum delay of greater than 0ms. But you\n can use window.postMessage() to achieve this behavior."},{"question":"What are tasks in event loop","answer":"A task is any javascript code\/program which is scheduled to be run by the standard mechanisms such as initially\n starting to run a program, run an event callback, or an interval or timeout being fired. All these tasks are\n scheduled on a task queue.\n Below are the list of use cases to add tasks to the task queue,\nWhen a new javascript program is executed directly from console or running by the <script> element, the task\n   will be added to the task queue.\nWhen an event fires, the event callback added to task queue\nWhen a setTimeout or setInterval is reached, the corresponding callback added to task queue"},{"question":"What is microtask","answer":"Microtask is the javascript code which needs to be executed immediately after the currently executing\n task\/microtask is completed. They are kind of blocking in nature. i.e, The main thread will be blocked until the\n microtask queue is empty.\n The main sources of microtasks are Promise.resolve, Promise.reject, MutationObservers, IntersectionObservers etcNote: All of these microtasks are processed in the same turn of the event loop."},{"question":"What are different event loops","answer":"In JavaScript, there are multiple event loops that can be used depending on the context of your application. The\n most common event loops are:\nThe Browser Event Loop\n\nThe Node.js Event Loop\n\n\nBrowser Event Loop: The Browser Event Loop is used in client-side JavaScript applications and is responsible for handling events that occur within the browser environment, such as user interactions (clicks, keypresses, etc.), HTTP requests, and other asynchronous actions.\n\n\nThe Node.js Event Loop is used in server-side JavaScript applications and is responsible for handling events that occur within the Node.js runtime environment, such as file I\/O, network I\/O, and other asynchronous actions."},{"question":"What is the purpose of queueMicrotask","answer":""},{"question":"How do you use javascript libraries in typescript file","answer":"It is known that not all JavaScript libraries or frameworks have TypeScript declaration files. But if you still\n want to use libraries or frameworks in our TypeScript files without getting compilation errors, the only solution\n is declare keyword along with a variable declaration. For example, let's imagine you have a library\n called customLibrary that doesn\u2019t have a TypeScript declaration and have a namespace called customLibrary in\n the global namespace. You can use this library in typescript code as below,javascript\n declare var customLibrary;In the runtime, typescript will provide the type to the customLibrary variable as any type. The another\n alternative without using declare keyword is belowjavascript\n var customLibrary: any;"},{"question":"What are the differences between promises and observables","answer":"Some of the major difference in a tabular form| Promises                                                           | Observables                                                                              |\n           | ------------------------------------------------------------------ | ---------------------------------------------------------------------------------------- |\n | Emits only a single value at a time                                | Emits multiple values over a period of time(stream of values ranging from 0 to multiple) |\n | Eager in nature; they are going to be called immediately           | Lazy in nature; they require subscription to be invoked                                  |\n | Promise is always asynchronous even though it resolved immediately | Observable can be either synchronous or asynchronous                                     |\n | Doesn't provide any operators                                      | Provides operators such as map, forEach, filter, reduce, retry, and retryWhen etc        |\n | Cannot be canceled                                                 | Canceled by using unsubscribe() method                                                   |"},{"question":"What is heap","answer":"Heap(Or memory heap) is the memory location where objects are stored when we define variables. i.e, This is the\n place where all the memory allocations and de-allocation take place. Both heap and call-stack are two containers of\n JS runtime.\n Whenever runtime comes across variables and function declarations in the code it stores them in the Heap."},{"question":"What is an event table","answer":"Event Table is a data structure that stores and keeps track of all the events which will be executed asynchronously\n like after some time interval or after the resolution of some API requests. i.e Whenever you call a setTimeout\n function or invoke async operation, it is added to the Event Table.\n It doesn't not execute functions on it\u2019s own. The main purpose of the event table is to keep track of events and\n send them to the Event Queue as shown in the below diagram."},{"question":"What is a microTask queue","answer":"Microtask Queue is the new queue where all the tasks initiated by promise objects get processed before the callback\n queue.\n The microtasks queue are processed before the next rendering and painting jobs. But if these microtasks are running\n for a long time then it leads to visual degradation."},{"question":"What is the difference between shim and polyfill","answer":"A shim is a library that brings a new API to an older environment, using only the means of that environment. It\n isn't necessarily restricted to a web application. For example, es5-shim.js is used to emulate ES5 features on\n older browsers (mainly pre IE9).\n Whereas polyfill is a piece of code (or plugin) that provides the technology that you, the developer, expect the\n browser to provide natively.\n In a simple sentence, A polyfill is a shim for a browser API."},{"question":"How do you detect primitive or non primitive value type","answer":"In JavaScript, primitive types include boolean, string, number, BigInt, null, Symbol and undefined. Whereas\n non-primitive types include the Objects. But you can easily identify them with the below function,```javascript\n var myPrimitive = 30;\n var myNonPrimitive = {};\n function isPrimitive(val) {\n   return Object(val) !== val;\n }isPrimitive(myPrimitive);\n isPrimitive(myNonPrimitive);\n ```If the value is a primitive data type, the Object constructor creates a new wrapper object for the value. But If\n the value is a non-primitive data type (an object), the Object constructor will give the same object."},{"question":"What is babel","answer":"Babel is a JavaScript transpiler to convert ECMAScript 2015+ code into a backwards compatible version of JavaScript\n in current and older browsers or environments. Some of the main features are listed below,\nTransform syntax\nPolyfill features that are missing in your target environment (using @babel\/polyfill)\nSource code transformations (or codemods)"},{"question":"Is Node.js completely single threaded","answer":"Node is a single thread, but some of the functions included in the Node.js standard library(e.g, fs module\n functions) are not single threaded. i.e, Their logic runs outside of the Node.js single thread to improve the speed\n and performance of a program."},{"question":"What are the common use cases of observables","answer":"Some of the most common use cases of observables are web sockets with push notifications, user input changes,\n repeating intervals, etc"},{"question":"What is RxJS","answer":"RxJS (Reactive Extensions for JavaScript) is a library for implementing reactive programming using observables that\n makes it easier to compose asynchronous or callback-based code. It also provides utility functions for creating and\n working with observables."},{"question":"What is the difference between Function constructor and function declaration","answer":"The functions which are created with Function constructor do not create closures to their creation contexts but\n they are always created in the global scope. i.e, the function can access its own local variables and global scope\n variables only. Whereas function declarations can access outer function variables(closures) too.Let's see this difference with an example,Function Constructor:javascript\n var a = 100;\n function createFunction() {\n   var a = 200;\n   return new Function(\"return a;\");\n }\n console.log(createFunction()()); \/\/ 100Function declaration:javascript\n var a = 100;\n function createFunction() {\n   var a = 200;\n   return function func() {\n     return a;\n   };\n }\n console.log(createFunction()()); \/\/ 200"},{"question":"What is a Short circuit condition","answer":"Short circuit conditions are meant for condensed way of writing simple if statements. Let's demonstrate the\n scenario using an example. If you would like to login to a portal with an authentication condition, the expression\n would be as below,javascript\n if (authenticate) {\n   loginToPorta();\n }Since the javascript logical operators evaluated from left to right, the above expression can be simplified\n using && logical operatorjavascript\n authenticate && loginToPorta();"},{"question":"What is the easiest way to resize an array","answer":"The length property of an array is useful to resize or empty an array quickly. Let's apply length property on\n number array to resize the number of elements from 5 to 2,```javascript\n var array = [1, 2, 3, 4, 5];\n console.log(array.length); \/\/ 5array.length = 2;\n console.log(array.length); \/\/ 2\n console.log(array); \/\/ [1,2]\n ```and the array can be emptied toojavascript\n var array = [1, 2, 3, 4, 5];\n array.length = 0;\n console.log(array.length); \/\/ 0\n console.log(array); \/\/ []"},{"question":"What is an observable","answer":"An Observable is basically a function that can return a stream of values either synchronously or asynchronously to\n an observer over time. The consumer can get the value by calling subscribe() method.\n Let's look at a simple example of an Observable```javascript\n import { Observable } from \"rxjs\";const observable = new Observable((observer) => {\n   setTimeout(() => {\n     observer.next(\"Message from a Observable!\");\n   }, 3000);\n });observable.subscribe((value) => console.log(value));\n ```Note: Observables are not part of the JavaScript language yet but they are being proposed to be added to the\n language"},{"question":"What is the difference between function and class declarations","answer":"The main difference between function declarations and class declarations is hoisting. The function declarations\n are hoisted but not class declarations.Classes:```javascript\n const user = new User(); \/\/ ReferenceErrorclass User {}\n ```Constructor Function:```javascript\n const user = new User(); \/\/ No errorfunction User() {}\n ```"},{"question":"What is an async function","answer":"An async function is a function declared with the async keyword which enables asynchronous, promise-based\n behavior to be written in a cleaner style by avoiding promise chains. These functions can contain zero or\n more await expressions.Let's take a below async function example,javascript\n async function logger() {\n   let data = await fetch(\"http:\/\/someapi.com\/users\"); \/\/ pause until fetch returns\n   console.log(data);\n }\n logger();It is basically syntax sugar over ES2015 promises and generators."},{"question":"How do you prevent promises swallowing errors","answer":"While using asynchronous code, JavaScript\u2019s ES6 promises can make your life a lot easier without having callback\n pyramids and error handling on every second line. But Promises have some pitfalls and the biggest one is swallowing\n errors by default.Let's say you expect to print an error to the console for all the below cases,```javascript\n Promise.resolve(\"promised value\").then(function () {\n   throw new Error(\"error\");\n });Promise.reject(\"error value\").catch(function () {\n   throw new Error(\"error\");\n });new Promise(function (resolve, reject) {\n   throw new Error(\"error\");\n });\n ```But there are many modern JavaScript environments that won't print any errors. You can fix this problem in\n different ways,\nAdd catch block at the end of each chain: You can add catch block to the end of each of your promise chains\njavascript\n   Promise.resolve(\"promised value\")\n     .then(function () {\n       throw new Error(\"error\");\n     })\n     .catch(function (error) {\n       console.error(error.stack);\n     });But it is quite difficult to type for each promise chain and verbose too.\nAdd done method: You can replace first solution's then and catch blocks with done method\njavascript\n   Promise.resolve(\"promised value\").done(function () {\n     throw new Error(\"error\");\n   });Let's say you want to fetch data using HTTP and later perform processing on the resulting data asynchronously.\n   You can write done block as below,javascript\n   getDataFromHttp()\n     .then(function (result) {\n       return processDataAsync(result);\n     })\n     .done(function (processed) {\n       displayData(processed);\n     });In future, if the processing library API changed to synchronous then you can remove done block as below,javascript\n   getDataFromHttp().then(function (result) {\n     return displayData(processDataAsync(result));\n   });and then you forgot to add done block to then block leads to silent errors.\nExtend ES6 Promises by Bluebird:\n   Bluebird extends the ES6 Promises API to avoid the issue in the second solution. This library has a \u201cdefault\u201d\n   onRejection handler which will print all errors from rejected Promises to stderr. After installation, you can\n   process unhandled rejections\njavascript\n   Promise.onPossiblyUnhandledRejection(function (error) {\n     throw error;\n   });and discard a rejection, just handle it with an empty catchjavascript\n   Promise.reject(\"error value\").catch(function () {});"},{"question":"What is deno","answer":"Deno is a simple, modern and secure runtime for JavaScript and TypeScript that uses V8 JavaScript engine and the\n Rust programming language."},{"question":"How do you make an object iterable in javascript","answer":"By default, plain objects are not iterable. But you can make the object iterable by defining a Symbol.iterator\n property on it.Let's demonstrate this with an example,```javascript\n const collection = {\n   one: 1,\n   two: 2,\n   three: 3,\n   Symbol.iterator {\n     const values = Object.keys(this);\n     let i = 0;\n     return {\n       next: () => {\n         return {\n           value: this[values[i++]],\n           done: i > values.length,\n         };\n       },\n     };\n   },\n };const iterator = collectionSymbol.iterator;console.log(iterator.next()); \/\/ \u2192 {value: 1, done: false}\n console.log(iterator.next()); \/\/ \u2192 {value: 2, done: false}\n console.log(iterator.next()); \/\/ \u2192 {value: 3, done: false}\n console.log(iterator.next()); \/\/ \u2192 {value: undefined, done: true}\n ```The above process can be simplified using a generator function,javascript\n const collection = {\n   one: 1,\n   two: 2,\n   three: 3,\n   [Symbol.iterator]: function* () {\n     for (let key in this) {\n       yield this[key];\n     }\n   },\n };\n const iterator = collection[Symbol.iterator]();\n console.log(iterator.next()); \/\/ {value: 1, done: false}\n console.log(iterator.next()); \/\/ {value: 2, done: false}\n console.log(iterator.next()); \/\/ {value: 3, done: false}\n console.log(iterator.next()); \/\/ {value: undefined, done: true}"},{"question":"What is a Proper Tail Call","answer":"First, we should know about tail call before talking about \"Proper Tail Call\". A tail call is a subroutine or\n function call performed as the final action of a calling function. Whereas Proper tail call(PTC) is a technique\n where the program or code will not create additional stack frames for a recursion when the function call is a tail\n call.For example, the below classic or head recursion of factorial function relies on stack for each step. Each step\n need to be processed upto n * factorial(n - 1)javascript\n function factorial(n) {\n   if (n === 0) {\n     return 1;\n   }\n   return n * factorial(n - 1);\n }\n console.log(factorial(5)); \/\/120But if you use Tail recursion functions, they keep passing all the necessary data it needs down the recursion\n without relying on the stack.javascript\n function factorial(n, acc = 1) {\n   if (n === 0) {\n     return acc;\n   }\n   return factorial(n - 1, n * acc);\n }\n console.log(factorial(5)); \/\/120The above pattern returns the same output as the first one. But the accumulator keeps track of total as an argument\n without using stack memory on recursive calls."},{"question":"How do you check an object is a promise or not","answer":"If you don't know if a value is a promise or not, wrapping the value as Promise.resolve(value) which returns a\n promise```javascript\n function isPromise(object) {\n   if (Promise && Promise.resolve) {\n     return Promise.resolve(object) == object;\n   } else {\n     throw \"Promise not supported in your environment\";\n   }\n }var i = 1;\n var promise = new Promise(function (resolve, reject) {\n   resolve();\n });console.log(isPromise(i)); \/\/ false\n console.log(isPromise(promise)); \/\/ true\n ```Another way is to check for .then() handler type```javascript\n function isPromise(value) {\n   return Boolean(value && typeof value.then === \"function\");\n }\n var i = 1;\n var promise = new Promise(function (resolve, reject) {\n   resolve();\n });console.log(isPromise(i)); \/\/ false\n console.log(isPromise(promise)); \/\/ true\n ```"},{"question":"How to detect if a function is called as constructor","answer":"You can use new.target pseudo-property to detect whether a function was called as a constructor(using the new\n operator) or as a regular function call.\nIf a constructor or function invoked using the new operator, new.target returns a reference to the constructor or\n   function.\nFor function calls, new.target is undefined.\n```javascript\n function Myfunc() {\n    if (new.target) {\n       console.log('called with new');\n    } else {\n       console.log('not called with new');\n    }\n }new Myfunc(); \/\/ called with new\n Myfunc(); \/\/ not called with new\n Myfunc.call({}); \/\/ not called with new\n ```"},{"question":"What are the differences between arguments object and rest parameter","answer":"There are three main differences between arguments object and rest parameters\nThe arguments object is an array-like but not an array. Whereas the rest parameters are array instances.\nThe arguments object does not support methods such as sort, map, forEach, or pop. Whereas these methods can be\n   used in rest parameters.\nThe rest parameters are only the ones that haven\u2019t been given a separate name, while the arguments object\n   contains all arguments passed to the function"},{"question":"What are the differences between spread operator and rest parameter","answer":"Rest parameter collects all remaining elements into an array. Whereas Spread operator allows iterables( arrays \/\n objects \/ strings ) to be expanded into single arguments\/elements. i.e, Rest parameter is opposite to the spread\n operator."},{"question":"What are the different kinds of generators","answer":"There are five kinds of generators,\nGenerator function declaration:\njavascript\n   function* myGenFunc() {\n     yield 1;\n     yield 2;\n     yield 3;\n   }\n   const genObj = myGenFunc();\nGenerator function expressions:\njavascript\n   const myGenFunc = function* () {\n     yield 1;\n     yield 2;\n     yield 3;\n   };\n   const genObj = myGenFunc();\nGenerator method definitions in object literals:\njavascript\n   const myObj = {\n     *myGeneratorMethod() {\n       yield 1;\n       yield 2;\n       yield 3;\n     },\n   };\n   const genObj = myObj.myGeneratorMethod();\nGenerator method definitions in class:\njavascript\n   class MyClass {\n     *myGeneratorMethod() {\n       yield 1;\n       yield 2;\n       yield 3;\n     }\n   }\n   const myObject = new MyClass();\n   const genObj = myObject.myGeneratorMethod();\nGenerator as a computed property:\n```javascript\n   const SomeObj = {\n     *Symbol.iterator {\n       yield 1;\n       yield 2;\n       yield 3;\n     },\n   };console.log(Array.from(SomeObj)); \/\/ [ 1, 2, 3 ]\n   ```"},{"question":"What are the built-in iterables","answer":"Below are the list of built-in iterables in javascript,\nArrays and TypedArrays\nStrings: Iterate over each character or Unicode code-points\nMaps: iterate over its key-value pairs\nSets: iterates over their elements\narguments: An array-like special variable in functions\nDOM collection such as NodeList"},{"question":"What are the differences between for...of and for...in statements","answer":"Both for...in and for...of statements iterate over js data structures. The only difference is over what they\n iterate:\nfor..in iterates over all enumerable property keys of an object\nfor..of iterates over the values of an iterable object.\nLet's explain this difference with an example,```javascript\n let arr = [\"a\", \"b\", \"c\"];arr.newProp = \"newVlue\";\/\/ key are the property keys\n for (let key in arr) {\n   console.log(key); \/\/ 0, 1, 2 & newValue\n }\/\/ value are the property values\n for (let value of arr) {\n   console.log(value); \/\/ a, b, c\n }\n ```Since for..in loop iterates over the keys of the object, the first loop logs 0, 1, 2 and newProp while iterating\n over the array object. The for..of loop iterates over the values of a arr data structure and logs a, b, c in the\n console."},{"question":"How do you define instance and non-instance properties","answer":"The Instance properties must be defined inside of class methods. For example, name and age properties defined\n inside constructor as below,javascript\n class Person {\n   constructor(name, age) {\n     this.name = name;\n     this.age = age;\n   }\n }But Static(class) and prototype data properties must be defined outside of the ClassBody declaration. Let's assign\n the age value for Person class as below,javascript\n Person.staticAge = 30;\n Person.prototype.prototypeAge = 40;"},{"question":"What is the difference between isNaN and Number.isNaN?","answer":"isNaN: The global function isNaN converts the argument to a Number and returns true if the resulting value\n   is NaN.\nNumber.isNaN: This method does not convert the argument. But it returns true when the type is a Number and\n   value is NaN.\nLet's see the difference with an example,javascript\n isNaN(\u2018hello\u2019);   \/\/ true\n Number.isNaN('hello'); \/\/ false"},{"question":"How to invoke an IIFE without any extra brackets?","answer":"Immediately Invoked Function Expressions(IIFE) requires a pair of parenthesis to wrap the function which contains\n set of statements.js\n (function (dt) {\n   console.log(dt.toLocaleTimeString());\n })(new Date());Since both IIFE and void operator discard the result of an expression, you can avoid the extra brackets\n using void operator for IIFE as below,js\n void function (dt) {\n   console.log(dt.toLocaleTimeString());\n }(new Date());"},{"question":"Is that possible to use expressions in switch cases?","answer":"You might have seen expressions used in switch condition but it is also possible to use for switch cases by\n assigning true value for the switch condition. Let's see the weather condition based on temparature as an example,js\n const weather = (function getWeather(temp) {\n   switch (true) {\n     case temp < 0:\n       return \"freezing\";\n     case temp < 10:\n       return \"cold\";\n     case temp < 24:\n       return \"cool\";\n     default:\n       return \"unknown\";\n   }\n })(10);"},{"question":"What is the easiest way to ignore promise errors?","answer":"The easiest and safest way to ignore promise errors is void that error. This approach is ESLint friendly too.js\n await promise.catch((e) => void e);"},{"question":"How do style the console output using CSS?","answer":"You can add CSS styling to the console output using the CSS format content specifier %c. The console string message\n can be appended after the specifier and CSS style in another argument. Let's print the red the color text using\n console.log and CSS specifier as below,js\n console.log(\"%cThis is a red text\", \"color:red\");It is also possible to add more styles for the content. For example, the font-size can be modified for the above\n textjs\n console.log(\n   \"%cThis is a red text with bigger font\",\n   \"color:red; font-size:20px\"\n );"},{"question":"What is nullish coalescing operator (??)?","answer":"It is a logical operator that returns its right-hand side operand when its left-hand side operand is null or\n undefined, and otherwise returns its left-hand side operand. This can be contrasted with the logical OR (||)\n operator, which returns the right-hand side operand if the left operand is any falsy value, not only null or\n undefined.js\n console.log(null ?? true); \/\/ true\n console.log(false ?? true); \/\/ false\n console.log(undefined ?? true); \/\/ true"},{"question":"How do you group and nest console output?","answer":"The console.group() can be used to group related log messages to be able to easily read the logs and use\n console.groupEnd()to close the group. Along with this, you can also nest groups which allows to output message in\n hierarchical manner.For example, if you\u2019re logging a user\u2019s details:```js\n console.group(\"User Details\");\n console.log(\"name: Sudheer Jonna\");\n console.log(\"job: Software Developer\");\/\/ Nested Group\n console.group(\"Address\");\n console.log(\"Street: Commonwealth\");\n console.log(\"City: Los Angeles\");\n console.log(\"State: California\");\/\/ Close nested group\n console.groupEnd();\/\/ Close outer group\n console.groupEnd()\n ```You can also use console.groupCollapsed() instead of console.group() if you want the groups to be collapsed by\n default."},{"question":"What is the difference between dense and sparse arrays?","answer":"An array contains items at each index starting from first(0) to last(array.length - 1) is called as Dense array.\n Whereas if at least one item is missing at any index, the array is called as sparse.Let's see the below two kind of arrays,```js\n const avengers = [\"Ironman\", \"Hulk\", \"CaptainAmerica\"];\n console.log(avengers[0]); \/\/ 'Ironman'\n console.log(avengers[1]); \/\/ 'Hulk'\n console.log(avengers[2]); \/\/ 'CaptainAmerica'\n console.log(avengers.length); \/\/ 3const justiceLeague = [\"Superman\", \"Aquaman\", , \"Batman\"];\n console.log(justiceLeague[0]); \/\/ 'Superman'\n console.log(justiceLeague[1]); \/\/ 'Aquaman'\n console.log(justiceLeague[2]); \/\/ undefined\n console.log(justiceLeague[3]); \/\/ 'Batman'\n console.log(justiceLeague.length); \/\/ 4\n ```"},{"question":"What are the different ways to create sparse arrays?","answer":"There are 4 different ways to create sparse arrays in JavaScript\nArray literal: Omit a value when using the array literal\n   js\n   const justiceLeague = [\"Superman\", \"Aquaman\", , \"Batman\"];\n   console.log(justiceLeague); \/\/ ['Superman', 'Aquaman', empty ,'Batman']\nArray() constructor: Invoking Array(length) or new Array(length)\n   js\n   const array = Array(3);\n   console.log(array); \/\/ [empty, empty ,empty]\nDelete operator: Using delete array[index] operator on the array\n   js\n   const justiceLeague = [\"Superman\", \"Aquaman\", \"Batman\"];\n   delete justiceLeague[1];\n   console.log(justiceLeague); \/\/ ['Superman', empty, ,'Batman']\nIncrease length property: Increasing length property of an array\n   js\n   const justiceLeague = ['Superman', 'Aquaman', 'Batman'];\n   justiceLeague.length = 5;\n   console.log(justiceLeague); \/\/ ['Superman', 'Aquaman', 'Batman', empty, empty]"},{"question":"What is the difference between setTimeout, setImmediate and process.nextTick?","answer":"Set Timeout: setTimeout() is to schedule execution of a one-time callback after delay milliseconds.\nSet Immediate: The setImmediate function is used to execute a function right after the current event loop\n   finishes.\nProcess NextTick: If process.nextTick() is called in a given phase, all the callbacks passed to\n   process.nextTick() will be resolved before the event loop continues. This will block the event loop and create\n   I\/O Starvation if process.nextTick() is called recursively."},{"question":"How do you reverse an array without modifying original array?","answer":"The reverse() method reverses the order of the elements in an array but it mutates the original array. Let's take\n a simple example to demonistrate this case,```javascript\n const originalArray = [1, 2, 3, 4, 5];\n const newArray = originalArray.reverse();console.log(newArray); \/\/ [ 5, 4, 3, 2, 1]\n console.log(originalArray); \/\/ [ 5, 4, 3, 2, 1]\n ```There are few solutions that won't mutate the original array. Let's take a look.\nUsing slice and reverse methods:\n   In this case, just invoke the slice() method on the array to create a shallow copy followed by reverse()\n   method call on the copy.\n```javascript\n   const originalArray = [1, 2, 3, 4, 5];\n   const newArray = originalArray.slice().reverse(); \/\/Slice an array gives a new copyconsole.log(originalArray); \/\/ [1, 2, 3, 4, 5]\n   console.log(newArray); \/\/ [ 5, 4, 3, 2, 1]\n   ```\nUsing spread and reverse methods:\n   In this case, let's use the spread syntax (...) to create a copy of the array followed by reverse() method call\n   on the copy.\n```javascript\n   const originalArray = [1, 2, 3, 4, 5];\n   const newArray = [...originalArray].reverse();console.log(originalArray); \/\/ [1, 2, 3, 4, 5]\n   console.log(newArray); \/\/ [ 5, 4, 3, 2, 1]\n   ```\nUsing reduce and spread methods:\n   Here execute a reducer function on an array elements and append the accumulated array on right side using spread\n   syntax\n```javascript\n   const originalArray = [1, 2, 3, 4, 5];\n   const newArray = originalArray.reduce((accumulator, value) => {\n     return [value, ...accumulator];\n   }, []);console.log(originalArray); \/\/ [1, 2, 3, 4, 5]\n   console.log(newArray); \/\/ [ 5, 4, 3, 2, 1]\n   ```\nUsing reduceRight and spread methods:\n   Here execute a right reducer function(i.e. opposite direction of reduce method) on an array elements and append\n   the accumulated array on left side using spread syntax\n```javascript\n   const originalArray = [1, 2, 3, 4, 5];\n   const newArray = originalArray.reduceRight((accumulator, value) => {\n     return [...accumulator, value];\n   }, []);console.log(originalArray); \/\/ [1, 2, 3, 4, 5]\n   console.log(newArray); \/\/ [ 5, 4, 3, 2, 1]\n   ```\nUsing reduceRight and push methods:\n   Here execute a right reducer function(i.e. opposite direction of reduce method) on an array elements and push the\n   iterated value to the accumulator\n```javascript\n   const originalArray = [1, 2, 3, 4, 5];\n   const newArray = originalArray.reduceRight((accumulator, value) => {\n     accumulator.push(value);\n     return accumulator;\n   }, []);console.log(originalArray); \/\/ [1, 2, 3, 4, 5]\n   console.log(newArray); \/\/ [ 5, 4, 3, 2, 1]\n   ```"},{"question":"How do you create custom HTML element?","answer":"The creation of custom HTML elements involves two main steps,\nDefine your custom HTML element: First you need to define some custom class by extending HTMLElement class.\n   After that define your component properties (styles,text etc) using connectedCallback method.\n   Note: The browser exposes a function called customElements.define inorder to reuse the element.\n   javascript\n   class CustomElement extends HTMLElement {\n     connectedCallback() {\n       this.innerHTML = \"This is a custom element\";\n     }\n   }\n   customElements.define(\"custom-element\", CustomElement);\nUse custome element just like other HTML element: Declare your custom element as a HTML tag.\njavascript\n    <body>\n         <custom-element>\n    <\/body>"},{"question":"What is global execution context?","answer":"The global execution context is the default or first execution context that is created by the JavaScript engine\n before any code is executed(i.e, when the file first loads in the browser). All the global code that is not inside\n a function or object will be executed inside this global execution context. Since JS engine is single threaded\n there will be only one global environment and there will be only one global execution context.For example, the below code other than code inside any function or object is executed inside the global execution\n context.```javascript\n var x = 10;function A() {\n   console.log(\"Start function A\");function B() {\n     console.log(\"In function B\");\n   }B();\n }A();console.log(\"GlobalContext\");\n ```"},{"question":"What is function execution context?","answer":"Whenever a function is invoked, the JavaScript engine creates a different type of Execution Context known as a\n Function Execution Context (FEC) within the Global Execution Context (GEC) to evaluate and execute the code within\n that function."},{"question":"What is debouncing?","answer":"Debouncing is a programming pattern that allows delaying execution of some piece of code until a specified time to\n avoid unnecessary CPU cycles, API calls and improve performance. The debounce function make sure that your code\n is only triggered once per user input. The common usecases are Search box suggestions, text-field auto-saves, and\n eliminating double-button clicks.Let's say you want to show suggestions for a search query, but only after a visitor has finished typing it. So here\n you write a debounce function where the user keeps writing the characters with in 500ms then previous timer cleared\n out using clearTimeout and reschedule API call\/DB query for a new time\u2014300 ms in the future.js\n function debounce(func, timeout = 500) {\n   let timer;\n   return (...args) => {\n     clearTimeout(timer);\n     timer = setTimeout(() => {\n       func.apply(this, args);\n     }, timeout);\n   };\n }\n function fetchResults() {\n   console.log(\"Fetching input suggestions\");\n }\n const processChange = debounce(() => fetchResults());The debounce() function can be used on input, button and window eventsInput:html\n <input type=\"text\" onkeyup=\"processChange()\" \/>Button:html\n <button onclick=\"processChange()\">Click me<\/button>Windows event:html\n window.addEventListener(\"scroll\", processChange);"},{"question":"What is throttling?","answer":"Throttling is a technique used to limit the execution of an event handler function, even when this event triggers\n continuously due to user actions. The common use cases are browser resizing, window scrolling etc.The below example creates a throttle function to reduce the number of events for each pixel change and trigger\n scroll event for each 100ms except for the first event.js\n const throttle = (func, limit) => {\n   let inThrottle;\n   return (...args) => {\n     if (!inThrottle) {\n       func.apply(this, args);\n       inThrottle = true;\n       setTimeout(() => (inThrottle = false), limit);\n     }\n   };\n };\n window.addEventListener(\"scroll\", () => {\n   throttle(handleScrollAnimation, 100);\n });"},{"question":"What is optional chaining?","answer":"According to MDN official docs, the optional chaining operator (?.) permits reading the value of a property located\n deep within a chain of connected objects without having to expressly validate that each reference in the chain is\n valid.The ?. operator is like the . chaining operator, except that instead of causing an error if a reference is\n nullish (null or undefined), the expression short-circuits with a return value of undefined. When used with\n function calls, it returns undefined if the given function does not exist.```js\n  const adventurer = {\n    name: 'Alice',\n    cat: {\n      name: 'Dinah'\n    }\n  };const dogName = adventurer.dog?.name;\n  console.log(dogName);\n  \/\/ expected output: undefinedconsole.log(adventurer.someNonExistentMethod?.());\n  \/\/ expected output: undefined\n ```"},{"question":"What is an environment record?","answer":"According to ECMAScript specification 262 (9.1):\nEnvironment Record is a specification type\n used to define the association of Identifiers to specific variables and functions, based upon the lexical nesting\n structure of ECMAScript code.\nUsually an Environment Record is associated with some specific syntactic structure of ECMAScript code such as a\n FunctionDeclaration, a BlockStatement, or a Catch clause of a TryStatement.Each time such code is evaluated, a new Environment Record is created to record the identifier bindings that are\n created by that code."},{"question":"How to verify if a variable is an array?","answer":"It is possible to check if a variable is an array instance using 3 different ways,\nArray.isArray() method:\nThe Array.isArray(value) utility function is used to determine whether value is an array or not. This function\n   returns a true boolean value if the variable is an array and a false value if it is not.```javascript\nconst numbers = [1, 2, 3];\nconst user = { name: 'John' };\nArray.isArray(numbers);  \/\/ true\nArray.isArray(user); \/\/false\n```\n\ninstanceof operator:\nThe instanceof operator is used to check the type of an array at run time. It returns true if the type of a\n   variable is an Array other false for other type.```javascript\nconst numbers = [1, 2, 3];\nconst user = { name: 'John' };\nconsole.log(numbers instanceof Array);  \/\/ true\nconsole.log(user instanceof Array);  \/\/ false\n```\n\nChecking constructor type:\nThe constructor property of the variable is used to determine whether the variable Array type or not.```javascript\nconst numbers = [1, 2, 3];\nconst user = { name: 'John' };\nconsole.log(numbers.constructor === Array);  \/\/ true\nconsole.log(user.constructor === Array);  \/\/ false\n```"},{"question":"What is pass by value and pass by reference?","answer":"Pass-by-value creates a new space in memory and makes a copy of a value. Primitives such as string, number, boolean\n etc will actually create a new copy. Hence, updating one value doesn't impact the other value. i.e, The values are\n independent of each other.\n```javascript\n let a = 5;\n let b = a;b++;\n console.log(a, b); \/\/5, 6\n ``\n In the above code snippet, the value ofais assigned toband the variablebhas been incremented. Since\n there is a new space created for variableb, any update on this variable doesn't impact the variablea`.Pass by reference doesn't create a new space in memory but the new variable adopts a memory address of an initial\n variable. Non-primitives such as objects, arrays and functions gets the reference of the initiable variable. i.e,\n updating one value will impact the other variable.```javascript\n let user1 = {\n    name: 'John',\n    age: 27\n };\n let user2 = user1;\n user2.age = 30;console.log(user1.age, user2.age); \/\/ 30, 30\n ```In the above code snippet, updating the age property of one object will impact the other property due to the same\n reference."},{"question":"What are the differences between primitives and non-primitives?","answer":"JavaScript language has both primitives and non-primitives but there are few differences between them as below,| Primitives | Non-primitives |\n           |---- | ---------\n | These types are predefined | Created by developer |\n | These are immutable | Mutable |\n | Compare by value | Compare by reference |\n | Stored in Stack | Stored in heap |\n | Contain certain value | Can contain NULL too |"},{"question":"How do you create your own bind method using either call or apply method?","answer":"The custom bind function needs to be created on Function prototype inorder to use it as other builtin functions.\n This custom function should return a function similar to original bind method and the implementation of inner\n function needs to use apply method call.The function which is going to bind using custom myOwnBind method act as the attached\n function(boundTargetFunction) and argument as the object for apply method call.js\n  Function.prototype.myOwnBind = function(whoIsCallingMe) {\n    if (typeof this !== \"function\") {\n      throw new Error(this + \"cannot be bound as it's not callable\");\n    }\n    const boundTargetFunction = this;\n    return function() {\n      boundTargetFunction.apply(whoIsCallingMe, arguments);\n    }\n  }"},{"question":"What are the differences between pure and impure functions?","answer":"Some of the major differences between pure and impure function are as below,"},{"question":"What is referential transparency?","answer":""},{"question":"What are the possible side-effects in javascript?","answer":""},{"question":"What are compose and pipe functions?","answer":"The \"compose\" and \"pipe\" are two techniques commonly used in functional programming to simplify complex operations\n and make code more readable. They are not native in JavaScript and higher order functions. the compose() applies\n right to left any number of functions to the output of the previous function."},{"question":"What is module pattern?","answer":"Module pattern is a designed pattern used to wrap a set of variables and functions together in a single scope\n returned as an object. JavaScript doesn't have access specifiers similar to other languages(Java, Pythong etc) to\n provide private scope. It uses IIFE (Immediately invoked function expression) to allow for private scopes. i.e, a\n closure that protect variables and methods.\nThe module pattern look like below,```javascript\n  (function() {\n  \/\/ Private variables or functions goes here.return {\n      \/\/ Return public variables or functions here.\n  }})();\n ```Let's see an example of module pattern for an employee with private and public access,```javascript\n const createEmployee = (function () {\n    \/\/ Private\n    const name = \"John\";\n    const department = \"Sales\";\n    const getEmployeeName = () => name;\n    const getDepartmentName = () => department;\/\/ Public\nreturn {\n  name,\n  department,\n  getName: () => getEmployeeName(),\n  getDepartment: () => getDepartmentName(),\n};\n})();console.log(createEmployee.name);\n  console.log(createEmployee.department);\n  console.log(createEmployee.getName());\n  console.log(createEmployee.getDepartment());\n ```Note: It mimic the concepts of classes with private variables and methods."},{"question":"What is Function Composition?","answer":"It is an approach where the result of one function is passed on to the next function, which is passed to another\n until the final function is executed for the final result.\n```javascript\n  \/\/example\n  const double = x => x * 2\n  const square = x => x * xvar output1 = double(2);\n  var output2 = square(output1);\n  console.log(output2);var output_final = square(double(2));\n  console.log(output_final);\n ```"},{"question":"How to use await outside of async function prior to ES2022?","answer":"Prior to ES2022, if you attempted to use an await outside of an async function resulted in a SyntaxError.\njavascript\n await Promise.resolve(console.log('Hello await')); \/\/ SyntaxError: await is only valid in async functionBut you can fix this issue with an alternative IIFE (Immediately Invoked Function Expression) to get access to the\n feature.javascript\n  (async function() {\n    await Promise.resolve(console.log('Hello await')); \/\/ Hello await\n  }());In ES2022, you can write top-level await without writing any hacks.\n javascript\n await Promise.resolve(console.log('Hello await')); \/\/Hello await"},{"question":"Coding Exercise","answer":"1. What is the output of below code```javascript\nvar car = new Vehicle(\"Honda\", \"white\", \"2010\", \"UK\");\nconsole.log(car);function Vehicle(model, color, year, country) {\n  this.model = model;\n  this.color = color;\n  this.year = year;\n  this.country = country;\n}\n```\n1: Undefined\n2: ReferenceError\n3: null\n4: {model: \"Honda\", color: \"white\", year: \"2010\", country: \"UK\"}\nAnswer: 4The function declarations are hoisted similar to any variables. So the placement for Vehicle function declaration\ndoesn't make any difference.2. What is the output of below code```javascript\nfunction foo() {\n  let x = (y = 0);\n  x++;\n  y++;\n  return x;\n}console.log(foo(), typeof x, typeof y);\n```\n1: 1, undefined and undefined\n2: ReferenceError: X is not defined\n3: 1, undefined and number\n4: 1, number and number\nAnswer: 3Of course the return value of foo() is 1 due to the increment operator. But the statement let x = y = 0 declares a\nlocal variable x. Whereas y declared as a global variable accidentally. This statement is equivalent to,javascript\nlet x;\nwindow.y = 0;\nx = window.y;Since the block scoped variable x is undefined outside of the function, the type will be undefined too. Whereas the\nglobal variable y is available outside the function, the value is 0 and type is number.3. What is the output of below codejavascript\nfunction main() {\n  console.log(\"A\");\n  setTimeout(function print() {\n    console.log(\"B\");\n  }, 0);\n  console.log(\"C\");\n}\nmain();\n1: A, B and C\n2: B, A and C\n3: A and C\n4: A, C and B\nAnswer: 4The statements order is based on the event loop mechanism. The order of statements follows the below order,\nAt first, the main function is pushed to the stack.\nThen the browser pushes the first statement of the main function( i.e, A's console.log) to the stack, executing and\n   popping out immediately.\nBut setTimeout statement moved to Browser API to apply the delay for callback.\nIn the meantime, C's console.log added to stack, executed and popped out.\nThe callback of setTimeout moved from Browser API to message queue.\nThe main function popped out from stack because there are no statements to execute\nThe callback moved from message queue to the stack since the stack is empty.\nThe console.log for B is added to the stack and display on the console.\n4. What is the output of below equality checkjavascript\nconsole.log(0.1 + 0.2 === 0.3);\n1: false\n2: true\nAnswer: 1This is due to the float point math problem. Since the floating point numbers are encoded in binary format, the addition\noperations on them lead to rounding errors. Hence, the comparison of floating points doesn't give expected results.\nYou can find more details about the explanation here 0.30000000000000004.com\/5. What is the output of below codejavascript\nvar y = 1;\nif (function f() {}) {\n  y += typeof f;\n}\nconsole.log(y);\n1: 1function\n2: 1object\n3: ReferenceError\n4: 1undefined\nAnswer: 4The main points in the above code snippets are,\nYou can see function expression instead function declaration inside if statement. So it always returns true.\nSince it is not declared(or assigned) anywhere, f is undefined and typeof f is undefined too.\nIn other words, it is same asjavascript\nvar y = 1;\nif (\"foo\") {\n  y += typeof f;\n}\nconsole.log(y);Note: It returns 1object for MS Edge browser6. What is the output of below codejavascript\nfunction foo() {\n  return;\n  {\n    message: \"Hello World\";\n  }\n}\nconsole.log(foo());\n1: Hello World\n2: Object {message: \"Hello World\"}\n3: Undefined\n4: SyntaxError\nAnswer: 3This is a semicolon issue. Normally semicolons are optional in JavaScript. So if there are any statements(in this case,\nreturn) missing semicolon, it is automatically inserted immediately. Hence, the function returned as undefined.Whereas if the opening curly brace is along with the return keyword then the function is going to be returned as\nexpected.javascript\nfunction foo() {\n  return {\n    message: \"Hello World\",\n  };\n}\nconsole.log(foo()); \/\/ {message: \"Hello World\"}7. What is the output of below codejavascript\nvar myChars = [\"a\", \"b\", \"c\", \"d\"];\ndelete myChars[0];\nconsole.log(myChars);\nconsole.log(myChars[0]);\nconsole.log(myChars.length);\n1: [empty, 'b', 'c', 'd'], empty, 3\n2: [null, 'b', 'c', 'd'], empty, 3\n3: [empty, 'b', 'c', 'd'], undefined, 4\n4: [null, 'b', 'c', 'd'], undefined, 4\nAnswer: 3The delete operator will delete the object property but it will not reindex the array or change its length. So the\nnumber or elements or length of the array won't be changed.\nIf you try to print myChars then you can observe that it doesn't set an undefined value, rather the property is removed\nfrom the array. The newer versions of Chrome use empty instead of undefined to make the difference a bit clearer.8. What is the output of below code in latest Chrome```javascript\nvar array1 = new Array(3);\nconsole.log(array1);var array2 = [];\narray2[2] = 100;\nconsole.log(array2);var array3 = [, , ,];\nconsole.log(array3);\n```\n1: [undefined \u00d7 3], [undefined \u00d7 2, 100], [undefined \u00d7 3]\n2: [empty \u00d7 3], [empty \u00d7 2, 100], [empty \u00d7 3]\n3: [null \u00d7 3], [null \u00d7 2, 100], [null \u00d7 3]\n4: [], [100], []\nAnswer: 2The latest chrome versions display sparse array(they are filled with holes) using this empty x n notation. Whereas the\nolder versions have undefined x n notation.\nNote: The latest version of FF displays n empty slots notation.9. What is the output of below code```javascript\nconst obj = {\n  prop1: function () {\n    return 0;\n  },\n  prop2() {\n    return 1;\n  },\n  \"prop\" + 3 {\n    return 2;\n  },\n};console.log(obj.prop1());\nconsole.log(obj.prop2());\nconsole.log(obj.prop3());\n```\n1: 0, 1, 2\n2: 0, { return 1 }, 2\n3: 0, { return 1 }, { return 2 }\n4: 0, 1, undefined\nAnswer: 1ES6 provides method definitions and property shorthands for objects. So both prop2 and prop3 are treated as regular\nfunction values.10. What is the output of below codejavascript\nconsole.log(1 < 2 < 3);\nconsole.log(3 > 2 > 1);\n1: true, true\n2: true, false\n3: SyntaxError, SyntaxError,\n4: false, false\nAnswer: 2The important point is that if the statement contains the same operators(e.g, < or >) then it can be evaluated from left\nto right.\nThe first statement follows the below order,\nconsole.log(1 < 2 < 3);\nconsole.log(true < 3);\nconsole.log(1 < 3); \/\/ True converted as 1 during comparison\nTrue\nWhereas the second statement follows the below order,\nconsole.log(3 > 2 > 1);\nconsole.log(true > 1);\nconsole.log(1 > 1); \/\/ False converted as 0 during comparison\nFalse\n11. What is the output of below code in non-strict modejavascript\nfunction printNumbers(first, second, first) {\n  console.log(first, second, first);\n}\nprintNumbers(1, 2, 3);\n1: 1, 2, 3\n2: 3, 2, 3\n3: SyntaxError: Duplicate parameter name not allowed in this context\n4: 1, 2, 1\nAnswer: 2In non-strict mode, the regular JavaScript functions allow duplicate named parameters. The above code snippet has\nduplicate parameters on 1st and 3rd parameters.\nThe value of the first parameter is mapped to the third argument which is passed to the function. Hence, the 3rd\nargument overrides the first parameter.Note: In strict mode, duplicate parameters will throw a Syntax Error.12. What is the output of below codejavascript\nconst printNumbersArrow = (first, second, first) => {\n  console.log(first, second, first);\n};\nprintNumbersArrow(1, 2, 3);\n1: 1, 2, 3\n2: 3, 2, 3\n3: SyntaxError: Duplicate parameter name not allowed in this context\n4: 1, 2, 1\nAnswer: 3Unlike regular functions, the arrow functions doesn't not allow duplicate parameters in either strict or non-strict\nmode. So you can see SyntaxError in the console.13. What is the output of below codejavascript\nconst arrowFunc = () => arguments.length;\nconsole.log(arrowFunc(1, 2, 3));\n1: ReferenceError: arguments is not defined\n2: 3\n3: undefined\n4: null\nAnswer: 1Arrow functions do not have an arguments, super, this, or new.target bindings. So any reference to arguments\nvariable tries to resolve to a binding in a lexically enclosing environment. In this case, the arguments variable is not\ndefined outside of the arrow function. Hence, you will receive a reference error.Where as the normal function provides the number of arguments passed to the functionjavascript\nconst func = function () {\n  return arguments.length;\n};\nconsole.log(func(1, 2, 3));But If you still want to use an arrow function then rest operator on arguments provides the expected argumentsjavascript\nconst arrowFunc = (...args) => args.length;\nconsole.log(arrowFunc(1, 2, 3));14. What is the output of below codejavascript\nconsole.log(String.prototype.trimLeft.name === \"trimLeft\");\nconsole.log(String.prototype.trimLeft.name === \"trimStart\");\n1: True, False\n2: False, True\nAnswer: 2In order to be consistent with functions like String.prototype.padStart, the standard method name for trimming the\nwhitespaces is considered as trimStart. Due to web web compatibility reasons, the old method name 'trimLeft' still\nacts as an alias for 'trimStart'. Hence, the prototype for 'trimLeft' is always 'trimStart'15. What is the output of below codejavascript\nconsole.log(Math.max());\n1: undefined\n2: Infinity\n3: 0\n4: -Infinity\nAnswer: 4-Infinity is the initial comparant because almost every other value is bigger. So when no arguments are provided,\n-Infinity is going to be returned.\nNote: Zero number of arguments is a valid case.16. What is the output of below codejavascript\nconsole.log(10 == [10]);\nconsole.log(10 == [[[[[[[10]]]]]]]);\n1: True, True\n2: True, False\n3: False, False\n4: False, True\nAnswer: 1As per the comparison algorithm in the ECMAScript specification(ECMA-262), the above expression converted into JS as\nbelowjavascript\n10 === Number([10].valueOf().toString()); \/\/ 10So it doesn't matter about number brackets([]) around the number, it is always converted to a number in the expression.17. What is the output of below codejavascript\nconsole.log(10 + \"10\");\nconsole.log(10 - \"10\");\n1: 20, 0\n2: 1010, 0\n3: 1010, 10-10\n4: NaN, NaN\nAnswer: 2The concatenation operator(+) is applicable for both number and string types. So if any operand is string type then both\noperands concatenated as strings. Whereas subtract(-) operator tries to convert the operands as number type.18. What is the output of below codejavascript\nconsole.log([0] == false);\nif ([0]) {\n  console.log(\"I'm True\");\n} else {\n  console.log(\"I'm False\");\n}\n1: True, I'm True\n2: True, I'm False\n3: False, I'm True\n4: False, I'm False\nAnswer: 1In comparison operators, the expression [0] converted to Number([0].valueOf().toString()) which is resolved to false.\nWhereas [0] just becomes a truthy value without any conversion because there is no comparison operator.19. What is the output of below codejavascript\nconsole.log([1, 2] + [3, 4]);\n1: [1,2,3,4]\n2: [1,2][3,4]\n3: SyntaxError\n4: 1,23,4\nAnswer: 4The + operator is not meant or defined for arrays. So it converts arrays into strings and concatenates them.20. What is the output of below code```javascript\nconst numbers = new Set([1, 1, 2, 3, 4]);\nconsole.log(numbers);const browser = new Set(\"Firefox\");\nconsole.log(browser);\n```\n1: {1, 2, 3, 4}, {\"F\", \"i\", \"r\", \"e\", \"f\", \"o\", \"x\"}\n2: {1, 2, 3, 4}, {\"F\", \"i\", \"r\", \"e\", \"o\", \"x\"}\n3: [1, 2, 3, 4], [\"F\", \"i\", \"r\", \"e\", \"o\", \"x\"]\n4: {1, 1, 2, 3, 4}, {\"F\", \"i\", \"r\", \"e\", \"f\", \"o\", \"x\"}\nAnswer: 1Since Set object is a collection of unique values, it won't allow duplicate values in the collection. At the same\ntime, it is case sensitive data structure.21. What is the output of below codejavascript\nconsole.log(NaN === NaN);\n1: True\n2: False\nAnswer: 2JavaScript follows IEEE 754 spec standards. As per this spec, NaNs are never equal for floating-point numbers.22. What is the output of below codejavascript\nlet numbers = [1, 2, 3, 4, NaN];\nconsole.log(numbers.indexOf(NaN));\n1: 4\n2: NaN\n3: SyntaxError\n4: -1\nAnswer: 4The indexOf uses strict equality operator(===) internally and NaN === NaN evaluates to false. Since indexOf won't be\nable to find NaN inside an array, it returns -1 always.\nBut you can use Array.prototype.findIndex method to find out the index of NaN in an array or You can\nuse Array.prototype.includes to check if NaN is present in an array or not.```javascript\nlet numbers = [1, 2, 3, 4, NaN];\nconsole.log(numbers.findIndex(Number.isNaN)); \/\/ 4console.log(numbers.includes(NaN)); \/\/ true\n```23. What is the output of below codejavascript\nlet [a, ...b,] = [1, 2, 3, 4, 5];\nconsole.log(a, b);\n1: 1, [2, 3, 4, 5]\n2: 1, {2, 3, 4, 5}\n3: SyntaxError\n4: 1, [2, 3, 4]\nAnswer: 3When using rest parameters, trailing commas are not allowed and will throw a SyntaxError.\nIf you remove the trailing comma then it displays 1st answerjavascript\nlet [a, ...b] = [1, 2, 3, 4, 5];\nconsole.log(a, b); \/\/ 1, [2, 3, 4, 5]25. What is the output of below codejavascript\nasync function func() {\n  return 10;\n}\nconsole.log(func());\n1: Promise {\\<fulfilled>: 10}\n2: 10\n3: SyntaxError\n4: Promise {\\<rejected>: 10}\nAnswer: 1Async functions always return a promise. But even if the return value of an async function is not explicitly a promise,\nit will be implicitly wrapped in a promise. The above async function is equivalent to below expression,javascript\nfunction func() {\n  return Promise.resolve(10);\n}26. What is the output of below codejavascript\nasync function func() {\n  await 10;\n}\nconsole.log(func());\n1: Promise {\\<fulfilled>: 10}\n2: 10\n3: SyntaxError\n4: Promise {\\<resolved>: undefined}\nAnswer: 4The await expression returns value 10 with promise resolution and the code after each await expression can be treated as\nexisting in a .then callback. In this case, there is no return expression at the end of the function. Hence, the\ndefault return value of undefined is returned as the resolution of the promise. The above async function is equivalent\nto below expression,javascript\nfunction func() {\n  return Promise.resolve(10).then(() => undefined);\n}27. What is the output of below code```javascript\nfunction delay() {\n  return new Promise(resolve => setTimeout(resolve, 2000));\n}async function delayedLog(item) {\n  await delay();\n  console.log(item);\n}async function processArray(array) {\n  array.forEach(item => {\n    await delayedLog(item);\n  })\n}processArray([1, 2, 3, 4]);\n```\n1: SyntaxError\n2: 1, 2, 3, 4\n3: 4, 4, 4, 4\n4: 4, 3, 2, 1\nAnswer: 1Even though \u201cprocessArray\u201d is an async function, the anonymous function that we use for forEach is synchronous. If you\nuse await inside a synchronous function then it throws a syntax error.28. What is the output of below code```javascript\nfunction delay() {\n  return new Promise((resolve) => setTimeout(resolve, 2000));\n}async function delayedLog(item) {\n  await delay();\n  console.log(item);\n}async function process(array) {\n  array.forEach(async (item) => {\n    await delayedLog(item);\n  });\n  console.log(\"Process completed!\");\n}\nprocess([1, 2, 3, 5]);\n```\n1: 1 2 3 5 and Process completed!\n2: 5 5 5 5 and Process completed!\n3: Process completed! and 5 5 5 5\n4: Process completed! and 1 2 3 5\nAnswer: 4The forEach method will not wait until all items are finished but it just runs the tasks and goes next. Hence, the last\nstatement is displayed first followed by a sequence of promise resolutions.But you control the array sequence using for..of loop,javascript\nasync function processArray(array) {\n  for (const item of array) {\n    await delayedLog(item);\n  }\n  console.log(\"Process completed!\");\n}29. What is the output of below codejavascript\nvar set = new Set();\nset.add(\"+0\").add(\"-0\").add(NaN).add(undefined).add(NaN);\nconsole.log(set);\n1: Set(4) {\"+0\", \"-0\", NaN, undefined}\n2: Set(3) {\"+0\", NaN, undefined}\n3: Set(5) {\"+0\", \"-0\", NaN, undefined, NaN}\n4: Set(4) {\"+0\", NaN, undefined, NaN}\nAnswer: 1Set has few exceptions from equality check,\nAll NaN values are equal\nBoth +0 and -0 considered as different values\n30. What is the output of below code```javascript\nconst sym1 = Symbol(\"one\");\nconst sym2 = Symbol(\"one\");const sym3 = Symbol.for(\"two\");\nconst sym4 = Symbol.for(\"two\");console.log(sym1 === sym2, sym3 === sym4);\n```\n1: true, true\n2: true, false\n3: false, true\n4: false, false\nAnswer: 3Symbol follows below conventions,\nEvery symbol value returned from Symbol() is unique irrespective of the optional string.\nSymbol.for() function creates a symbol in a global symbol registry list. But it doesn't necessarily create a new\n   symbol on every call, it checks first if a symbol with the given key is already present in the registry and returns\n   the symbol if it is found. Otherwise a new symbol created in the registry.\nNote: The symbol description is just useful for debugging purposes.31. What is the output of below codejavascript\nconst sym1 = new Symbol(\"one\");\nconsole.log(sym1);\n1: SyntaxError\n2: one\n3: Symbol('one')\n4: Symbol\nAnswer: 1Symbol is a just a standard function and not an object constructor(unlike other primitives new Boolean, new String and\nnew Number). So if you try to call it with the new operator will result in a TypeError32. What is the output of below code```javascript\nlet myNumber = 100;\nlet myString = \"100\";if (!typeof myNumber === \"string\") {\n  console.log(\"It is not a string!\");\n} else {\n  console.log(\"It is a string!\");\n}if (!typeof myString === \"number\") {\n  console.log(\"It is not a number!\");\n} else {\n  console.log(\"It is a number!\");\n}\n```\n1: SyntaxError\n2: It is not a string!, It is not a number!\n3: It is not a string!, It is a number!\n4: It is a string!, It is a number!\nAnswer: 4The return value of typeof myNumber or typeof myString is always a truthy value (either \"number\" or \"string\"). The !\noperator operates on either typeof myNumber or typeof myString, converting them to boolean values. Since the value\nof both !typeof myNumber and !typeof myString is false, the if condition fails, and control goes to else block.To make the ! operator operate on the equality expression, one needs to add parentheses:if (!(typeof myNumber === \"string\"))Or simply use the inequality operator:if (typeof myNumber !== \"string\")33. What is the output of below codejavascript\nconsole.log(\n  JSON.stringify({ myArray: [\"one\", undefined, function () {}, Symbol(\"\")] })\n);\nconsole.log(\n  JSON.stringify({ [Symbol.for(\"one\")]: \"one\" }, [Symbol.for(\"one\")])\n);\n1: {\"myArray\":['one', undefined, {}, Symbol]}, {}\n2: {\"myArray\":['one', null,null,null]}, {}\n3: {\"myArray\":['one', null,null,null]}, \"{ [Symbol.for('one')]: 'one' }, [Symbol.for('one')]\"\n4: {\"myArray\":['one', undefined, function(){}, Symbol('')]}, {}\nAnswer: 2The symbols has below constraints,\nThe undefined, Functions, and Symbols are not valid JSON values. So those values are either omitted (in an object) or\n   changed to null (in an array). Hence, it returns null values for the value array.\nAll Symbol-keyed properties will be completely ignored. Hence it returns an empty object({}).\n34. What is the output of below code```javascript\nclass A {\n  constructor() {\n    console.log(new.target.name);\n  }\n}class B extends A {\n  constructor() {\n    super();\n  }\n}new A();\nnew B();\n```\n1: A, A\n2: A, B\nAnswer: 2Using constructors, new.target refers to the constructor (points to the class definition of class which is\ninitialized) that was directly invoked by new. This also applies to the case if the constructor is in a parent class and\nwas delegated from a child constructor.35. What is the output of below codejavascript\nconst [x, ...y, z] = [1, 2, 3, 4];\nconsole.log(x, y, z);\n1: 1, [2, 3], 4\n2: 1, [2, 3, 4], undefined\n3: 1, [2], 3\n4: SyntaxError\nAnswer: 4It throws a syntax error because the rest element should not have a trailing comma. You should always consider using a\nrest operator as the last element.36. What is the output of below code```javascript\nconst { a: x = 10, b: y = 20 } = { a: 30 };console.log(x);\nconsole.log(y);\n```\n1: 30, 20\n2: 10, 20\n3: 10, undefined\n4: 30, undefined\nAnswer: 1The object property follows below rules,\nThe object properties can be retrieved and assigned to a variable with a different name\nThe property assigned a default value when the retrieved value is undefined\n37. What is the output of below code```javascript\nfunction area({ length = 10, width = 20 }) {\n  console.log(length * width);\n}area();\n```\n1: 200\n2: Error\n3: undefined\n4: 0\nAnswer: 2If you leave out the right-hand side assignment for the destructuring object, the function will look for at least one\nargument to be supplied when invoked. Otherwise you will receive an\nerror Error: Cannot read property 'length' of undefined as mentioned above.You can avoid the error with either of the below changes,\nPass at least an empty object:\n```javascript\nfunction area({ length = 10, width = 20 }) {\n  console.log(length * width);\n}area({});\n```\nAssign default empty object:\n```javascript\nfunction area({ length = 10, width = 20 } = {}) {\n  console.log(length * width);\n}area();\n```38. What is the output of below code```javascript\nconst props = [\n  { id: 1, name: \"John\" },\n  { id: 2, name: \"Jack\" },\n  { id: 3, name: \"Tom\" },\n];const [, , { name }] = props;\nconsole.log(name);\n```\n1: Tom\n2: Error\n3: undefined\n4: John\nAnswer: 1It is possible to combine Array and Object destructuring. In this case, the third element in the array props accessed\nfirst followed by name property in the object.39. What is the output of below code```javascript\nfunction checkType(num = 1) {\n  console.log(typeof num);\n}checkType();\ncheckType(undefined);\ncheckType(\"\");\ncheckType(null);\n```\n1: number, undefined, string, object\n2: undefined, undefined, string, object\n3: number, number, string, object\n4: number, number, number, number\nAnswer: 3If the function argument is set implicitly(not passing argument) or explicitly to undefined, the value of the argument\nis the default parameter. Whereas for other falsy values('' or null), the value of the argument is passed as a\nparameter.Hence, the result of function calls categorized as below,\nThe first two function calls logs number type since the type of default value is number\nThe type of '' and null values are string and object type respectively.\n40. What is the output of below code```javascript\nfunction add(item, items = []) {\n  items.push(item);\n  return items;\n}console.log(add(\"Orange\"));\nconsole.log(add(\"Apple\"));\n```\n1: ['Orange'], ['Orange', 'Apple']\n2: ['Orange'], ['Apple']\nAnswer: 2Since the default argument is evaluated at call time, a new object is created each time the function is called. So in\nthis case, the new array is created and an element pushed to the default empty array.41. What is the output of below code```javascript\nfunction greet(greeting, name, message = greeting + \" \" + name) {\n  console.log([greeting, name, message]);\n}greet(\"Hello\", \"John\");\ngreet(\"Hello\", \"John\", \"Good morning!\");\n```\n1: SyntaxError\n2: ['Hello', 'John', 'Hello John'], ['Hello', 'John', 'Good morning!']\nAnswer: 2Since parameters defined earlier are available to later default parameters, this code snippet doesn't throw any error.42. What is the output of below codejavascript\nfunction outer(f = inner()) {\n  function inner() {\n    return \"Inner\";\n  }\n}\nouter();\n1: ReferenceError\n2: Inner\nAnswer: 1The functions and variables declared in the function body cannot be referred from default value parameter initializers.\nIf you still try to access, it throws a run-time ReferenceError(i.e, inner is not defined).43. What is the output of below code```javascript\nfunction myFun(x, y, ...manyMoreArgs) {\n  console.log(manyMoreArgs);\n}myFun(1, 2, 3, 4, 5);\nmyFun(1, 2);\n```\n1: [3, 4, 5], undefined\n2: SyntaxError\n3: [3, 4, 5], []\n4: [3, 4, 5], [undefined]\nAnswer: 3The rest parameter is used to hold the remaining parameters of a function and it becomes an empty array if the argument\nis not provided.44. What is the output of below codejavascript\nconst obj = { key: \"value\" };\nconst array = [...obj];\nconsole.log(array);\n1: ['key', 'value']\n2: TypeError\n3: []\n4: ['key']\nAnswer: 2Spread syntax can be applied only to iterable objects. By default, Objects are not iterable, but they become iterable\nwhen used in an Array, or with iterating functions such as map(), reduce(), and assign(). If you still try to do it,\nit still throws TypeError: obj is not iterable.45. What is the output of below codejavascript\nfunction* myGenFunc() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\nvar myGenObj = new myGenFunc();\nconsole.log(myGenObj.next().value);\n1: 1\n2: undefined\n3: SyntaxError\n4: TypeError\nAnswer: 4Generators are not constructible type. But if you still proceed to do, there will be an error saying \"TypeError:\nmyGenFunc is not a constructor\"46. What is the output of below code```javascript\nfunction* yieldAndReturn() {\n  yield 1;\n  return 2;\n  yield 3;\n}var myGenObj = yieldAndReturn();\nconsole.log(myGenObj.next());\nconsole.log(myGenObj.next());\nconsole.log(myGenObj.next());\n```\n1: { value: 1, done: false }, { value: 2, done: true }, { value: undefined, done: true }\n2: { value: 1, done: false }, { value: 2, done: false }, { value: undefined, done: true }\n3: { value: 1, done: false }, { value: 2, done: true }, { value: 3, done: true }\n4: { value: 1, done: false }, { value: 2, done: false }, { value: 3, done: true }\nAnswer: 1A return statement in a generator function will make the generator finish. If a value is returned, it will be set as the\nvalue property of the object and done property to true. When a generator is finished, subsequent next() calls return an\nobject of this form: {value: undefined, done: true}.47. What is the output of below code```javascript\nconst myGenerator = (function* () {\n  yield 1;\n  yield 2;\n  yield 3;\n})();\nfor (const value of myGenerator) {\n  console.log(value);\n  break;\n}for (const value of myGenerator) {\n  console.log(value);\n}\n```\n1: 1,2,3 and 1,2,3\n2: 1,2,3 and 4,5,6\n3: 1 and 1\n4: 1\nAnswer: 4The generator should not be re-used once the iterator is closed. i.e, Upon exiting a loop(on completion or using break &\nreturn), the generator is closed and trying to iterate over it again does not yield any more results. Hence, the second\nloop doesn't print any value.48. What is the output of below codejavascript\nconst num = 0o38;\nconsole.log(num);\n1: SyntaxError\n2: 38\nAnswer: 1If you use an invalid number(outside of 0-7 range) in the octal literal, JavaScript will throw a SyntaxError. In ES5, it\ntreats the octal literal as a decimal number.49. What is the output of below code```javascript\nconst squareObj = new Square(10);\nconsole.log(squareObj.area);class Square {\n  constructor(length) {\n    this.length = length;\n  }get area() {\n    return this.length * this.length;\n  }set area(value) {\n    this.area = value;\n  }\n}\n```\n1: 100\n2: ReferenceError\nAnswer: 2Unlike function declarations, class declarations are not hoisted. i.e, First You need to declare your class and then\naccess it, otherwise it will throw a ReferenceError \"Uncaught ReferenceError: Square is not defined\".Note: Class expressions also applies to the same hoisting restrictions of class declarations.50. What is the output of below code```javascript\nfunction Person() {}Person.prototype.walk = function () {\n  return this;\n};Person.run = function () {\n  return this;\n};let user = new Person();\nlet walk = user.walk;\nconsole.log(walk());let run = Person.run;\nconsole.log(run());\n```\n1: undefined, undefined\n2: Person, Person\n3: SyntaxError\n4: Window, Window\nAnswer: 4When a regular or prototype method is called without a value for this, the methods return an initial this value if\nthe value is not undefined. Otherwise global window object will be returned. In our case, the initial this value is\nundefined so both methods return window objects.51. What is the output of below code```javascript\nclass Vehicle {\n  constructor(name) {\n    this.name = name;\n  }start() {\n    console.log(${this.name} vehicle started);\n  }\n}class Car extends Vehicle {\n  start() {\n    console.log(${this.name} car started);\n    super.start();\n  }\n}const car = new Car(\"BMW\");\nconsole.log(car.start());\n```\n1: SyntaxError\n2: BMW vehicle started, BMW car started\n3: BMW car started, BMW vehicle started\n4: BMW car started, BMW car started\nAnswer: 3The super keyword is used to call methods of a superclass. Unlike other languages the super invocation doesn't need to\nbe a first statement. i.e, The statements will be executed in the same order of code.52. What is the output of below codejavascript\nconst USER = { age: 30 };\nUSER.age = 25;\nconsole.log(USER.age);\n1: 30\n2: 25\n3: Uncaught TypeError\n4: SyntaxError\nAnswer: 2Even though we used constant variables, the content of it is an object and the object's contents (e.g properties) can be\naltered. Hence, the change is going to be valid in this case.53. What is the output of below codejavascript\nconsole.log(\"\ud83d\ude42\" === \"\ud83d\ude42\");\n1: false\n2: true\nAnswer: 2Emojis are unicodes and the unicode for smile symbol is \"U+1F642\". The unicode comparision of same emojies is equivalent\nto string comparison. Hence, the output is always true.54. What is the output of below code?javascript\nconsole.log(typeof typeof typeof true);\n1: string\n2: boolean\n3: NaN\n4: number\nAnswer: 1The typeof operator on any primitive returns a string value. So even if you apply the chain of typeof operators on the\nreturn value, it is always string.55. What is the output of below code?```javascript\nlet zero = new Number(0);if (zero) {\n  console.log(\"If\");\n} else {\n  console.log(\"Else\");\n}\n```\n1: If\n2: Else\n3: NaN\n4: SyntaxError\nAnswer: 1\nThe type of operator on new Number always returns object. i.e, typeof new Number(0) --> object.\nObjects are always truthy in if block\nHence the above code block always goes to if section.55. What is the output of below code in non strict mode?```javascript\nlet msg = \"Good morning!!\";msg.name = \"John\";console.log(msg.name);\n```\n1: \"\"\n2: Error\n3: John\n4: Undefined\nAnswer: 4It returns undefined for non-strict mode and returns Error for strict mode. In non-strict mode, the wrapper object is\ngoing to be created and get the mentioned property. But the object get disappeared after accessing the property in next\nline.56. What is the output of below code?```javascript\nlet count = 10;(function innerFunc() {\n  if (count === 10) {\n    let count = 11;\n    console.log(count);\n  }\n  console.log(count);\n})();\n```\n1: 11, 10\n2: 11, 11\n3: 10, 11\n4: 10, 10\nAnswer: 111 and 10 is logged to the console.The innerFunc is a closure which captures the count variable from the outerscope. i.e, 10. But the conditional has\nanother local variable count which overwrites the ourter count variable. So the first console.log displays value 11.\nWhereas the second console.log logs 10 by capturing the count variable from outerscope.57. What is the output of below code ?\n1: console.log(true && 'hi');\n2: console.log(true && 'hi' && 1);\n3: console.log(true && '' && 0);\nAnswer:\n1: hi\n2: 1\n3: ''\nReason : The operator returns the value of the first falsy operand encountered when evaluating from left to right, or\nthe value of the last operand if they are all truthy.Note: Below these values are consider as falsy value\n1: 0\n2: ''\n3: null\n4: undefined\n5: NAN\n58. What is the output of below code ?```javascript\nlet arr = [1, 2, 3];\nlet str = \"1,2,3\";console.log(arr == str);\n```\n1: false\n2: Error\n3: true\nAnswer: 3Arrays have their own implementation of toString method that returns a comma-separated list of elements. So the above\ncode snippet returns true. In order to avoid conversion of array type, we should use === for comparison.59. What is the output of below code?```javascript\ngetMessage();var getMessage = () => {\n  console.log(\"Good morning\");\n};\n```\n1: Good morning\n2: getMessage is not a function\n3: getMessage is not defined\n4: Undefined\nAnswer: 2Hoisting will move variables and functions to be the top of scope. Even though getMessage is an arrow function the above\nfunction will considered as a varible due to it's variable declaration or assignment. So the variables will have\nundefined value in memory phase and throws an error 'getMessage is not a function' at the code execution phase.60. What is the output of below code?```javascript\nlet quickPromise = Promise.resolve();quickPromise.then(() => console.log(\"promise finished\"));console.log(\"program finished\"); \n```\n1: program finished\n2: Cannot predict the order\n3: program finished, promise finished\n4: promise finished, program finished\nAnswer: 3Even though a promise is resolved immediately, it won't be executed immediately because its .then\/catch\/finally\nhandlers or callbacks(aka task) are pushed into the queue. Whenever the JavaScript engine becomes free from the current\nprogram, it pulls a task from the queue and executes it. This is the reason why last statement is printed first before\nthe log of promise handler.Note: We call the above queue as \"MicroTask Queue\"61. What is the output of below code?javascript\nconsole.log('First line')\n['a', 'b', 'c'].forEach((element) => console.log(element))\nconsole.log('Third line')\n1: First line, then print a, b, c in a new line, and finally print Third line as next line\n2: First line, then print a, b, c in a first line, and print Third line as next line\n3:  Missing semi-colon error\n4:  Cannot read properties of undefined\nAnswer: 4When JavaScript encounters a line break without a semicolon, the JavaScript parser will automatically add a semicolon\nbased on a set of rules called Automatic Semicolon Insertion which determines whether line break as end of statement\nor not to insert semicolon. But it does not assume a semicolon before square brackets [...]. So the first two lines\nconsidered as a single statement as below.javascript\nconsole.log('First line')['a', 'b', 'c'].forEach((element) => console.log(element))Hence, there will be cannot read properties of undefined error while applying the array square bracket on log\nfunction.62. Write a function that returns a random HEX colorSolution 1 (Iterative generation)\n\n\n```javascript\nconst HEX_ALPHABET = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"];\nconst HEX_PREFIX = \"#\";\nconst HEX_LENGTH = 6;\n\nfunction generateRandomHex() {\n    let randomHex = \"\";\n\n    for(let i = 0; i < HEX_LENGTH; i++) {\n        const randomIndex = Math.floor(Math.random() * HEX_ALPHABET.length);\n        randomHex += HEX_ALPHABET[randomIndex];\n    }\n\n    return HEX_PREFIX + randomHex;\n}\n\n```\n\nSolution 2 (One-liner)\n\n\n```javascript \nconst HEX_PREFIX = \"#\";\nconst HEX_RADIX = 16;\nconst HEX_LENGTH = 6;\n\nfunction generateRandomHex() {\n    return HEX_PREFIX + Math.floor(Math.random() * 0xffffff).toString(HEX_RADIX).padStart(HEX_LENGTH, \"0\");\n} \n```\n\n---\n\n#### 63. What is the output of below code?\n\n```javascript\nvar of = ['of'];\nfor(var of of of) {\n  console.log(of);\n}\n```\n\n- 1:  of\n- 2:  SyntaxError: Unexpected token of\n- 3:  SyntaxError: Identifier 'of' has already been declared\n- 4:  ReferenceError: of is not defined\n\n##### Answer: 1\n\nIn JavaScript, `of` is not considered as a reserved keyword. So the variable declaration with `of` is accepted and\nprints the array value `of` using for..of loop.\n\nBut if you use reserved keyword such as `in` then there will be a syntax error\nsaying `SyntaxError: Unexpected token in`,\n\n```javascript\nvar in = ['in'];\nfor(var in in in) {\n  console.log(in[in]);\n}\n```\n\n---\n\n#### 64. What is the output of below code?\n\n```javascript\nconst numbers = [11, 25, 31, 23, 33, 18, 200];\nnumbers.sort();\nconsole.log(numbers);\n```\n\n- 1:  [11, 18, 23, 25, 31, 33, 200]\n- 2:  [11, 18, 200, 23, 25, 31, 33]\n- 3:  [11, 25, 31, 23, 33, 18, 200]\n- 4:  Cannot sort numbers\n\n##### Answer: 2\n\nBy default, the sort method sorts elements alphabetically. This is because elemented converted to strings and strings\ncompared in UTF-16 code units order. Hence, you will see the above numbers not sorted as expected. In order to sort\nnumerically just supply a comparator function which handles numeric sorts.\n\n```javascript\nconst numbers = [11, 25, 31, 23, 33, 18, 200];\nnumbers.sort((a, b) => a - b);\nconsole.log(numbers);\n```\n\n**Note:** Sort() method changes the original array.\n\n---\n\n#### 65. What is the output order of below code?\n\n```javascript\nsetTimeout(() => {console.log('1')}, 0);\nPromise.resolve('hello').then(() => console.log('2'));\nconsole.log('3');\n```\n\n- 1:  1, 2, 3\n- 2:  1, 3, 2\n- 3:  3, 1, 2\n- 4:  3, 2, 1\n\n##### Answer: 4\n\nWhen the JavaScript engine parses the above code, the first two statements are asynchronous which will be executed later\nand third statement is synchronous statement which will be moved to callstack, executed and prints the number 3 in the\nconsole. Next, Promise is native in ES6 and it will be moved to Job queue which has high priority than callback queue in\nthe execution order. At last, since setTimeout is part of WebAPI the callback function moved to callback queue and\nexecuted. Hence, you will see number 2 printed first followed by 1.\n\n---\n\n#### 66. What is the output of below code?\n\n```javascript\nconsole.log(name);\nconsole.log(message());\nvar name = 'John';\n(function message() {\n   console.log('Hello John: Welcome');\n});\n```\n\n- 1:  John, Hello John: Welcome\n- 2:  undefined, Hello John, Welcome\n- 3:  Reference error: name is not defined, Reference error: message is not defined\n- 4:  undefined, Reference error: message is not defined\n\n##### Answer: 4\n\nIIFE(Immediately Invoked Function Expression) is just like any other function expression which won't be hoisted. Hence,\nthere will be a reference error for message call.\nThe behavior would be the same with below function expression of message1,\n\n```javascript\nconsole.log(name);\nconsole.log(message());\nvar name = 'John';\nvar message = function () {\n   console.log('Hello John: Welcome');\n});\n```\n\n---\n\n#### 67. What is the output of below code?\n\n```javascript\nmessage()\n\nfunction message() {\n  console.log(\"Hello\");\n}\nfunction message() {\n  console.log(\"Bye\");\n}\n```\n\n- 1:  Reference error: message is not defined\n- 2:  Hello\n- 3:  Bye\n- 4:  Compile time error\n\n##### Answer: 3\n\nAs part of hoisting, initially JavaScript Engine or compiler will store first function in heap memory but later rewrite\nor replaces with redefined function content.\n\n---\n\n#### 68. What is the output of below code?\n\n```javascript\nvar currentCity = \"NewYork\";\n\nvar changeCurrentCity = function() {\n  console.log('Current City:', currentCity);\n  var currentCity = \"Singapore\";\n  console.log('Current City:', currentCity);\n}\n\nchangeCurrentCity();\n```\n\n- 1:  NewYork, Singapore\n- 2:  NewYork, NewYork\n- 3:  undefined, Singapore\n- 4:  Singapore, Singapore\n\n##### Answer: 3\n\nDue to hositing feature, the variables declared with `var` will have `undefined` value in the creation phase so the\nouter variable `currentCity` will get same `undefined` value. But after few lines of code JavaScript engine found a new\nfunction call(`changeCurrentCity()`) to update the current city with `var` re-declaration. Since each function call will\ncreate a new execution context, the same variable will have `undefined` value before the declaration and new\nvalue(`Singapore`) after the declarion. Hence, the value `undefined` print first followed by new value `Singapore` in\nthe execution phase.\n\n---\n\n#### 69. What is the output of below code in an order?\n\n```javascript\nfunction second() {\n    var message;\n  console.log(message);\n}\n\nfunction first() {\n    var message=\"first\";\n  second();\n  console.log(message);\n}\n\nvar message = \"default\";\nfirst();\nconsole.log(message);\n```\n\n- 1:  undefined, first, default\n- 2:  default, default, default\n- 3:  first, first, default\n- 4:  undefined, undefined, undefined\n\n##### Answer: 1\n\nEach context(global or functional) has it's own variable environment and the callstack of variables in a LIFO order. So\nyou can see the message variable value from second, first functions in an order followed by global context message\nvariable value at the end.\n\n---\n\n#### 70. What is the output of below code?\n\n```javascript\nvar expressionOne = function functionOne() {\n  console.log(\"functionOne\");\n}\nfunctionOne();\n```\n\n- 1:  functionOne is not defined\n- 2:  functionOne\n- 3:  console.log(\"functionOne\")\n- 4:  undefined\n\n##### Answer: 1\n\nThe function call `functionOne` is not going to be part of scope chain and it has it's own execution context with the\nenclosed variable environment. i.e, It won't be accessed from global context. Hence, there will be an error while\ninvoking the function as `functionOne is not defined`.\n\n---\n\n#### 71. What is the output of below code?\n\n```javascript\nconst user = {\n  name: 'John',\n  eat() {\n    console.log(this);\n    var eatFruit = function() {\n      console.log(this);\n    }\n    eatFruit()\n  }\n}\nuser.eat();\n```\n\n- 1:  {name: \"John\", eat: f}, {name: \"John\", eat: f}\n- 2:  Window {...}, Window {...}\n- 3:  {name: \"John\", eat: f}, undefined\n- 4:  {name: \"John\", eat: f}, Window {...}\n\n##### Answer: 4\n\n`this` keyword is dynamic scoped but not lexically scoped . In other words, it doesn't matter where `this` has been\nwritten but how it has been invoked really matter. In the above code snippet, the `user` object invokes `eat` function\nso `this` keyword refers to `user` object but `eatFruit` has been invoked by `eat` function and `this` will have\ndefault `Window` object.\n\nThe above pit fall fixed by three ways,\n\n1. In ES6, the arrow function will make `this` keyword as lexically scoped. Since the surrounding object of `this`\n   object is `user` object, the `eatFruit` function will contain `user` object for `this` object.\n\n```javascript\nconst user = {\n  name: 'John',\n  eat() {\n    console.log(this);\n    var eatFruit = () => {\n      console.log(this);\n    }\n    eatFruit()\n  }\n}\nuser.eat();\n```\n\nThe next two solutions have been used before ES6 introduced.\n\n2. It is possible create a reference of `this` into a separate variable and use that new variable inplace of `this`\n   keyword inside `eatFruit` function. This is a common practice in jQuery and AngularJS before ES6 introduced.\n\n```javascript\nconst user = {\n  name: 'John',\n  eat() {\n    console.log(this);\n    var self = this;\n    var eatFruit = () => {\n      console.log(self);\n    }\n    eatFruit()\n  }\n}\nuser.eat();\n```\n\n3. The `eatFruit` function can bind explicitly with `this` keyword where it refers `Window` object.\n\n```javascript\nconst user = {\n  name: 'John',\n  eat() {\n    console.log(this);\n    var eatFruit = function() {\n      console.log(this);\n    }\n    return eatFruit.bind(this)\n  }\n}\nuser.eat()();\n```\n\n---\n\n#### 72. What is the output of below code?\n\n```javascript\nlet message = 'Hello World!';\nmessage[0] = 'J';\nconsole.log(message)\n\nlet name = 'John';\nname = name + ' Smith';\nconsole.log(name);\n```\n\n- 1:  Jello World!, John Smith\n- 2:  Jello World!, John\n- 3:  Hello World!, John Smith\n- 4:  Hello World!, John\n\n##### Answer: 3\n\nIn JavaScript, primitives are immutable i.e. there is no way to change a primitive value once it gets created. So when\nyou try to update the string's first character, there is no change in the string value and prints the same initial\nvalue `Hello World!`. Whereas in the later example, the concatenated value is re-assigned to the same variable which\nwill result into creation of new memory block with the reference pointing to `John Smith` value and the old memory block\nvalue(`John`) will be garbage collected.\n\n---\n\n#### 73. What is the output of below code?\n\n```javascript\nlet user1 = { \n      name : 'Jacob',\n      age : 28\n    };\n\nlet user2 = {    \n      name : 'Jacob',\n      age : 28\n    };\n\nconsole.log(user1 === user2);\n```\n\n- 1:  True\n- 2:  False\n- 3:  Compile time error\n\n##### Answer: 2\n\nIn JavaScript, the variables such as objects, arrays and functions comes under pass by reference. When you try to\ncompare two objects with same content, it is going to compare memory address or reference of those variables. These\nvariables always create separate memory blocks hence the comparison is always going to return false value.\n\n---\n\n#### 74. What is the output of below code?\n\n```javascript\nfunction greeting() {\n  setTimeout(function() {\n    console.log(message);\n  }, 5000);\n  const message = \"Hello, Good morning\";\n}\ngreeting();\n```\n\n- 1:  Undefined\n- 2:  Reference error:\n- 3:  Hello, Good morning\n- 4:  null\n\n##### Answer: 3\n\nThe variable `message` is still treated as closure(since it has been used in inner function) eventhough it has been\ndeclared after setTimeout function. The function with in setTimeout function will be sent to WebAPI and the variable\ndeclaration executed with in 5 seconds with the assigned value. Hence, the text declared for the variable will be\ndisplayed.\n\n---\n\n#### 75. What is the output of below code?\n\n```javascript\nconst a = new Number(10);\nconst b = 10;\nconsole.log(a === b);\n```\n\n- 1:  False\n- 2:  True\n\n##### Answer: 1\n\nEventhough both variables `a` and `b` refer a number value, the first declaration is based on constructor function and\nthe type of the variable is going to be `object` type. Whereas the second declaration is primitive assignment with a\nnumber and the type is `number` type. Hence, the equality operator `===` will output `false` value.\n\n---\n\n#### 76. What is the type of below function?\n\n```javascript\nfunction add(a, b) {\n  console.log(\"The input arguments are: \", a, b);\n  return a + b;\n}\n```\n\n- 1:  Pure function\n- 2:  Impure function\n\n##### Answer: 2\n\nEventhough the above function returns the same result for the same arguments(input) that are passed in the function,\nthe `console.log()` statement causes a function to have side effects because it affects the state of an external code.\ni.e, the `console` object's state and depends on it to perform the job. Hence, the above function considered as impure\nfunction.\n\n---\n\n#### 77. What is the output of below code?\n\n```javascript\nconst promiseOne = new Promise((resolve, reject) => setTimeout(resolve, 4000));\nconst promiseTwo = new Promise((resolve, reject) => setTimeout(reject, 4000));\n\nPromise.all([promiseOne, promiseTwo]).then(data => console.log(data));\n```\n\n- 1:  [{status: \"fullfilled\", value: undefined}, {status: \"rejected\", reason: undefined}]\n- 2:  [{status: \"fullfilled\", value: undefined}, Uncaught(in promise)]\n- 3:  Uncaught (in promise)\n- 4:  [Uncaught(in promise), Uncaught(in promise)]\n\n##### Answer: 3\n\nThe above promises settled at the same time but one of them resolved and other one rejected. When you use `.all` method\non these promises, the result will be short circuted by throwing an error due to rejection in second promise. But If you\nuse `.allSettled` method then result of both the promises will be returned irrespective of resolved or rejected promise\nstatus without throwing any error.\n\n```javascript\nPromise.allSettled([promiseOne, promiseTwo]).then(data => console.log(data));\n```\n\n---\n\n#### 78. What is the output of below code?\n\n```javascript\ntry {\n  setTimeout(() => {\n    console.log('try block');\n    throw new Error(`An exception is thrown`)\n  }, 1000);\n} catch(err) {\n  console.log('Error: ', err);\n}\n```\n\n- 1:  try block, Error: An exception is thrown\n- 2:  Error: An exception is thrown\n- 3:  try block, Uncaught Error: Exception is thrown\n- 4:  Uncaught Error: Exception is thrown\n\n##### Answer: 3\n\nIf you put `setTimeout` and `setInterval` methods inside the try clause and an exception is thrown, the catch clause\nwill not catch any of them. This is because the try...catch statement works synchronously, and the function in the above\ncode is executed asynchronously after a certain period of time. Hence, you will see runtime exception without catching\nthe error. To resolve this issue, you have to put the try...catch block inside the function as below,\n\n```javascript\nsetTimeout(() => {\n   try {\n      console.log('try block');\n      throw new Error(`An exception is thrown`)\n   } catch(err) {\n      console.log('Error: ', err);\n   }\n\n  }, 1000);\n```\n\nYou can use `.catch()` function in promises to avoid these issues with asynchronous code."},{"question":"What is React?","answer":"React(aka React.js or ReactJS) is an open-source front-end JavaScript library that is used for building composable user interfaces, especially for single-page applications. It is used for handling view layer for web and mobile apps based on components in a declarative approach. React was created by Jordan Walke, a software engineer working for Facebook. React was first deployed on Facebook's News Feed in 2011 and on Instagram in 2012."},{"question":"What is the history behind React evolution?","answer":"The history of ReactJS started in 2010 with the creation of **XHP**. XHP is a PHP extension which improved the syntax of the language such that XML document fragments become valid PHP expressions and the primary purpose was used to create custom and reusable HTML elements.\nThe main principle of this extension was to make front-end code easier to understand and to help avoid cross-site scripting attacks. The project was successful to prevent the malicious content submitted by the scrubbing user.But there was a different problem with XHP in which dynamic web applications require many roundtrips to the server, and XHP did not solve this problem. Also, the whole UI was re-rendered for small change in the application. Later, the initial prototype of React is created with the name FaxJ by Jordan inspired from XHP. Finally after sometime React has been introduced as a new library into JavaScript world.Note: JSX comes from the idea of XHP\n\nWhat are the major features of React?\n\nThe major features of React are:\nUses JSX syntax, a syntax extension of JS that allows developers to write HTML in their JS code.\nIt uses Virtual DOM instead of Real DOM considering that Real DOM manipulations are expensive.\nSupports server-side rendering which is useful for Search Engine Optimizations(SEO).\nFollows Unidirectional or one-way data flow or data binding.\n\nUses reusable\/composable UI components to develop the view.\n\n\nWhat is JSX?\n\nJSX stands for JavaScript XML and it is an XML-like syntax extension to ECMAScript. Basically it just provides the syntactic sugar for the React.createElement(type, props, ...children) function, giving us expressiveness of JavaScript along with HTML like template syntax.In the example below, the text inside <h1> tag is returned as JavaScript function to the render function.jsx harmony\nexport default function App() {\n  return (\n      <h1 className=\"greeting\">{\"Hello, this is a JSX Code!\"}<\/h1>\n  );\n}\nIf you don't use JSX syntax then the respective JavaScript code should be written as below,```javascript\nimport { createElement } from 'react';export default function App() {\n  return createElement(\n    'h1',\n    { className: 'greeting' },\n    'Hello, this is a JSX Code!'\n  );\n}\n```See Class\n\njsx harmony\nclass App extends React.Component {\n  render() {\n    return (\n        <h1 className=\"greeting\">{\"Hello, this is a JSX Code!\"}<\/h1>\n    );\n  }\n}\n\nNote: JSX is stricter than HTML\n\nWhat is the difference between Element and Component?\n\nAn Element is a plain object describing what you want to appear on the screen in terms of the DOM nodes or other components. Elements can contain other Elements in their props. Creating a React element is cheap. Once an element is created, it cannot be mutated.The JavaScript representation(Without JSX) of React Element would be as follows:javascript\nconst element = React.createElement(\"div\", { id: \"login-btn\" }, \"Login\");\nand this element can be simiplified using JSXhtml\n  <div id=\"login-btn\">Login<\/div>The above React.createElement() function returns an object as below:{\n  type: 'div',\n  props: {\n    children: 'Login',\n    id: 'login-btn'\n  }\n}Finally, this element renders to the DOM using ReactDOM.render().Whereas a component can be declared in several different ways. It can be a class with a render() method or it can be defined as a function. In either case, it takes props as an input, and returns a JSX tree as the output:javascript\nconst Button = ({ handleLogin }) => (\n  <div id={\"login-btn\"} onClick={handleLogin}>\n    Login\n  <\/div>\n);Then JSX gets transpiled to a React.createElement() function tree:javascript\nconst Button = ({ handleLogin }) =>\n  React.createElement(\n    \"div\",\n    { id: \"login-btn\", onClick: handleLogin },\n    \"Login\"\n  );\n\nHow to create components in React?\n\nComponents are the building blocks of creating User Interfaces(UI) in React. There are two possible ways to create a component.\nFunction Components: This is the simplest way to create a component. Those are pure JavaScript functions that accept props object as the first parameter and return React elements to render the output:\njsx harmony\n   function Greeting({ message }) {\n     return <h1>{`Hello, ${message}`}<\/h1>;\n   }\nClass Components: You can also use ES6 class to define a component. The above function component can be written as a class component:\njsx harmony\n   class Greeting extends React.Component {\n     render() {\n       return <h1>{`Hello, ${this.props.message}`}<\/h1>;\n     }\n   }\n\nWhen to use a Class Component over a Function Component?\n\nAfter the addition of Hooks(i.e. React 16.8 onwards) it is always recommended to use Function components over Class components  in React. Because you could use state, lifecycle methods and other features that were only available in class component present in function component too. But even there are two reasons to use Class components over Function components.\nIf you need a React functionality whose Function component equivalent is not present yet, like Error Boundaries. \nIn older versions, If the component needs state or lifecycle methods then you need to use class component.\nNote: You can also use reusable react error boundary third-party component without writing any class. i.e, No need to use class components for Error boundaries.The usage of Error boundaries from the above library is quite straight forward.```jsx\n\"use client\";import { ErrorBoundary } from \"react-error-boundary\";Something went wrong\\}>\n  \n\n```\n\nWhat are Pure Components?\n\nPure components are the components which render the same output for the same state and props. In function components, you can achieve these pure components through memoized React.memo() API wrapping around the component. This API prevents unnecessary re-renders by comparing the previous props and new props using shallow comparison. So it will be helpful for performance optimizations. But at the same time, it won't compare the previous state with the current state because function component itself prevents the unnecessary rendering by default when you set the same state again.The syntactic representation of memoized components looks like below,jsx\nconst MemoizedComponent = memo(SomeComponent, arePropsEqual?);Below is the example of how child component(i.e., EmployeeProfile) prevents re-renders for the same props passed by parent component(i.e.,EmployeeRegForm).```jsx\n  import { memo, useState } from 'react';const EmployeeProfile = memo(function EmployeeProfile({ name, email }) {\n    return (<>\n          Name:{name}\nEmail: {email}\n          );\n  });\n  export default function EmployeeRegForm() {\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    return (\n      <>\n        \n          Name:  setName(e.target.value)} \/>\n        \n\n          Email:  setEmail(e.target.value)} \/>\n        \n\n\n\n    );\n  }\n```\nIn the above code, the email prop has not been passed to child component. So there won't be any re-renders for email prop change.In class components, the components extending React.PureComponent instead of  React.Component become the pure components. When props or state changes, PureComponent will do a shallow comparison on both props and state by invoking shouldComponentUpdate() lifecycle method. Note: React.memo() is a higher-order component.\n\nWhat is state in React?\n\nState of a component is an object that holds some information that may change over the lifetime of the component. The important point is whenever the state object changes, the component re-renders. It is always recommended to make our state as simple as possible and minimize the number of stateful components.Let's take an example of User component with message state. Here, useState hook has been used to add state to the User component and it returns an array with current state and function to update it.```jsx harmony\nimport React, { useState } from \"react\";function User() {\n  const [message, setMessage] = useState(\"Welcome to React world\");return (\n    \n{message}\n\n  );\n}\n```See Class\n\n```jsx harmony\nimport React from 'react';\nclass User extends React.Component {\n  constructor(props) {\n    super(props);\nthis.state = {\n  message: \"Welcome to React world\",\n};\n\n}\nrender() {\n    return (\n      \n{this.state.message}\n\n    );\n  }\n}\n```\n\nState is similar to props, but it is private and fully controlled by the component ,i.e., it is not accessible to any other component till the owner component decides to pass it.\n\nWhat are props in React?\n\nProps are inputs to components. They are single values or objects containing a set of values that are passed to components on creation similar to HTML-tag attributes. Here, the data is passed down from a parent component to a child component.The primary purpose of props in React is to provide following component functionality:\nPass custom data to your component.\nTrigger state changes.\nUse via this.props.reactProp inside component's render() method.\nFor example, let us create an element with reactProp property:jsx harmony\n<Element reactProp={\"1\"} \/>This reactProp (or whatever you came up with) attribute name then becomes a property attached to React's native props object which originally already exists on all components created using React library.jsx harmony\nprops.reactPropFor example, the usage of props in function component looks like below:```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";const ChildComponent = (props) => {\n  return (\n    \n{props.name}\n{props.age}\n\n  );\n};const ParentComponent = () => {\n  return (\n    \n\n\n\n  );\n};\n```"},{"question":"What are the major features of React?","answer":""},{"question":"What is JSX?","answer":""},{"question":"What is the difference between Element and Component?","answer":""},{"question":"How to create components in React?","answer":""},{"question":"When to use a Class Component over a Function Component?","answer":""},{"question":"What are Pure Components?","answer":""},{"question":"What is state in React?","answer":""},{"question":"What are props in React?","answer":""},{"question":"What is the difference between state and props?","answer":"In React, both state and props are plain JavaScript objects and used to manage the data of a component, but they are used in different ways and have different characteristics.\nstate is managed by the component itself and can be updated using the setState() function. Unlike props, state can be modified by the component and is used to manage the internal state of the component. Changes in the state trigger a re-render of the component and its children.\nprops (short for \"properties\") are passed to a component by its parent component and are read-only, meaning that they cannot be modified by the component itself. props can be used to configure the behavior of a component and to pass data between components."},{"question":"Why should we not update the state directly?","answer":"If you try to update the state directly then it won't re-render the component.javascript\n\/\/Wrong\nthis.state.message = \"Hello world\";Instead use setState() method. It schedules an update to a component's state object. When state changes, the component responds by re-rendering.javascript\n\/\/Correct\nthis.setState({ message: \"Hello World\" });Note: You can directly assign to the state object either in constructor or using latest javascript's class field declaration syntax."},{"question":"What is the purpose of callback function as an argument of setState()?","answer":"The callback function is invoked when setState finished and the component gets rendered. Since setState() is asynchronous the callback function is used for any post action.Note: It is recommended to use lifecycle method rather than this callback function.javascript\nsetState({ name: \"John\" }, () =>\n  console.log(\"The name has updated and component re-rendered\")\n);"},{"question":"What is the difference between HTML and React event handling?","answer":"Below are some of the main differences between HTML and React event handling,\nIn HTML, the event name usually represents in lowercase as a convention:\nhtml\n   <button onclick=\"activateLasers()\"><\/button>Whereas in React it follows camelCase convention:jsx harmony\n   <button onClick={activateLasers}>\nIn HTML, you can return false to prevent default behavior:\nhtml\n   <a\n     href=\"#\"\n     onclick='console.log(\"The link was clicked.\"); return false;'\n   \/>Whereas in React you must call preventDefault() explicitly:javascript\n   function handleClick(event) {\n     event.preventDefault();\n     console.log(\"The link was clicked.\");\n   }\nIn HTML, you need to invoke the function by appending ()\n   Whereas in react you should not append () with the function name. (refer \"activateLasers\" function in the first point for example)"},{"question":"How to bind methods or event handlers in JSX callbacks?","answer":"There are 3 possible ways to achieve this in class components:\nBinding in Constructor: In JavaScript classes, the methods are not bound by default. The same rule applies for React event handlers defined as class methods. Normally we bind them in constructor.\njavascript\n   class User extends Component {\n     constructor(props) {\n       super(props);\n       this.handleClick = this.handleClick.bind(this);\n     }\n     handleClick() {\n       console.log(\"SingOut triggered\");\n     }\n     render() {\n       return <button onClick={this.handleClick}>SingOut<\/button>;\n     }\n   }\nPublic class fields syntax: If you don't like to use bind approach then public class fields syntax can be used to correctly bind callbacks. The Create React App eanables this syntax by default.\njsx harmony\n   handleClick = () => {\n     console.log(\"SingOut triggered\", this);\n   };jsx harmony\n   <button onClick={this.handleClick}>SingOut<\/button>\nArrow functions in callbacks: It is possible to use arrow functions directly in the callbacks.\njsx harmony\n   handleClick() {\n       console.log('SingOut triggered');\n   }\n   render() {\n       return <button onClick={() => this.handleClick()}>SignOut<\/button>;\n   }Note: If the callback is passed as prop to child components, those components might do an extra re-rendering. In those cases, it is preferred to go with .bind() or public class fields syntax approach considering performance."},{"question":"How to pass a parameter to an event handler or callback?","answer":"You can use an arrow function to wrap around an event handler and pass parameters:jsx harmony\n<button onClick={() => this.handleClick(id)} \/>This is an equivalent to calling .bind:jsx harmony\n<button onClick={this.handleClick.bind(this, id)} \/>Apart from these two approaches, you can also pass arguments to a function which is defined as arrow functionjsx harmony\n<button onClick={this.handleClick(id)} \/>;\nhandleClick = (id) => () => {\n  console.log(\"Hello, your ticket number is\", id);\n};"},{"question":"What are synthetic events in React?","answer":"SyntheticEvent is a cross-browser wrapper around the browser's native event. Its API is same as the browser's native event, including stopPropagation() and preventDefault(), except the events work identically across all browsers. The native events can be accessed directly from synthetic events using nativeEvent attribute.Let's take an example of BookStore title search component with the ability to get all native event properties```js\nfunction BookStore() {\n  handleTitleChange(e) {\n    console.log('The new title is:', e.target.value);\n    \/\/ 'e' represents synthetic event\n    const nativeEvent = e.nativeEvent;\n    console.log(nativeEvent);\n    e.stopPropogation();\n    e.preventDefault();\n  }return \n}\n```"},{"question":"What are inline conditional expressions?","answer":"You can use either if statements or ternary expressions which are available from JS to conditionally render expressions. Apart from these approaches, you can also embed any expressions in JSX by wrapping them in curly braces and then followed by JS logical operator &&.jsx harmony\n<h1>Hello!<\/h1>;\n{\n  messages.length > 0 && !isLogin ? (\n    <h2>You have {messages.length} unread messages.<\/h2>\n  ) : (\n    <h2>You don't have unread messages.<\/h2>\n  );\n}"},{"question":"What is \"key\" prop and what is the benefit of using it in arrays of elements?","answer":"A key is a special attribute you should include when creating arrays of elements. Key prop helps React identify which items have changed, are added, or are removed.Keys should be unique among its siblings. Most often we use ID from our data as key:jsx harmony\nconst todoItems = todos.map((todo) => <li key={todo.id}>{todo.text}<\/li>);When you don't have stable IDs for rendered items, you may use the item index as a key as a last resort:jsx harmony\nconst todoItems = todos.map((todo, index) => (\n  <li key={index}>{todo.text}<\/li>\n));Note:\nUsing indexes for keys is not recommended if the order of items may change. This can negatively impact performance and may cause issues with component state.\nIf you extract list item as separate component then apply keys on list component instead of li tag.\nThere will be a warning message in the console if the key prop is not present on list items.\nThe key attribute accepts either string or number and internally convert it as string type."},{"question":"What is the use of refs?","answer":"The ref is used to return a reference to the element. They should be avoided in most cases, however, they can be useful when you need a direct access to the DOM element or an instance of a component."},{"question":"How to create refs?","answer":"There are two approaches\nThis is a recently added approach. Refs are created using React.createRef() method and attached to React elements via the ref attribute. In order to use refs throughout the component, just assign the ref to the instance property within constructor.\njsx harmony\n   class MyComponent extends React.Component {\n     constructor(props) {\n       super(props);\n       this.myRef = React.createRef();\n     }\n     render() {\n       return <div ref={this.myRef} \/>;\n     }\n   }\nYou can also use ref callbacks approach regardless of React version. For example, the search bar component's input element is accessed as follows,\n   jsx harmony\n   class SearchBar extends Component {\n     constructor(props) {\n       super(props);\n       this.txtSearch = null;\n       this.state = { term: \"\" };\n       this.setInputSearchRef = (e) => {\n         this.txtSearch = e;\n       };\n     }\n     onInputChange(event) {\n       this.setState({ term: this.txtSearch.value });\n     }\n     render() {\n       return (\n         <input\n           value={this.state.term}\n           onChange={this.onInputChange.bind(this)}\n           ref={this.setInputSearchRef}\n         \/>\n       );\n     }\n   }\nYou can also use refs in function components using closures.\nNote: You can also use inline ref callbacks even though it is not a recommended approach."},{"question":"What are forward refs?","answer":"Ref forwarding is a feature that lets some components take a ref they receive, and pass it further down to a child.```jsx harmony\nconst ButtonElement = React.forwardRef((props, ref) => (\n  \n    {props.children}\n  \n));\/\/ Create ref to the DOM button:\nconst ref = React.createRef();\n{\"Forward Ref\"};\n```"},{"question":"Which is preferred option with in callback refs and findDOMNode()?","answer":"It is preferred to use callback refs over findDOMNode() API. Because findDOMNode() prevents certain improvements in React in the future.The legacy approach of using findDOMNode:```javascript\nclass MyComponent extends Component {\n  componentDidMount() {\n    findDOMNode(this).scrollIntoView();\n  }render() {\n    return ;\n  }\n}\n```The recommended approach is:```javascript\nclass MyComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.node = createRef();\n  }\n  componentDidMount() {\n    this.node.current.scrollIntoView();\n  }render() {\n    return ;\n  }\n}\n```"},{"question":"Why are String Refs legacy?","answer":"If you worked with React before, you might be familiar with an older API where the ref attribute is a string, like ref={'textInput'}, and the DOM node is accessed as this.refs.textInput. We advise against it because string refs have below issues, and are considered legacy. String refs were removed in React v16.\nThey force React to keep track of currently executing component. This is problematic because it makes react module stateful, and thus causes weird errors when react module is duplicated in the bundle.\nThey are not composable \u2014 if a library puts a ref on the passed child, the user can't put another ref on it. Callback refs are perfectly composable.\nThey don't work with static analysis like Flow. Flow can't guess the magic that framework does to make the string ref appear on this.refs, as well as its type (which could be different). Callback refs are friendlier to static analysis.\nIt doesn't work as most people would expect with the \"render callback\" pattern (e.g. )\n```jsx harmony\n   class MyComponent extends Component {\n     renderRow = (index) => {\n       \/\/ This won't work. Ref will get attached to DataTable rather than MyComponent:\n       return ;   \/\/ This would work though! Callback refs are awesome.\n   return <input ref={(input) => (this[\"input-\" + index] = input)} \/>;\n };\n\n render() {\n   return (\n     <DataTable data={this.props.data} renderRow={this.renderRow} \/>\n   );\n }\n}\n   ```"},{"question":"What is Virtual DOM?","answer":"The Virtual DOM (VDOM) is an in-memory representation of Real DOM. The representation of a UI is kept in memory and synced with the \"real\" DOM. It's a step that happens between the render function being called and the displaying of elements on the screen. This entire process is called reconciliation."},{"question":"How Virtual DOM works?","answer":"The Virtual DOM works in three simple steps.\nWhenever any underlying data changes, the entire UI is re-rendered in Virtual DOM representation.\n\nThen the difference between the previous DOM representation and the new one is calculated.\n\nOnce the calculations are done, the real DOM will be updated with only the things that have actually changed."},{"question":"What is the difference between Shadow DOM and Virtual DOM?","answer":"The Shadow DOM is a browser technology designed primarily for scoping variables and CSS in web components. The Virtual DOM is a concept implemented by libraries in JavaScript on top of browser APIs."},{"question":"What is React Fiber?","answer":"Fiber is the new reconciliation engine or reimplementation of core algorithm in React v16. The goal of React Fiber is to increase its suitability for areas like animation, layout, gestures, ability to pause, abort, or reuse work and assign priority to different types of updates; and new concurrency primitives."},{"question":"What is the main goal of React Fiber?","answer":"The goal of React Fiber is to increase its suitability for areas like animation, layout, and gestures. Its headline feature is incremental rendering: the ability to split rendering work into chunks and spread it out over multiple frames.from documentationIts main goals are:\nAbility to split interruptible work in chunks.\nAbility to prioritize, rebase and reuse work in progress.\nAbility to yield back and forth between parents and children to support layout in React.\nAbility to return multiple elements from render().\nBetter support for error boundaries."},{"question":"What are controlled components?","answer":"A component that controls the input elements within the forms on subsequent user input is called Controlled Component, i.e, every state mutation will have an associated handler function.For example, to write all the names in uppercase letters, we use handleChange as below,javascript\nhandleChange(event) {\n  this.setState({value: event.target.value.toUpperCase()})\n}"},{"question":"What are uncontrolled components?","answer":"The Uncontrolled Components are the ones that store their own state internally, and you query the DOM using a ref to find its current value when you need it. This is a bit more like traditional HTML.In the below UserProfile component, the name input is accessed using ref.```jsx harmony\nclass UserProfile extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.input = React.createRef();\n  }handleSubmit(event) {\n    alert(\"A name was submitted: \" + this.input.current.value);\n    event.preventDefault();\n  }render() {\n    return (\n      \n\n          {\"Name:\"}\n          \n\n\n\n    );\n  }\n}\n```In most cases, it's recommend to use controlled components to implement forms. In a controlled component, form data is handled by a React component. The alternative is uncontrolled components, where form data is handled by the DOM itself."},{"question":"What is the difference between createElement and cloneElement?","answer":"JSX elements will be transpiled to React.createElement() functions to create React elements which are going to be used for the object representation of UI. Whereas cloneElement is used to clone an element and pass it new props."},{"question":"What is Lifting State Up in React?","answer":"When several components need to share the same changing data then it is recommended to lift the shared state up to their closest common ancestor. That means if two child components share the same data from its parent, then move the state to parent instead of maintaining local state in both of the child components."},{"question":"What are the different phases of component lifecycle?","answer":"The component lifecycle has three distinct lifecycle phases:\n\nMounting: The component is ready to mount in the browser DOM. This phase covers initialization from constructor(), getDerivedStateFromProps(), render(), and componentDidMount() lifecycle methods.\n\n\nUpdating: In this phase, the component gets updated in two ways, sending the new props and updating the state either from setState() or forceUpdate(). This phase covers getDerivedStateFromProps(), shouldComponentUpdate(), render(), getSnapshotBeforeUpdate() and componentDidUpdate() lifecycle methods.\n\n\nUnmounting: In this last phase, the component is not needed and gets unmounted from the browser DOM. This phase includes componentWillUnmount() lifecycle method.\n\nIt's worth mentioning that React internally has a concept of phases when applying changes to the DOM. They are separated as follows\n\nRender The component will render without any side effects. This applies to Pure components and in this phase, React can pause, abort, or restart the render.\n\n\nPre-commit Before the component actually applies the changes to the DOM, there is a moment that allows React to read from the DOM through the getSnapshotBeforeUpdate().\n\n\nCommit React works with the DOM and executes the final lifecycles respectively componentDidMount() for mounting, componentDidUpdate() for updating, and componentWillUnmount() for unmounting.\n\nReact 16.3+ Phases (or an interactive version)Before React 16.3"},{"question":"What are the lifecycle methods of React?","answer":"Before React 16.3\ncomponentWillMount: Executed before rendering and is used for App level configuration in your root component.\ncomponentDidMount: Executed after first rendering and here all AJAX requests, DOM or state updates, and set up event listeners should occur.\ncomponentWillReceiveProps: Executed when particular prop updates to trigger state transitions.\nshouldComponentUpdate: Determines if the component will be updated or not. By default it returns true. If you are sure that the component doesn't need to render after state or props are updated, you can return false value. It is a great place to improve performance as it allows you to prevent a re-render if component receives new prop.\ncomponentWillUpdate: Executed before re-rendering the component when there are props & state changes confirmed by shouldComponentUpdate() which returns true.\ncomponentDidUpdate: Mostly it is used to update the DOM in response to prop or state changes.\ncomponentWillUnmount: It will be used to cancel any outgoing network requests, or remove all event listeners associated with the component.\nReact 16.3+\ngetDerivedStateFromProps: Invoked right before calling render() and is invoked on every render. This exists for rare use cases where you need a derived state. Worth reading if you need derived state.\ncomponentDidMount: Executed after first rendering and where all AJAX requests, DOM or state updates, and set up event listeners should occur.\nshouldComponentUpdate: Determines if the component will be updated or not. By default, it returns true. If you are sure that the component doesn't need to render after the state or props are updated, you can return a false value. It is a great place to improve performance as it allows you to prevent a re-render if component receives a new prop.\ngetSnapshotBeforeUpdate: Executed right before rendered output is committed to the DOM. Any value returned by this will be passed into componentDidUpdate(). This is useful to capture information from the DOM i.e. scroll position.\ncomponentDidUpdate: Mostly it is used to update the DOM in response to prop or state changes. This will not fire if shouldComponentUpdate() returns false.\ncomponentWillUnmount It will be used to cancel any outgoing network requests, or remove all event listeners associated with the component."},{"question":"What are Higher-Order Components?","answer":"A higher-order component (HOC) is a function that takes a component and returns a new component. Basically, it's a pattern that is derived from React's compositional nature.We call them pure components because they can accept any dynamically provided child component but they won't modify or copy any behavior from their input components.javascript\nconst EnhancedComponent = higherOrderComponent(WrappedComponent);HOC can be used for many use cases:\nCode reuse, logic and bootstrap abstraction.\nRender hijacking.\nState abstraction and manipulation.\nProps manipulation."},{"question":"How to create props proxy for HOC component?","answer":"You can add\/edit props passed to the component using props proxy pattern like this:```jsx harmony\nfunction HOC(WrappedComponent) {\n  return class Test extends Component {\n    render() {\n      const newProps = {\n        title: \"New Header\",\n        footer: false,\n        showFeatureX: false,\n        showFeatureY: true,\n      };  return <WrappedComponent {...this.props} {...newProps} \/>;\n}\n};\n}\n```"},{"question":"What is context?","answer":"Context provides a way to pass data through the component tree without having to pass props down manually at every level.For example, authenticated users, locale preferences, UI themes need to be accessed in the application by many components.javascript\nconst { Provider, Consumer } = React.createContext(defaultValue);"},{"question":"What is children prop?","answer":"Children is a prop (this.props.children) that allows you to pass components as data to other components, just like any other prop you use. Component tree put between component's opening and closing tag will be passed to that component as children prop.There are several methods available in the React API to work with this prop. These include React.Children.map, React.Children.forEach, React.Children.count, React.Children.only, React.Children.toArray.A simple usage of children prop looks as below,```jsx harmony\nconst MyDiv = React.createClass({\n  render: function () {\n    return {this.props.children};\n  },\n});ReactDOM.render(\n  \n{\"Hello\"}\n{\"World\"}\n,\n  node\n);\n```"},{"question":"How to write comments in React?","answer":"The comments in React\/JSX are similar to JavaScript Multiline comments but are wrapped in curly braces.Single-line comments:jsx harmony\n<div>\n  {\/* Single-line comments(In vanilla JavaScript, the single-line comments are represented by double slash(\/\/)) *\/}\n  {`Welcome ${user}, let's play React`}\n<\/div>Multi-line comments:jsx harmony\n<div>\n  {\/* Multi-line comments for more than\n   one line *\/}\n  {`Welcome ${user}, let's play React`}\n<\/div>"},{"question":"What is the purpose of using super constructor with props argument?","answer":"A child class constructor cannot make use of this reference until the super() method has been called. The same applies to ES6 sub-classes as well. The main reason for passing props parameter to super() call is to access this.props in your child constructors.Passing props:```javascript\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);console.log(this.props); \/\/ prints { name: 'John', age: 42 }\n}\n}\n```Not passing props:```javascript\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super();console.log(this.props); \/\/ prints undefined\n\n\/\/ but props parameter is still available\nconsole.log(props); \/\/ prints { name: 'John', age: 42 }\n}render() {\n    \/\/ no difference outside constructor\n    console.log(this.props); \/\/ prints { name: 'John', age: 42 }\n  }\n}\n```The above code snippets reveals that this.props is different only within the constructor. It would be the same outside the constructor."},{"question":"What is reconciliation?","answer":"Reconciliation is the process through which React updates the Browser DOM and makes React work faster. React use a diffing algorithm so that component updates are predictable and faster. React would first calculate the difference between the real DOM and the copy of DOM (Virtual DOM) when there's an update of components.\nReact stores a copy of Browser DOM which is called Virtual DOM. When we make changes or add data, React creates a new Virtual DOM and compares it with the previous one. This comparison is done by Diffing Algorithm.\nNow React compares the Virtual DOM with Real DOM. It finds out the changed nodes and updates only the changed nodes in Real DOM leaving the rest nodes as it is. This process is called Reconciliation."},{"question":"How to set state with a dynamic key name?","answer":"If you are using ES6 or the Babel transpiler to transform your JSX code then you can accomplish this with computed property names.javascript\nhandleInputChange(event) {\n  this.setState({ [event.target.id]: event.target.value })\n}"},{"question":"What would be the common mistake of function being called every time the component renders?","answer":"You need to make sure that function is not being called while passing the function as a parameter.jsx harmony\nrender() {\n  \/\/ Wrong: handleClick is called instead of passed as a reference!\n  return <button onClick={this.handleClick()}>{'Click Me'}<\/button>\n}Instead, pass the function itself without parenthesis:jsx harmony\nrender() {\n  \/\/ Correct: handleClick is passed as a reference!\n  return <button onClick={this.handleClick}>{'Click Me'}<\/button>\n}"},{"question":"Is lazy function supports named exports?","answer":"No, currently React.lazy function supports default exports only. If you would like to import modules which are named exports, you can create an intermediate module that reexports it as the default. It also ensures that tree shaking keeps working and don\u2019t pull unused components.\nLet's take a component file which exports multiple named components,javascript\n\/\/ MoreComponents.js\nexport const SomeComponent = \/* ... *\/;\nexport const UnusedComponent = \/* ... *\/;and reexport MoreComponents.js components in an intermediate file IntermediateComponent.jsjavascript\n\/\/ IntermediateComponent.js\nexport { SomeComponent as default } from \".\/MoreComponents.js\";Now you can import the module using lazy function as below,javascript\nimport React, { lazy } from \"react\";\nconst SomeComponent = lazy(() => import(\".\/IntermediateComponent.js\"));"},{"question":"Why React uses className over class attribute?","answer":"The attribute class is a keyword in JavaScript, and JSX is an extension of JavaScript. That's the principal reason why React uses className instead of class. Pass a string as the className prop.jsx harmony\nrender() {\n  return <span className={'menu navigation-menu'}>{'Menu'}<\/span>\n}"},{"question":"What are fragments?","answer":"It's a common pattern or practice in React for a component to return multiple elements. Fragments let you group a list of children without adding extra nodes to the DOM.\nYou need to use either  or a shorter syntax having empty tag (<>).Below is the example of how to use fragment inside Story component.\njsx harmony\nfunction Story({title, description, date}) {\n  return (\n      <Fragment>\n        <h2>{title}<\/h2>\n        <p>{description}<\/p>\n        <p>{date}<\/p>\n      <\/Fragment>\n    );\n}It is also possible to render list of fragments inside a loop with the mandatory key attribute supplied.jsx harmony\nfunction StoryBook() {\n  return stories.map(story =>\n    <Fragment key={ story.id}>\n      <h2>{story.title}<\/h2>\n      <p>{story.description}<\/p>\n      <p>{story.date}<\/p>\n    <\/Fragment>\n    );\n}Ususally you don't need to use  until unless there is a need of key attribute. The usage of shorter syntax looks like below.jsx harmony\nfunction Story({title, description, date}) {\n  return (\n      <>\n        <h2>{title}<\/h2>\n        <p>{description}<\/p>\n        <p>{date}<\/p>\n      \n    );\n}"},{"question":"Why fragments are better than container divs?","answer":"Below are the list of reasons to prefer fragments over container DOM elements,\nFragments are a bit faster and use less memory by not creating an extra DOM node. This only has a real benefit on very large and deep trees.\nSome CSS mechanisms like Flexbox and CSS Grid have a special parent-child relationships, and adding divs in the middle makes it hard to keep the desired layout.\nThe DOM Inspector is less cluttered."},{"question":"What are portals in React?","answer":"Portal is a recommended way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.javascript\nReactDOM.createPortal(child, container);The first argument is any render-able React child, such as an element, string, or fragment. The second argument is a DOM element."},{"question":"What are stateless components?","answer":"If the behaviour of a component is independent of its state then it can be a stateless component. You can use either a function or a class for creating stateless components. But unless you need to use a lifecycle hook in your components, you should go for function components. There are a lot of benefits if you decide to use function components here; they are easy to write, understand, and test, a little faster, and you can avoid the this keyword altogether."},{"question":"What are stateful components?","answer":"If the behaviour of a component is dependent on the state of the component then it can be termed as stateful component. These stateful components are either function components with hooks or class components.Let's take an example of function stateful component which update the state based on click event,\n```javascript\nimport React, {useState} from 'react';const App = (props) => {\nconst [count, setCount] = useState(0);\nhandleIncrement() {\n  setCount(count+1);\n}return (\n  <>\n    Increment\nCounter: {count}\n\n  )\n}\n```See Class\n\nThe equivalent class stateful component with a state that gets initialized in the constructor.\n```jsx harmony\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n  }\nhandleIncrement() {\n    setState({count: this.state.count + 1})\n  }\nrender() {\n    <>\n      this.handleIncrement}>Increment\nCount: {count}\n\n  }\n}\n```"},{"question":"How to apply validation on props in React?","answer":"When the application is running in development mode, React will automatically check all props that we set on components to make sure they have correct type. If the type is incorrect, React will generate warning messages in the console. It's disabled in production mode due to performance impact. The mandatory props are defined with isRequired.The set of predefined prop types:\nPropTypes.number\nPropTypes.string\nPropTypes.array\nPropTypes.object\nPropTypes.func\nPropTypes.node\nPropTypes.element\nPropTypes.bool\nPropTypes.symbol\nPropTypes.any\nWe can define propTypes for User component as below:```jsx harmony\nimport React from \"react\";\nimport PropTypes from \"prop-types\";class User extends React.Component {\n  static propTypes = {\n    name: PropTypes.string.isRequired,\n    age: PropTypes.number.isRequired,\n  };render() {\n    return (\n      <>\n        {Welcome, ${this.props.name}}\n{Age, ${this.props.age}}\n\n    );\n  }\n}\n```Note: In React v15.5 PropTypes were moved from React.PropTypes to prop-types library.The Equivalent Functional Component```jsx harmony\nimport React from \"react\";\nimport PropTypes from \"prop-types\";function User({ name, age }) {\n  return (\n    <>\n      {Welcome, ${name}}\n{Age, ${age}}\n\n  );\n}User.propTypes = {\n  name: PropTypes.string.isRequired,\n  age: PropTypes.number.isRequired,\n};\n```"},{"question":"What are the advantages of React?","answer":"Below are the list of main advantages of React,\nIncreases the application's performance with Virtual DOM.\nJSX makes code easy to read and write.\nIt renders both on client and server side (SSR).\nEasy to integrate with frameworks (Angular, Backbone) since it is only a view library.\nEasy to write unit and integration tests with tools such as Jest."},{"question":"What are the limitations of React?","answer":"Apart from the advantages, there are few limitations of React too,\nReact is just a view library, not a full framework.\nThere is a learning curve for beginners who are new to web development.\nIntegrating React into a traditional MVC framework requires some additional configuration.\nThe code complexity increases with inline templating and JSX.\nToo many smaller components leading to over engineering or boilerplate."},{"question":"What are error boundaries in React v16?","answer":"Error boundaries are components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of the component tree that crashed.A class component becomes an error boundary if it defines a new lifecycle method called componentDidCatch(error, info) or static getDerivedStateFromError():```jsx harmony\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }componentDidCatch(error, info) {\n    \/\/ You can also log the error to an error reporting service\n    logErrorToMyService(error, info);\n  }static getDerivedStateFromError(error) {\n    \/\/ Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }render() {\n    if (this.state.hasError) {\n      \/\/ You can render any custom fallback UI\n      return {\"Something went wrong.\"};\n    }\n    return this.props.children;\n  }\n}\n```After that use it as a regular component:jsx harmony\n<ErrorBoundary>\n  <MyWidget \/>\n<\/ErrorBoundary>"},{"question":"How are error boundaries handled in React v15?","answer":"React v15 provided very basic support for error boundaries using unstable_handleError method. It has been renamed to componentDidCatch in React v16."},{"question":"What are the recommended ways for static type checking?","answer":"Normally we use PropTypes library (React.PropTypes moved to a prop-types package since React v15.5) for type checking in the React applications. For large code bases, it is recommended to use static type checkers such as Flow or TypeScript, that perform type checking at compile time and provide auto-completion features."},{"question":"What is the use of react-dom package?","answer":"The react-dom package provides DOM-specific methods that can be used at the top level of your app. Most of the components are not required to use this module. Some of the methods of this package are:\nrender()\nhydrate()\nunmountComponentAtNode()\nfindDOMNode()\ncreatePortal()"},{"question":"What is the purpose of render method of react-dom?","answer":"This method is used to render a React element into the DOM in the supplied container and return a reference to the component. If the React element was previously rendered into container, it will perform an update on it and only mutate the DOM as necessary to reflect the latest changes.ReactDOM.render(element, container, [callback])If the optional callback is provided, it will be executed after the component is rendered or updated."},{"question":"What is ReactDOMServer?","answer":"The ReactDOMServer object enables you to render components to static markup (typically used on node server). This object is mainly used for server-side rendering (SSR). The following methods can be used in both the server and browser environments:\nrenderToString()\nrenderToStaticMarkup()\nFor example, you generally run a Node-based web server like Express, Hapi, or Koa, and you call renderToString to render your root component to a string, which you then send as response.```javascript\n\/\/ using Express\nimport { renderToString } from \"react-dom\/server\";\nimport MyPage from \".\/MyPage\";app.get(\"\/\", (req, res) => {\n  res.write(\n    \"<!DOCTYPE html>My Page\"\n  );\n  res.write('');\n  res.write(renderToString());\n  res.write(\"\");\n  res.end();\n});\n```"},{"question":"How to use innerHTML in React?","answer":"The dangerouslySetInnerHTML attribute is React's replacement for using innerHTML in the browser DOM. Just like innerHTML, it is risky to use this attribute considering cross-site scripting (XSS) attacks. You just need to pass a __html object as key and HTML text as value.In this example MyComponent uses dangerouslySetInnerHTML attribute for setting HTML markup:```jsx harmony\nfunction createMarkup() {\n  return { __html: \"First \u00b7 Second\" };\n}function MyComponent() {\n  return ;\n}\n```"},{"question":"How to use styles in React?","answer":"The style attribute accepts a JavaScript object with camelCased properties rather than a CSS string. This is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes.```jsx harmony\nconst divStyle = {\n  color: \"blue\",\n  backgroundImage: \"url(\" + imgUrl + \")\",\n};function HelloWorldComponent() {\n  return Hello World!;\n}\n```Style keys are camelCased in order to be consistent with accessing the properties on DOM nodes in JavaScript (e.g. node.style.backgroundImage)."},{"question":"How events are different in React?","answer":"Handling events in React elements has some syntactic differences:\nReact event handlers are named using camelCase, rather than lowercase.\nWith JSX you pass a function as the event handler, rather than a string."},{"question":"What will happen if you use setState() in constructor?","answer":"When you use setState(), then apart from assigning to the object state React also re-renders the component and all its children. You would get error like this: Can only update a mounted or mounting component. So we need to use this.state to initialize variables inside constructor."},{"question":"What is the impact of indexes as keys?","answer":"Keys should be stable, predictable, and unique so that React can keep track of elements.In the below code snippet each element's key will be based on ordering, rather than tied to the data that is being represented. This limits the optimizations that React can do.jsx harmony\n{\n  todos.map((todo, index) => <Todo {...todo} key={index} \/>);\n}If you use element data for unique key, assuming todo.id is unique to this list and stable, React would be able to reorder elements without needing to reevaluate them as much.jsx harmony\n{\n  todos.map((todo) => <Todo {...todo} key={todo.id} \/>);\n}"},{"question":"Is it good to use setState() in componentWillMount() method?","answer":"Yes, it is safe to use setState() inside componentWillMount() method. But at the same it is recommended to avoid async initialization in componentWillMount() lifecycle method. componentWillMount() is invoked immediately before mounting occurs. It is called before render(), therefore setting state in this method will not trigger a re-render. Avoid introducing any side-effects or subscriptions in this method. We need to make sure async calls for component initialization happened in componentDidMount() instead of componentWillMount().jsx harmony\ncomponentDidMount() {\n  axios.get(`api\/todos`)\n    .then((result) => {\n      this.setState({\n        messages: [...result.data]\n      })\n    })\n}"},{"question":"What will happen if you use props in initial state?","answer":"If the props on the component are changed without the component being refreshed, the new prop value will never be displayed because the constructor function will never update the current state of the component. The initialization of state from props only runs when the component is first created.The below component won't display the updated input value:```jsx harmony\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);this.state = {\n  records: [],\n  inputValue: this.props.inputValue,\n};\n}render() {\n    return {this.state.inputValue};\n  }\n}\n```Using props inside render method will update the value:```jsx harmony\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);this.state = {\n  record: [],\n};\n}render() {\n    return {this.props.inputValue};\n  }\n}\n```"},{"question":"How do you conditionally render components?","answer":"In some cases you want to render different components depending on some state. JSX does not render false or undefined, so you can use conditional short-circuiting to render a given part of your component only if a certain condition is true.jsx harmony\nconst MyComponent = ({ name, address }) => (\n  <div>\n    <h2>{name}<\/h2>\n    {address && <p>{address}<\/p>}\n  <\/div>\n);If you need an if-else condition then use ternary operator.jsx harmony\nconst MyComponent = ({ name, address }) => (\n  <div>\n    <h2>{name}<\/h2>\n    {address ? <p>{address}<\/p> : <p>{\"Address is not available\"}<\/p>}\n  <\/div>\n);"},{"question":"Why we need to be careful when spreading props on DOM elements?","answer":"When we spread props we run into the risk of adding unknown HTML attributes, which is a bad practice. Instead we can use prop destructuring with ...rest operator, so it will add only required props.For example,```jsx harmony\nconst ComponentA = () => (\n  \n);const ComponentB = ({ isDisplay, ...domProps }) => (\n  {\"ComponentB\"}\n);\n```"},{"question":"How you use decorators in React?","answer":"You can decorate your class components, which is the same as passing the component into a function. Decorators are flexible and readable way of modifying component functionality.```jsx harmony\n@setTitle(\"Profile\")\nclass Profile extends React.Component {\n  \/\/....\n}\/\n  title is a string that will be set as a document title\n  WrappedComponent is what our decorator will receive when\n  put directly above a component class as seen in the example above\n\/\nconst setTitle = (title) => (WrappedComponent) => {\n  return class extends React.Component {\n    componentDidMount() {\n      document.title = title;\n    }render() {\n  return <WrappedComponent {...this.props} \/>;\n}\n};\n};\n```Note: Decorators are a feature that didn't make it into ES7, but are currently a stage 2 proposal."},{"question":"How do you memoize a component?","answer":"There are memoize libraries available which can be used on function components.For example moize library can memoize the component in another component.```jsx harmony\nimport moize from \"moize\";\nimport Component from \".\/components\/Component\"; \/\/ this module exports a non-memoized componentconst MemoizedFoo = moize.react(Component);const Consumer = () => {\n  \n    {\"I will memoize the following entry:\"}\n    \n;\n};\n```Update: Since React v16.6.0, we have a React.memo. It provides a higher order component which memoizes component unless the props change. To use it, simply wrap the component using React.memo before you use it.js\nconst MemoComponent = React.memo(function MemoComponent(props) {\n  \/* render using props *\/\n});\nOR;\nexport default React.memo(MyFunctionComponent);"},{"question":"How you implement Server Side Rendering or SSR?","answer":"React is already equipped to handle rendering on Node servers. A special version of the DOM renderer is available, which follows the same pattern as on the client side.```jsx harmony\nimport ReactDOMServer from \"react-dom\/server\";\nimport App from \".\/App\";ReactDOMServer.renderToString();\n```This method will output the regular HTML as a string, which can be then placed inside a page body as part of the server response. On the client side, React detects the pre-rendered content and seamlessly picks up where it left off."},{"question":"How to enable production mode in React?","answer":"You should use Webpack's DefinePlugin method to set NODE_ENV to production, by which it strip out things like propType validation and extra warnings. Apart from this, if you minify the code, for example, Uglify's dead-code elimination to strip out development only code and comments, it will drastically reduce the size of your bundle."},{"question":"What is CRA and its benefits?","answer":"The create-react-app CLI tool allows you to quickly create & run React applications with no configuration step.Let's create Todo App using CRA:```consoleInstallation$ npm install -g create-react-appCreate new project$ create-react-app todo-app\n$ cd todo-appBuild, test and run$ npm run build\n$ npm run test\n$ npm start\n```It includes everything we need to build a React app:\nReact, JSX, ES6, and Flow syntax support.\nLanguage extras beyond ES6 like the object spread operator.\nAutoprefixed CSS, so you don\u2019t need -webkit- or other prefixes.\nA fast interactive unit test runner with built-in support for coverage reporting.\nA live development server that warns about common mistakes.\nA build script to bundle JS, CSS, and images for production, with hashes and sourcemaps."},{"question":"What is the lifecycle methods order in mounting?","answer":"The lifecycle methods are called in the following order when an instance of a component is being created and inserted into the DOM.\nconstructor()\nstatic getDerivedStateFromProps()\nrender()\ncomponentDidMount()"},{"question":"What are the lifecycle methods going to be deprecated in React v16?","answer":"The following lifecycle methods going to be unsafe coding practices and will be more problematic with async rendering.\ncomponentWillMount()\ncomponentWillReceiveProps()\ncomponentWillUpdate()\nStarting with React v16.3 these methods are aliased with UNSAFE_ prefix, and the unprefixed version will be removed in React v17."},{"question":"What is the purpose of getDerivedStateFromProps() lifecycle method?","answer":"The new static getDerivedStateFromProps() lifecycle method is invoked after a component is instantiated as well as before it is re-rendered. It can return an object to update state, or null to indicate that the new props do not require any state updates.javascript\nclass MyComponent extends React.Component {\n  static getDerivedStateFromProps(props, state) {\n    \/\/ ...\n  }\n}This lifecycle method along with componentDidUpdate() covers all the use cases of componentWillReceiveProps()."},{"question":"What is the purpose of getSnapshotBeforeUpdate() lifecycle method?","answer":"The new getSnapshotBeforeUpdate() lifecycle method is called right before DOM updates. The return value from this method will be passed as the third parameter to componentDidUpdate().javascript\nclass MyComponent extends React.Component {\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    \/\/ ...\n  }\n}This lifecycle method along with componentDidUpdate() covers all the use cases of componentWillUpdate()."},{"question":"Do Hooks replace render props and higher order components?","answer":"Both render props and higher-order components render only a single child but in most of the cases Hooks are a simpler way to serve this by reducing nesting in your tree."},{"question":"What is the recommended way for naming components?","answer":"It is recommended to name the component by reference instead of using displayName.Using displayName for naming component:javascript\nexport default React.createClass({\n  displayName: \"TodoApp\",\n  \/\/ ...\n});The recommended approach:javascript\nexport default class TodoApp extends React.Component {\n  \/\/ ...\n}alsojavascript\nconst TodoApp = () => {\n  \/\/...\n};\nexport default TodoApp;"},{"question":"What is the recommended ordering of methods in component class?","answer":"Recommended ordering of methods from mounting to render stage:\nstatic methods\nconstructor()\ngetChildContext()\ncomponentWillMount()\ncomponentDidMount()\ncomponentWillReceiveProps()\nshouldComponentUpdate()\ncomponentWillUpdate()\ncomponentDidUpdate()\ncomponentWillUnmount()\nclick handlers or event handlers like onClickSubmit() or onChangeDescription()\ngetter methods for render like getSelectReason() or getFooterContent()\noptional render methods like renderNavigation() or renderProfilePicture()\nrender()"},{"question":"What is a switching component?","answer":"A switching component is a component that renders one of many components. We need to use object to map prop values to components.For example, a switching component to display different pages based on page prop:```jsx harmony\nimport HomePage from \".\/HomePage\";\nimport AboutPage from \".\/AboutPage\";\nimport ServicesPage from \".\/ServicesPage\";\nimport ContactPage from \".\/ContactPage\";const PAGES = {\n  home: HomePage,\n  about: AboutPage,\n  services: ServicesPage,\n  contact: ContactPage,\n};const Page = (props) => {\n  const Handler = PAGES[props.page] || ContactPage;return ;\n};\/\/ The keys of the PAGES object can be used in the prop types to catch dev-time errors.\nPage.propTypes = {\n  page: PropTypes.oneOf(Object.keys(PAGES)).isRequired,\n};\n```"},{"question":"Why we need to pass a function to setState()?","answer":"The reason behind for this is that setState() is an asynchronous operation. React batches state changes for performance reasons, so the state may not change immediately after setState() is called. That means you should not rely on the current state when calling setState()\u200asince you can't be sure what that state will be. The solution is to pass a function to setState(), with the previous state as an argument. By doing this you can avoid issues with the user getting the old state value on access due to the asynchronous nature of setState().Let's say the initial count value is zero. After three consecutive increment operations, the value is going to be incremented only by one.javascript\n\/\/ assuming this.state.count === 0\nthis.setState({ count: this.state.count + 1 });\nthis.setState({ count: this.state.count + 1 });\nthis.setState({ count: this.state.count + 1 });\n\/\/ this.state.count === 1, not 3If we pass a function to setState(), the count gets incremented correctly.javascript\nthis.setState((prevState, props) => ({\n  count: prevState.count + props.increment,\n}));\n\/\/ this.state.count === 3 as expected(OR)"},{"question":"Why function is preferred over object for setState()?","answer":"React may batch multiple setState() calls into a single update for performance. Because this.props and this.state may be updated asynchronously, you should not rely on their values for calculating the next state.This counter example will fail to update as expected:javascript\n\/\/ Wrong\nthis.setState({\n  counter: this.state.counter + this.props.increment,\n});The preferred approach is to call setState() with function rather than object. That function will receive the previous state as the first argument, and the props at the time the update is applied as the second argument.javascript\n\/\/ Correct\nthis.setState((prevState, props) => ({\n  counter: prevState.counter + props.increment,\n}));"},{"question":"What is strict mode in React?","answer":"React.StrictMode is a useful component for highlighting potential problems in an application. Just like <Fragment>, <StrictMode> does not render any extra DOM elements. It activates additional checks and warnings for its descendants. These checks apply for development mode only.```jsx harmony\nimport React from \"react\";function ExampleApplication() {\n  return (\n    \n\n\n\n\n\n\n\n\n\n  );\n}\n```In the example above, the strict mode checks apply to <ComponentOne> and <ComponentTwo> components only.React.StrictMode currently helps you with:\nIdentifying components with unsafe lifecycles\nWarning about legacy string ref API usage\nWarning about deprecated findDOMNode usage\nDetecting unexpected side effects\nDetecting legacy context API"},{"question":"What are React Mixins?","answer":"Mixins are a way to totally separate components to have a common functionality. Mixins should not be used and can be replaced with higher-order components or decorators.One of the most commonly used mixins is PureRenderMixin. You might be using it in some components to prevent unnecessary re-renders when the props and state are shallowly equal to the previous props and state:```javascript\nconst PureRenderMixin = require(\"react-addons-pure-render-mixin\");const Button = React.createClass({\n  mixins: [PureRenderMixin],\n  \/\/ ...\n});\n```"},{"question":"Why is isMounted() an anti-pattern and what is the proper solution?","answer":"The primary use case for isMounted() is to avoid calling setState() after a component has been unmounted, because it will emit a warning.javascript\nif (this.isMounted()) {\n  this.setState({...})\n}Checking isMounted() before calling setState() does eliminate the warning, but it also defeats the purpose of the warning. Using isMounted() is a code smell because the only reason you would check is because you think you might be holding a reference after the component has unmounted.An optimal solution would be to find places where setState() might be called after a component has unmounted, and fix them. Such situations most commonly occur due to callbacks, when a component is waiting for some data and gets unmounted before the data arrives. Ideally, any callbacks should be canceled in componentWillUnmount(), prior to unmounting."},{"question":"What are the Pointer Events supported in React?","answer":"Pointer Events provide a unified way of handling all input events. In the old days we had a mouse and respective event listeners to handle them but nowadays we have many devices which don't correlate to having a mouse, like phones with touch surface or pens. We need to remember that these events will only work in browsers that support the Pointer Events specification.The following event types are now available in React DOM:\nonPointerDown\nonPointerMove\nonPointerUp\nonPointerCancel\nonGotPointerCapture\nonLostPointerCapture\nonPointerEnter\nonPointerLeave\nonPointerOver\nonPointerOut"},{"question":"Why should component names start with capital letter?","answer":"If you are rendering your component using JSX, the name of that component has to begin with a capital letter otherwise React will throw an error as an unrecognized tag. This convention is because only HTML elements and SVG tags can begin with a lowercase letter.jsx harmony\nclass SomeComponent extends Component {\n  \/\/ Code goes here\n}You can define component class which name starts with lowercase letter, but when it's imported it should have capital letter. Here lowercase is fine:```jsx harmony\nclass myComponent extends Component {\n  render() {\n    return ;\n  }\n}export default myComponent;\n```While when imported in another file it should start with capital letter:jsx harmony\nimport MyComponent from \".\/myComponent\";What are the exceptions on React component naming?The component names should start with an uppercase letter but there are few exceptions to this convention. The lowercase tag names with a dot (property accessors) are still considered as valid component names.\nFor example, the below tag can be compiled to a valid component,jsx harmony\n     render() {\n          return (\n            <obj.component\/> \/\/ `React.createElement(obj.component)`\n          )\n    }"},{"question":"Are custom DOM attributes supported in React v16?","answer":"Yes. In the past, React used to ignore unknown DOM attributes. If you wrote JSX with an attribute that React doesn't recognize, React would just skip it.For example, let's take a look at the below attribute:jsx harmony\n<div mycustomattribute={\"something\"} \/>Would render an empty div to the DOM with React v15:html\n<div \/>In React v16 any unknown attributes will end up in the DOM:html\n<div mycustomattribute=\"something\" \/>This is useful for supplying browser-specific non-standard attributes, trying new DOM APIs, and integrating with opinionated third-party libraries."},{"question":"What is the difference between constructor and getInitialState?","answer":"You should initialize state in the constructor when using ES6 classes, and getInitialState() method when using React.createClass().Using ES6 classes:javascript\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      \/* initial state *\/\n    };\n  }\n}Using React.createClass():javascript\nconst MyComponent = React.createClass({\n  getInitialState() {\n    return {\n      \/* initial state *\/\n    };\n  },\n});Note: React.createClass() is deprecated and removed in React v16. Use plain JavaScript classes instead."},{"question":"Can you force a component to re-render without calling setState?","answer":"By default, when your component's state or props change, your component will re-render. If your render() method depends on some other data, you can tell React that the component needs re-rendering by calling forceUpdate().javascript\ncomponent.forceUpdate(callback);It is recommended to avoid all uses of forceUpdate() and only read from this.props and this.state in render()."},{"question":"What is the difference between super() and super(props) in React using ES6 classes?","answer":"When you want to access this.props in constructor() then you should pass props to super() method.Using super(props):javascript\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    console.log(this.props); \/\/ { name: 'John', ... }\n  }\n}Using super():javascript\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super();\n    console.log(this.props); \/\/ undefined\n  }\n}Outside constructor() both will display same value for this.props."},{"question":"How to loop inside JSX?","answer":"You can simply use Array.prototype.map with ES6 arrow function syntax.For example, the items array of objects is mapped into an array of components:jsx harmony\n<tbody>\n  {items.map((item) => (\n    <SomeComponent key={item.id} name={item.name} \/>\n  ))}\n<\/tbody>But you can't iterate using for loop:jsx harmony\n<tbody>\n  for (let i = 0; i < items.length; i++) {\n    <SomeComponent key={items[i].id} name={items[i].name} \/>\n  }\n<\/tbody>This is because JSX tags are transpiled into function calls, and you can't use statements inside expressions. This may change thanks to do expressions which are stage 1 proposal."},{"question":"How do you access props in attribute quotes?","answer":"React (or JSX) doesn't support variable interpolation inside an attribute value. The below representation won't work:jsx harmony\n<img className=\"image\" src=\"images\/{this.props.image}\" \/>But you can put any JS expression inside curly braces as the entire attribute value. So the below expression works:jsx harmony\n<img className=\"image\" src={\"images\/\" + this.props.image} \/>Using template strings will also work:jsx harmony\n<img className=\"image\" src={`images\/${this.props.image}`} \/>"},{"question":"What is React proptype array with shape?","answer":"If you want to pass an array of objects to a component with a particular shape then use React.PropTypes.shape() as an argument to React.PropTypes.arrayOf().javascript\nReactComponent.propTypes = {\n  arrayWithShape: React.PropTypes.arrayOf(\n    React.PropTypes.shape({\n      color: React.PropTypes.string.isRequired,\n      fontSize: React.PropTypes.number.isRequired,\n    })\n  ).isRequired,\n};"},{"question":"How to conditionally apply class attributes?","answer":"You shouldn't use curly braces inside quotes because it is going to be evaluated as a string.jsx harmony\n<div className=\"btn-panel {this.props.visible ? 'show' : 'hidden'}\">Instead you need to move curly braces outside (don't forget to include spaces between class names):jsx harmony\n<div className={'btn-panel ' + (this.props.visible ? 'show' : 'hidden')}>Template strings will also work:jsx harmony\n<div className={`btn-panel ${this.props.visible ? 'show' : 'hidden'}`}>"},{"question":"What is the difference between React and ReactDOM?","answer":"The react package contains React.createElement(), React.Component, React.Children, and other helpers related to elements and component classes. You can think of these as the isomorphic or universal helpers that you need to build components. The react-dom package contains ReactDOM.render(), and in react-dom\/server we have server-side rendering support with ReactDOMServer.renderToString() and ReactDOMServer.renderToStaticMarkup()."},{"question":"Why ReactDOM is separated from React?","answer":"The React team worked on extracting all DOM-related features into a separate library called ReactDOM. React v0.14 is the first release in which the libraries are split. By looking at some of the packages, react-native, react-art, react-canvas, and react-three, it has become clear that the beauty and essence of React has nothing to do with browsers or the DOM.To build more environments that React can render to, React team planned to split the main React package into two: react and react-dom. This paves the way to writing components that can be shared between the web version of React and React Native."},{"question":"How to use React label element?","answer":"If you try to render a <label> element bound to a text input using the standard for attribute, then it produces HTML missing that attribute and prints a warning to the console.jsx harmony\n<label for={'user'}>{'User'}<\/label>\n<input type={'text'} id={'user'} \/>Since for is a reserved keyword in JavaScript, use htmlFor instead.jsx harmony\n<label htmlFor={'user'}>{'User'}<\/label>\n<input type={'text'} id={'user'} \/>"},{"question":"How to combine multiple inline style objects?","answer":"You can use spread operator in regular React:jsx harmony\n<button style={{ ...styles.panel.button, ...styles.panel.submitButton }}>\n  {\"Submit\"}\n<\/button>If you're using React Native then you can use the array notation:jsx harmony\n<button style={[styles.panel.button, styles.panel.submitButton]}>\n  {\"Submit\"}\n<\/button>\n\nHow to re-render the view when the browser is resized?\n\nYou can use the useState hook to manage the width and height state variables, and the useEffect hook to add and remove the resize event listener. The [] dependency array passed to useEffect ensures that the effect only runs once (on mount) and not on every re-render.```javascript\n  import React, { useState, useEffect } from \"react\";\n  function WindowDimensions() {\n    const [dimensions, setDimensions] = useState({\n      width: window.innerWidth,\n      height: window.innerHeight,\n    });useEffect(() => {\n  function handleResize() {\n    setDimensions({\n      width: window.innerWidth,\n      height: window.innerHeight,\n    });\n  }\n  window.addEventListener(\"resize\", handleResize);\n  return () => window.removeEventListener(\"resize\", handleResize);\n}, []);\n\nreturn (\n  <span>\n    {dimensions.width} x {dimensions.height}\n  <\/span>\n);\n}\n  ```\n  \nUsing Class ComponentYou can listen to the `resize` event in `componentDidMount()` and then update the dimensions (`width` and `height`). You should remove the listener in `componentWillUnmount()` method.\n\n```javascript\n    class WindowDimensions extends React.Component {\n      constructor(props) {\n        super(props);\n        this.updateDimensions = this.updateDimensions.bind(this);\n      }\n\n      componentWillMount() {\n        this.updateDimensions();\n      }\n\n      componentDidMount() {\n        window.addEventListener(\"resize\", this.updateDimensions);\n      }\n\n      componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.updateDimensions);\n      }\n\n      updateDimensions() {\n        this.setState({\n          width: window.innerWidth,\n          height: window.innerHeight,\n        });\n      }\n\n      render() {\n        return (\n          <span>\n            {this.state.width} x {this.state.height}\n          <\/span>\n        );\n      }\n    }\n    ```"},{"question":"How to re-render the view when the browser is resized?","answer":""},{"question":"What is the difference between setState() and replaceState() methods?","answer":"When you use setState() the current and previous states are merged. replaceState() throws out the current state, and replaces it with only what you provide. Usually setState() is used unless you really need to remove all previous keys for some reason. You can also set state to false\/null in setState() instead of using replaceState()."},{"question":"How to listen to state changes?","answer":"The componentDidUpdate lifecycle method will be called when state changes. You can compare provided state and props values with current state and props to determine if something meaningful changed.componentDidUpdate(object prevProps, object prevState)Note: The previous releases of ReactJS also uses componentWillUpdate(object nextProps, object nextState) for state changes. It has been deprecated in latest releases."},{"question":"What is the recommended approach of removing an array element in React state?","answer":"The better approach is to use Array.prototype.filter() method.For example, let's create a removeItem() method for updating the state.javascript\n removeItem(index) {\n   this.setState({\n     data: this.state.data.filter((item, i) => i !== index)\n   })\n }"},{"question":"Is it possible to use React without rendering HTML?","answer":"It is possible. Below are the possible options:jsx harmony\n render() {\n   return false\n }jsx harmony\n render() {\n   return true\n }jsx harmony\n render() {\n   return null\n }React version >=16.0.0:jsx harmony\n render() {\n   return []\n }jsx harmony\n render() {\n   return \"\"\n }React version >=16.2.0:jsx harmony\n render() {\n   return <React.Fragment><\/React.Fragment>\n }jsx harmony\n render() {\n   return <>\n }React version >=18.0.0:jsx harmony\n render() {\n   return undefined\n }"},{"question":"How to pretty print JSON with React?","answer":"We can use <pre> tag so that the formatting of the JSON.stringify() is retained:```jsx harmony\n const data = { name: \"John\", age: 42 };class User extends React.Component {\n   render() {\n     return {JSON.stringify(data, null, 2)};\n   }\n }React.render(, document.getElementById(\"container\"));\n ```"},{"question":"Why you can't update props in React?","answer":"The React philosophy is that props should be immutable and top-down. This means that a parent can send any prop values to a child, but the child can't modify received props."},{"question":"How to focus an input element on page load?","answer":"You can do it by creating ref for input element and using it in componentDidMount():```jsx harmony\n class App extends React.Component {\n   componentDidMount() {\n     this.nameInput.focus();\n   }render() {\n     return (\n       \n\n (this.nameInput = input)}\n           defaultValue={\"Will focus\"}\n         \/>\n       \n     );\n   }\n }ReactDOM.render(, document.getElementById(\"app\"));\n ```Also in Functional component (react 16.08 and above)```jsx harmony\n import React, { useEffect, useRef } from \"react\";const App = () => {\n   const inputElRef = useRef(null);useEffect(() => {\n     inputElRef.current.focus();\n   }, []);return (\n     \n\n\n\n   );\n };ReactDOM.render(, document.getElementById(\"app\"));\n ```"},{"question":"What are the possible ways of updating objects in state?","answer":"Calling setState() with an object to merge with state:\n\nUsing Object.assign() to create a copy of the object:\n\njavascript\n  const user = Object.assign({}, this.state.user, { age: 42 });\n  this.setState({ user });\n\nUsing spread operator:\n\njavascript\n  const user = { ...this.state.user, age: 42 };\n  this.setState({ user });\n\n\nCalling setState() with a function:\njavascript\nthis.setState((prevState) => ({\n  user: {\n    ...prevState.user,\n    age: 42,\n  },\n}));"},{"question":"How can we find the version of React at runtime in the browser?","answer":"You can use React.version to get the version.```jsx harmony\n const REACT_VERSION = React.version;ReactDOM.render(\n   {React version: ${REACT_VERSION}},\n   document.getElementById(\"app\")\n );\n ```"},{"question":"What are the approaches to include polyfills in your create-react-app?","answer":"There are approaches to include polyfills in create-react-app,\n\nManual import from core-js:\nCreate a file called (something like) polyfills.js and import it into root index.js file. Run npm install core-js or yarn add core-js and import your specific required features.\njavascript\nimport \"core-js\/fn\/array\/find\";\nimport \"core-js\/fn\/array\/includes\";\nimport \"core-js\/fn\/number\/is-nan\";\n\n\nUsing Polyfill service:\nUse the polyfill.io CDN to retrieve custom, browser-specific polyfills by adding this line to index.html:\nhtml\n<script src=\"https:\/\/cdn.polyfill.io\/v2\/polyfill.min.js?features=default,Array.prototype.includes\"><\/script>\nIn the above script we had to explicitly request the Array.prototype.includes feature as it is not included in the default feature set."},{"question":"How to use https instead of http in create-react-app?","answer":"You just need to use HTTPS=true configuration. You can edit your package.json scripts section:json\n \"scripts\": {\n   \"start\": \"set HTTPS=true && react-scripts start\"\n }or just run set HTTPS=true && npm start"},{"question":"How to avoid using relative path imports in create-react-app?","answer":"Create a file called .env in the project root and write the import path:NODE_PATH=src\/appAfter that restart the development server. Now you should be able to import anything inside src\/app without relative paths."},{"question":"How to add Google Analytics for React Router?","answer":"Add a listener on the history object to record each page view:javascript\n history.listen(function (location) {\n   window.ga(\"set\", \"page\", location.pathname + location.search);\n   window.ga(\"send\", \"pageview\", location.pathname + location.search);\n });"},{"question":"How to update a component every second?","answer":"You need to use setInterval() to trigger the change, but you also need to clear the timer when the component unmounts to prevent errors and memory leaks.```javascript\n componentDidMount() {\n   this.interval = setInterval(() => this.setState({ time: Date.now() }), 1000)\n }componentWillUnmount() {\n   clearInterval(this.interval)\n }\n ```"},{"question":"How do you apply vendor prefixes to inline styles in React?","answer":"React does not apply vendor prefixes automatically. You need to add vendor prefixes manually.jsx harmony\n <div\n   style={{\n     transform: \"rotate(90deg)\",\n     WebkitTransform: \"rotate(90deg)\", \/\/ note the capital 'W' here\n     msTransform: \"rotate(90deg)\", \/\/ 'ms' is the only lowercase vendor prefix\n   }}\n \/>"},{"question":"How to import and export components using React and ES6?","answer":"You should use default for exporting the components```jsx harmony\n import React from \"react\";\n import User from \"user\";export default class MyProfile extends React.Component {\n   render() {\n     return \/\/...;\n   }\n }\n ```With the export specifier, the MyProfile is going to be the member and exported to this module and the same can be imported without mentioning the name in other components."},{"question":"Why is a component constructor called only once?","answer":"React's reconciliation algorithm assumes that without any information to the contrary, if a custom component appears in the same place on subsequent renders, it's the same component as before, so reuses the previous instance rather than creating a new one."},{"question":"How to define constants in React?","answer":"You can use ES7 static field to define constant.javascript\n class MyComponent extends React.Component {\n   static DEFAULT_PAGINATION = 10;\n }"},{"question":"How to programmatically trigger click event in React?","answer":"You could use the ref prop to acquire a reference to the underlying HTMLInputElement object through a callback, store the reference as a class property, then use that reference to later trigger a click from your event handlers using the HTMLElement.click method.This can be done in two steps:\n\nCreate ref in render method:\njsx harmony\n<input ref={(input) => (this.inputElement = input)} \/>\n\n\nApply click event in your event handler:\njavascript\nthis.inputElement.click();"},{"question":"Is it possible to use async\/await in plain React?","answer":"If you want to use async\/await in React, you will need Babel and transform-async-to-generator plugin. React Native ships with Babel and a set of transforms."},{"question":"What are the common folder structures for React?","answer":"There are two common practices for React project file structure.\n\nGrouping by features or routes:\nOne common way to structure projects is locate CSS, JS, and tests together, grouped by feature or route.\ncommon\/\n\u251c\u2500 Avatar.js\n\u251c\u2500 Avatar.css\n\u251c\u2500 APIUtils.js\n\u2514\u2500 APIUtils.test.js\nfeed\/\n\u251c\u2500 index.js\n\u251c\u2500 Feed.js\n\u251c\u2500 Feed.css\n\u251c\u2500 FeedStory.js\n\u251c\u2500 FeedStory.test.js\n\u2514\u2500 FeedAPI.js\nprofile\/\n\u251c\u2500 index.js\n\u251c\u2500 Profile.js\n\u251c\u2500 ProfileHeader.js\n\u251c\u2500 ProfileHeader.css\n\u2514\u2500 ProfileAPI.js\n\n\nGrouping by file type:\nAnother popular way to structure projects is to group similar files together.\napi\/\n\u251c\u2500 APIUtils.js\n\u251c\u2500 APIUtils.test.js\n\u251c\u2500 ProfileAPI.js\n\u2514\u2500 UserAPI.js\ncomponents\/\n\u251c\u2500 Avatar.js\n\u251c\u2500 Avatar.css\n\u251c\u2500 Feed.js\n\u251c\u2500 Feed.css\n\u251c\u2500 FeedStory.js\n\u251c\u2500 FeedStory.test.js\n\u251c\u2500 Profile.js\n\u251c\u2500 ProfileHeader.js\n\u2514\u2500 ProfileHeader.css"},{"question":"What are the popular packages for animation?","answer":"React Transition Group and React Motion are popular animation packages in React ecosystem."},{"question":"What is the benefit of styles modules?","answer":"It is recommended to avoid hard coding style values in components. Any values that are likely to be used across different UI components should be extracted into their own modules.For example, these styles could be extracted into a separate component:```javascript\n export const colors = {\n   white,\n   black,\n   blue,\n };export const space = [0, 8, 16, 32, 64];\n ```And then imported individually in other components:javascript\n import { space, colors } from \".\/styles\";"},{"question":"What are the popular React-specific linters?","answer":"ESLint is a popular JavaScript linter. There are plugins available that analyse specific code styles. One of the most common for React is an npm package called eslint-plugin-react. By default, it will check a number of best practices, with rules checking things from keys in iterators to a complete set of prop types.Another popular plugin is eslint-plugin-jsx-a11y, which will help fix common issues with accessibility. As JSX offers slightly different syntax to regular HTML, issues with alt text and tabindex, for example, will not be picked up by regular plugins."},{"question":"How to make AJAX call and in which component lifecycle methods should I make an AJAX call?","answer":"You can use AJAX libraries such as Axios, jQuery AJAX, and the browser built-in fetch. You should fetch data in the componentDidMount() lifecycle method. This is so you can use setState() to update your component when the data is retrieved.For example, the employees list fetched from API and set local state:```jsx harmony\n class MyComponent extends React.Component {\n   constructor(props) {\n     super(props);\n     this.state = {\n       employees: [],\n       error: null,\n     };\n   }componentDidMount() {\n     fetch(\"https:\/\/api.example.com\/items\")\n       .then((res) => res.json())\n       .then(\n         (result) => {\n           this.setState({\n             employees: result.employees,\n           });\n         },\n         (error) => {\n           this.setState({ error });\n         }\n       );\n   }render() {\n     const { error, employees } = this.state;\n     if (error) {\n       return Error: {error.message};\n     } else {\n       return (\n         \n           {employees.map((employee) => (\n             \n               {employee.name}-{employee.experience}\n             \n           ))}\n         \n       );\n     }\n   }\n }\n ```"},{"question":"What are render props?","answer":"Render Props is a simple technique for sharing code between components using a prop whose value is a function. The below component uses render prop which returns a React element.jsx harmony\n <DataProvider render={(data) => <h1>{`Hello ${data.target}`}<\/h1>} \/>Libraries such as React Router and DownShift are using this pattern."},{"question":"What is React Router?","answer":"React Router is a powerful routing library built on top of React that helps you add new screens and flows to your application incredibly quickly, all while keeping the URL in sync with what's being displayed on the page."},{"question":"How React Router is different from history library?","answer":"React Router is a wrapper around the history library which handles interaction with the browser's window.history with its browser and hash histories. It also provides memory history which is useful for environments that don't have global history, such as mobile app development (React Native) and unit testing with Node."},{"question":"What are the <Router> components of React Router v4?","answer":"React Router v4 provides below 3 <Router> components:\n<BrowserRouter>\n<HashRouter>\n<MemoryRouter>\nThe above components will create browser, hash, and memory history instances. React Router v4 makes the properties and methods of the history instance associated with your router available through the context in the router object."},{"question":"What is the purpose of push() and replace() methods of history?","answer":"A history instance has two methods for navigation purpose.\npush()\nreplace()\nIf you think of the history as an array of visited locations, push() will add a new location to the array and replace() will replace the current location in the array with the new one."},{"question":"How do you programmatically navigate using React Router v4?","answer":"There are three different ways to achieve programmatic routing\/navigation within components.\n\nUsing the withRouter() higher-order function:\nThe withRouter() higher-order function will inject the history object as a prop of the component. This object provides push() and replace() methods to avoid the usage of context.\n```jsx harmony\nimport { withRouter } from \"react-router-dom\"; \/\/ this also works with 'react-router-native'\nconst Button = withRouter(({ history }) => (\n   {\n      history.push(\"\/new-location\");\n    }}\n\n{\"Click Me!\"}\n\n\n));\n```\n\n\n\nUsing <Route> component and render props pattern:\nThe <Route> component passes the same props as withRouter(), so you will be able to access the history methods through the history prop.\n```jsx harmony\nimport { Route } from \"react-router-dom\";\nconst Button = () => (\n   (\n       {\n          history.push(\"\/new-location\");\n        }}\n      >\n        {\"Click Me!\"}\n      \n    )}\n  \/>\n);\n```\n\n\nUsing context:\nThis option is not recommended and treated as unstable API.\n```jsx harmony\nconst Button = (props, context) => (\n   {\n      context.history.push(\"\/new-location\");\n    }}\n\n{\"Click Me!\"}\n\n\n);\n\nButton.contextTypes = {\n  history: React.PropTypes.shape({\n    push: React.PropTypes.func.isRequired,\n  }),\n};\n```"},{"question":"How to get query parameters in React Router v4?","answer":"The ability to parse query strings was taken out of React Router v4 because there have been user requests over the years to support different implementation. So the decision has been given to users to choose the implementation they like. The recommended approach is to use query strings library.javascript\n const queryString = require(\"query-string\");\n const parsed = queryString.parse(props.location.search);You can also use URLSearchParams if you want something native:javascript\n const params = new URLSearchParams(props.location.search);\n const foo = params.get(\"name\");You should use a polyfill for IE11."},{"question":"Why you get \"Router may have only one child element\" warning?","answer":"You have to wrap your Route's in a <Switch> block because <Switch> is unique in that it renders a route exclusively.At first you need to add Switch to your imports:javascript\n import { Switch, Router, Route } from \"react-router\";Then define the routes within <Switch> block:jsx harmony\n <Router>\n   <Switch>\n     <Route {\/* ... *\/} \/>\n     <Route {\/* ... *\/} \/>\n   <\/Switch>\n <\/Router>"},{"question":"How to pass params to history.push method in React Router v4?","answer":"While navigating you can pass props to the history object:javascript\n this.props.history.push({\n   pathname: \"\/template\",\n   search: \"?name=sudheer\",\n   state: { detail: response.data },\n });The search property is used to pass query params in push() method."},{"question":"How to implement default or NotFound page?","answer":"A <Switch> renders the first child <Route> that matches. A <Route> with no path always matches. So you just need to simply drop path attribute as belowjsx harmony\n <Switch>\n   <Route exact path=\"\/\" component={Home} \/>\n   <Route path=\"\/user\" component={User} \/>\n   <Route component={NotFound} \/>\n <\/Switch>"},{"question":"How to get history on React Router v4?","answer":"Below are the list of steps to get history object on React Router v4,\n\nCreate a module that exports a history object and import this module across the project.\nFor example, create history.js file:\n```javascript\nimport { createBrowserHistory } from \"history\";\nexport default createBrowserHistory({\n  \/ pass a configuration object here if needed \/\n});\n```\n\n\nYou should use the <Router> component instead of built-in routers. Import the above history.js inside index.js file:\n```jsx harmony\nimport { Router } from \"react-router-dom\";\nimport history from \".\/history\";\nimport App from \".\/App\";\nReactDOM.render(\n  \n\n,\n  holder\n);\n```\n\n\nYou can also use push method of history object similar to built-in history object:\n```javascript\n\/\/ some-other-file.js\nimport history from \".\/history\";\nhistory.push(\"\/go-here\");\n```"},{"question":"How to perform automatic redirect after login?","answer":"The react-router package provides <Redirect> component in React Router. Rendering a <Redirect> will navigate to a new location. Like server-side redirects, the new location will override the current location in the history stack.```javascript\n import React, { Component } from \"react\";\n import { Redirect } from \"react-router\";export default class LoginComponent extends Component {\n   render() {\n     if (this.state.isLoggedIn === true) {\n       return ;\n     } else {\n       return {\"Login Please\"};\n     }\n   }\n }\n ```"},{"question":"What is React Intl?","answer":"The React Intl library makes internationalization in React straightforward, with off-the-shelf components and an API that can handle everything from formatting strings, dates, and numbers, to pluralization. React Intl is part of FormatJS which provides bindings to React via its components and API."},{"question":"What are the main features of React Intl?","answer":"Below are the main features of React Intl,\nDisplay numbers with separators.\nDisplay dates and times correctly.\nDisplay dates relative to \"now\".\nPluralize labels in strings.\nSupport for 150+ languages.\nRuns in the browser and Node.\nBuilt on standards."},{"question":"What are the two ways of formatting in React Intl?","answer":"The library provides two ways to format strings, numbers, and dates:\n\nUsing react components:\njsx harmony\n<FormattedMessage\n  id={\"account\"}\n  defaultMessage={\"The amount is less than minimum balance.\"}\n\/>\n\n\nUsing an API:\n```javascript\nconst messages = defineMessages({\n  accountMessage: {\n    id: \"account\",\n    defaultMessage: \"The amount is less than minimum balance.\",\n  },\n});\nformatMessage(messages.accountMessage);\n```"},{"question":"How to use <FormattedMessage> as placeholder using React Intl?","answer":"The <Formatted... \/> components from react-intl return elements, not plain text, so they can't be used for placeholders, alt text, etc. In that case, you should use lower level API formatMessage(). You can inject the intl object into your component using injectIntl() higher-order component and then format the message using formatMessage() available on that object.```jsx harmony\n import React from \"react\";\n import { injectIntl, intlShape } from \"react-intl\";const MyComponent = ({ intl }) => {\n   const placeholder = intl.formatMessage({ id: \"messageId\" });\n   return ;\n };MyComponent.propTypes = {\n   intl: intlShape.isRequired,\n };export default injectIntl(MyComponent);\n ```"},{"question":"How to access current locale with React Intl?","answer":"You can get the current locale in any component of your application using injectIntl():```jsx harmony\n import { injectIntl, intlShape } from \"react-intl\";const MyComponent = ({ intl }) => (\n   {The current locale is ${intl.locale}}\n );MyComponent.propTypes = {\n   intl: intlShape.isRequired,\n };export default injectIntl(MyComponent);\n ```"},{"question":"How to format date using React Intl?","answer":"The injectIntl() higher-order component will give you access to the formatDate() method via the props in your component. The method is used internally by instances of FormattedDate and it returns the string representation of the formatted date.```jsx harmony\n import { injectIntl, intlShape } from \"react-intl\";const stringDate = this.props.intl.formatDate(date, {\n   year: \"numeric\",\n   month: \"numeric\",\n   day: \"numeric\",\n });const MyComponent = ({ intl }) => (\n   {The formatted date is ${stringDate}}\n );MyComponent.propTypes = {\n   intl: intlShape.isRequired,\n };export default injectIntl(MyComponent);\n ```"},{"question":"What is Shallow Renderer in React testing?","answer":"Shallow rendering is useful for writing unit test cases in React. It lets you render a component one level deep and assert facts about what its render method returns, without worrying about the behavior of child components, which are not instantiated or rendered.For example, if you have the following component:javascript\n function MyComponent() {\n   return (\n     <div>\n       <span className={\"heading\"}>{\"Title\"}<\/span>\n       <span className={\"description\"}>{\"Description\"}<\/span>\n     <\/div>\n   );\n }Then you can assert as follows:```jsx harmony\n import ShallowRenderer from \"react-test-renderer\/shallow\";\/\/ in your test\n const renderer = new ShallowRenderer();\n renderer.render();const result = renderer.getRenderOutput();expect(result.type).toBe(\"div\");\n expect(result.props.children).toEqual([\n   {\"Title\"},\n   {\"Description\"},\n ]);\n ```"},{"question":"What is TestRenderer package in React?","answer":"This package provides a renderer that can be used to render components to pure JavaScript objects, without depending on the DOM or a native mobile environment. This package makes it easy to grab a snapshot of the platform view hierarchy (similar to a DOM tree) rendered by a ReactDOM or React Native without using a browser or jsdom.```jsx harmony\n import TestRenderer from \"react-test-renderer\";const Link = ({ page, children }) => {children};const testRenderer = TestRenderer.create(\n   {\"Facebook\"}\n );console.log(testRenderer.toJSON());\n \/\/ {\n \/\/   type: 'a',\n \/\/   props: { href: 'https:\/\/www.facebook.com\/' },\n \/\/   children: [ 'Facebook' ]\n \/\/ }\n ```"},{"question":"What is the purpose of ReactTestUtils package?","answer":"ReactTestUtils are provided in the with-addons package and allow you to perform actions against a simulated DOM for the purpose of unit testing."},{"question":"What is Jest?","answer":"Jest is a JavaScript unit testing framework created by Facebook based on Jasmine and provides automated mock creation and a jsdom environment. It's often used for testing components."},{"question":"What are the advantages of Jest over Jasmine?","answer":"There are couple of advantages compared to Jasmine:\nAutomatically finds tests to execute in your source code.\nAutomatically mocks dependencies when running your tests.\nAllows you to test asynchronous code synchronously.\nRuns your tests with a fake DOM implementation (via jsdom) so that your tests can be run on the command line.\nRuns tests in parallel processes so that they finish sooner."},{"question":"Give a simple example of Jest test case","answer":"Let's write a test for a function that adds two numbers in sum.js file:```javascript\n const sum = (a, b) => a + b;export default sum;\n ```Create a file named sum.test.js which contains actual test:```javascript\n import sum from \".\/sum\";test(\"adds 1 + 2 to equal 3\", () => {\n   expect(sum(1, 2)).toBe(3);\n });\n ```And then add the following section to your package.json:json\n {\n   \"scripts\": {\n     \"test\": \"jest\"\n   }\n }Finally, run yarn test or npm test and Jest will print a result:console\n $ yarn test\n PASS .\/sum.test.js\n \u2713 adds 1 + 2 to equal 3 (2ms)"},{"question":"What is flux?","answer":"Flux is an application design paradigm used as a replacement for the more traditional MVC pattern. It is not a framework or a library but a new kind of architecture that complements React and the concept of Unidirectional Data Flow. Facebook uses this pattern internally when working with React.The workflow between dispatcher, stores and views components with distinct inputs and outputs as follows:"},{"question":"What is Redux?","answer":"Redux is a predictable state container for JavaScript apps based on the Flux design pattern. Redux can be used together with React, or with any other view library. It is tiny (about 2kB) and has no dependencies."},{"question":"What are the core principles of Redux?","answer":"Redux follows three fundamental principles:\nSingle source of truth: The state of your whole application is stored in an object tree within a single store. The single state tree makes it easier to keep track of changes over time and debug or inspect the application.\nState is read-only: The only way to change the state is to emit an action, an object describing what happened. This ensures that neither the views nor the network callbacks will ever write directly to the state.\nChanges are made with pure functions: To specify how the state tree is transformed by actions, you write reducers. Reducers are just pure functions that take the previous state and an action as parameters, and return the next state."},{"question":"What are the downsides of Redux compared to Flux?","answer":"Instead of saying downsides we can say that there are few compromises of using Redux over Flux. Those are as follows:\nYou will need to learn to avoid mutations: Flux is un-opinionated about mutating data, but Redux doesn't like mutations and many packages complementary to Redux assume you never mutate the state. You can enforce this with dev-only packages like redux-immutable-state-invariant, Immutable.js, or instructing your team to write non-mutating code.\nYou're going to have to carefully pick your packages: While Flux explicitly doesn't try to solve problems such as undo\/redo, persistence, or forms, Redux has extension points such as middleware and store enhancers, and it has spawned a rich ecosystem.\nThere is no nice Flow integration yet: Flux currently lets you do very impressive static type checks which Redux doesn't support yet."},{"question":"What is the difference between mapStateToProps() and mapDispatchToProps()?","answer":"mapStateToProps() is a utility which helps your component get updated state (which is updated by some other components):javascript\n const mapStateToProps = (state) => {\n   return {\n     todos: getVisibleTodos(state.todos, state.visibilityFilter),\n   };\n };mapDispatchToProps() is a utility which will help your component to fire an action event (dispatching action which may cause change of application state):javascript\n const mapDispatchToProps = (dispatch) => {\n   return {\n     onTodoClick: (id) => {\n       dispatch(toggleTodo(id));\n     },\n   };\n };It is recommended to always use the \u201cobject shorthand\u201d form for the mapDispatchToProps.Redux wraps it in another function that looks like (\u2026args) => dispatch(onTodoClick(\u2026args)), and pass that wrapper function as a prop to your component.javascript\n const mapDispatchToProps = {\n   onTodoClick,\n };"},{"question":"Can I dispatch an action in reducer?","answer":"Dispatching an action within a reducer is an anti-pattern. Your reducer should be without side effects, simply digesting the action payload and returning a new state object. Adding listeners and dispatching actions within the reducer can lead to chained actions and other side effects."},{"question":"How to access Redux store outside a component?","answer":"You just need to export the store from the module where it created with createStore(). Also, it shouldn't pollute the global window object.```javascript\n store = createStore(myReducer);export default store;\n ```"},{"question":"What are the drawbacks of MVW pattern?","answer":"DOM manipulation is very expensive which causes applications to behave slow and inefficient.\nDue to circular dependencies, a complicated model was created around models and views.\nLot of data changes happens for collaborative applications(like Google Docs).\nNo way to do undo (travel back in time) easily without adding so much extra code."},{"question":"Are there any similarities between Redux and RxJS?","answer":"These libraries are very different for very different purposes, but there are some vague similarities.Redux is a tool for managing state throughout the application. It is usually used as an architecture for UIs. Think of it as an alternative to (half of) Angular. RxJS is a reactive programming library. It is usually used as a tool to accomplish asynchronous tasks in JavaScript. Think of it as an alternative to Promises. Redux uses the Reactive paradigm because the Store is reactive. The Store observes actions from a distance, and changes itself. RxJS also uses the Reactive paradigm, but instead of being an architecture, it gives you basic building blocks, Observables, to accomplish this pattern."},{"question":"How to dispatch an action on load?","answer":"You can dispatch an action in componentDidMount() method and in render() method you can verify the data.```javascript\n class App extends Component {\n   componentDidMount() {\n     this.props.fetchData();\n   }render() {\n     return this.props.isLoaded ? (\n       {\"Loaded\"}\n     ) : (\n       {\"Not Loaded\"}\n     );\n   }\n }const mapStateToProps = (state) => ({\n   isLoaded: state.isLoaded,\n });const mapDispatchToProps = { fetchData };export default connect(mapStateToProps, mapDispatchToProps)(App);\n ```"},{"question":"How to use connect() from React Redux?","answer":"You need to follow two steps to use your store in your container:\nUse mapStateToProps(): It maps the state variables from your store to the props that you specify.\n\nConnect the above props to your container: The object returned by the mapStateToProps function is connected to the container. You can import connect() from react-redux.\n```jsx harmony\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nclass App extends React.Component {\n  render() {\n    return {this.props.containerData};\n  }\n}\nfunction mapStateToProps(state) {\n  return { containerData: state.data };\n}\nexport default connect(mapStateToProps)(App);\n```"},{"question":"How to reset state in Redux?","answer":"You need to write a root reducer in your application which delegate handling the action to the reducer generated by combineReducers().For example, let us take rootReducer() to return the initial state after USER_LOGOUT action. As we know, reducers are supposed to return the initial state when they are called with undefined as the first argument, no matter the action.```javascript\n const appReducer = combineReducers({\n   \/ your app's top-level reducers \/\n });const rootReducer = (state, action) => {\n   if (action.type === \"USER_LOGOUT\") {\n     state = undefined;\n   }return appReducer(state, action);\n };\n ```In case of using redux-persist, you may also need to clean your storage. redux-persist keeps a copy of your state in a storage engine. First, you need to import the appropriate storage engine and then, to parse the state before setting it to undefined and clean each storage state key.```javascript\n const appReducer = combineReducers({\n   \/ your app's top-level reducers \/\n });const rootReducer = (state, action) => {\n   if (action.type === \"USER_LOGOUT\") {\n     Object.keys(state).forEach((key) => {\n       storage.removeItem(persist:${key});\n     }); state = undefined;\n}return appReducer(state, action);\n };\n ```"},{"question":"Whats the purpose of at symbol in the Redux connect decorator?","answer":"The @ symbol is in fact a JavaScript expression used to signify decorators. Decorators make it possible to annotate and modify classes and properties at design time.Let's take an example setting up Redux without and with a decorator.\nWithout decorator:\n```javascript\n   import React from \"react\";\n   import * as actionCreators from \".\/actionCreators\";\n   import { bindActionCreators } from \"redux\";\n   import { connect } from \"react-redux\";function mapStateToProps(state) {\n     return { todos: state.todos };\n   }function mapDispatchToProps(dispatch) {\n     return { actions: bindActionCreators(actionCreators, dispatch) };\n   }class MyApp extends React.Component {\n     \/\/ ...define your main app here\n   }export default connect(mapStateToProps, mapDispatchToProps)(MyApp);\n   ```\nWith decorator:\n```javascript\n   import React from \"react\";\n   import * as actionCreators from \".\/actionCreators\";\n   import { bindActionCreators } from \"redux\";\n   import { connect } from \"react-redux\";function mapStateToProps(state) {\n     return { todos: state.todos };\n   }function mapDispatchToProps(dispatch) {\n     return { actions: bindActionCreators(actionCreators, dispatch) };\n   }@connect(mapStateToProps, mapDispatchToProps)\n   export default class MyApp extends React.Component {\n     \/\/ ...define your main app here\n   }\n   ```The above examples are almost similar except the usage of decorator. The decorator syntax isn't built into any JavaScript runtimes yet, and is still experimental and subject to change. You can use babel for the decorators support."},{"question":"What is the difference between React context and React Redux?","answer":"You can use Context in your application directly and is going to be great for passing down data to deeply nested components which what it was designed for.Whereas Redux is much more powerful and provides a large number of features that the Context API doesn't provide. Also, React Redux uses context internally but it doesn't expose this fact in the public API."},{"question":"Why are Redux state functions called reducers?","answer":"Reducers always return the accumulation of the state (based on all previous and current actions). Therefore, they act as a reducer of state. Each time a Redux reducer is called, the state and action are passed as parameters. This state is then reduced (or accumulated) based on the action, and then the next state is returned. You could reduce a collection of actions and an initial state (of the store) on which to perform these actions to get the resulting final state."},{"question":"How to make AJAX request in Redux?","answer":"You can use redux-thunk middleware which allows you to define async actions.Let's take an example of fetching specific account as an AJAX call using fetch API:``javascript\n export function fetchAccount(id) {\n   return (dispatch) => {\n     dispatch(setLoadingAccountState()); \/\/ Show a loading spinner\n     fetch(\/account\/${id}`, (response) => {\n       dispatch(doneFetchingAccount()); \/\/ Hide loading spinner\n       if (response.status === 200) {\n         dispatch(setAccount(response.json)); \/\/ Use a normal function to set the received state\n       } else {\n         dispatch(someError);\n       }\n     });\n   };\n }function setAccount(data) {\n   return { type: \"SET_Account\", data: data };\n }\n ```"},{"question":"Should I keep all component's state in Redux store?","answer":"Keep your data in the Redux store, and the UI related state internally in the component."},{"question":"What is the proper way to access Redux store?","answer":"The best way to access your store in a component is to use the connect() function, that creates a new component that wraps around your existing one. This pattern is called Higher-Order Components, and is generally the preferred way of extending a component's functionality in React. This allows you to map state and action creators to your component, and have them passed in automatically as your store updates.Let's take an example of <FilterLink> component using connect:```javascript\n import { connect } from \"react-redux\";\n import { setVisibilityFilter } from \"..\/actions\";\n import Link from \"..\/components\/Link\";const mapStateToProps = (state, ownProps) => ({\n   active: ownProps.filter === state.visibilityFilter,\n });const mapDispatchToProps = (dispatch, ownProps) => ({\n   onClick: () => dispatch(setVisibilityFilter(ownProps.filter)),\n });const FilterLink = connect(mapStateToProps, mapDispatchToProps)(Link);export default FilterLink;\n ```Due to it having quite a few performance optimizations and generally being less likely to cause bugs, the Redux developers almost always recommend using connect() over accessing the store directly (using context API).javascript\n class MyComponent {\n   someMethod() {\n     doSomethingWith(this.context.store);\n   }\n }"},{"question":"What is the difference between component and container in React Redux?","answer":"Component is a class or function component that describes the presentational part of your application.Container is an informal term for a component that is connected to a Redux store. Containers subscribe to Redux state updates and dispatch actions, and they usually don't render DOM elements; they delegate rendering to presentational child components."},{"question":"What is the purpose of the constants in Redux?","answer":"Constants allows you to easily find all usages of that specific functionality across the project when you use an IDE. It also prevents you from introducing silly bugs caused by typos \u2013 in which case, you will get a ReferenceError immediately.Normally we will save them in a single file (constants.js or actionTypes.js).javascript\n export const ADD_TODO = \"ADD_TODO\";\n export const DELETE_TODO = \"DELETE_TODO\";\n export const EDIT_TODO = \"EDIT_TODO\";\n export const COMPLETE_TODO = \"COMPLETE_TODO\";\n export const COMPLETE_ALL = \"COMPLETE_ALL\";\n export const CLEAR_COMPLETED = \"CLEAR_COMPLETED\";In Redux, you use them in two places:\n\nDuring action creation:\nLet's take actions.js:\n```javascript\nimport { ADD_TODO } from \".\/actionTypes\";\nexport function addTodo(text) {\n  return { type: ADD_TODO, text };\n}\n```\n\n\nIn reducers:\nLet's create reducer.js:\n```javascript\nimport { ADD_TODO } from \".\/actionTypes\";\nexport default (state = [], action) => {\n  switch (action.type) {\n    case ADD_TODO:\n      return [\n        ...state,\n        {\n          text: action.text,\n          completed: false,\n        },\n      ];\n    default:\n      return state;\n  }\n};\n```"},{"question":"What are the different ways to write mapDispatchToProps()?","answer":"There are a few ways of binding action creators to dispatch() in mapDispatchToProps().Below are the possible options:javascript\n const mapDispatchToProps = (dispatch) => ({\n   action: () => dispatch(action()),\n });javascript\n const mapDispatchToProps = (dispatch) => ({\n   action: bindActionCreators(action, dispatch),\n });javascript\n const mapDispatchToProps = { action };The third option is just a shorthand for the first one."},{"question":"What is the use of the ownProps parameter in mapStateToProps() and mapDispatchToProps()?","answer":"If the ownProps parameter is specified, React Redux will pass the props that were passed to the component into your connect functions. So, if you use a connected component:```jsx harmony\n import ConnectedComponent from \".\/containers\/ConnectedComponent\";;\n ```The ownProps inside your mapStateToProps() and mapDispatchToProps() functions will be an object:javascript\n {\n   user: \"john\";\n }You can use this object to decide what to return from those functions."},{"question":"How to structure Redux top level directories?","answer":"Most of the applications has several top-level directories as below:\nComponents: Used for dumb components unaware of Redux.\nContainers: Used for smart components connected to Redux.\nActions: Used for all action creators, where file names correspond to part of the app.\nReducers: Used for all reducers, where files name correspond to state key.\nStore: Used for store initialization.\nThis structure works well for small and medium size apps."},{"question":"What is redux-saga?","answer":"redux-saga is a library that aims to make side effects (asynchronous things like data fetching and impure things like accessing the browser cache) in React\/Redux applications easier and better.It is available in NPM:console\n $ npm install --save redux-saga"},{"question":"What is the mental model of redux-saga?","answer":"Saga is like a separate thread in your application, that's solely responsible for side effects. redux-saga is a redux middleware, which means this thread can be started, paused and cancelled from the main application with normal Redux actions, it has access to the full Redux application state and it can dispatch Redux actions as well."},{"question":"What are the differences between call() and put() in redux-saga?","answer":"Both call() and put() are effect creator functions. call() function is used to create effect description, which instructs middleware to call the promise. put() function creates an effect, which instructs middleware to dispatch an action to the store.Let's take example of how these effects work for fetching particular user data.``javascript\n function* fetchUserSaga(action) {\n   \/\/callfunction accepts rest arguments, which will be passed toapi.fetchUserfunction.\n   \/\/ Instructing middleware to call promise, it resolved value will be assigned touserData` variable\n   const userData = yield call(api.fetchUser, action.userId);\/\/ Instructing middleware to dispatch corresponding action.\n   yield put({\n     type: \"FETCH_USER_SUCCESS\",\n     userData,\n   });\n }\n ```"},{"question":"What is Redux Thunk?","answer":"Redux Thunk middleware allows you to write action creators that return a function instead of an action. The thunk can be used to delay the dispatch of an action, or to dispatch only if a certain condition is met. The inner function receives the store methods dispatch() and getState() as parameters."},{"question":"What are the differences between redux-saga and redux-thunk?","answer":"Both Redux Thunk and Redux Saga take care of dealing with side effects. In most of the scenarios, Thunk uses Promises to deal with them, whereas Saga uses Generators. Thunk is simple to use and Promises are familiar to many developers, Sagas\/Generators are more powerful but you will need to learn them. But both middleware can coexist, so you can start with Thunks and introduce Sagas when\/if you need them."},{"question":"What is Redux DevTools?","answer":"Redux DevTools is a live-editing time travel environment for Redux with hot reloading, action replay, and customizable UI. If you don't want to bother with installing Redux DevTools and integrating it into your project, consider using Redux DevTools Extension for Chrome and Firefox."},{"question":"What are the features of Redux DevTools?","answer":"Some of the main features of Redux DevTools are below,\nLets you inspect every state and action payload.\nLets you go back in time by cancelling actions.\nIf you change the reducer code, each staged action will be re-evaluated.\nIf the reducers throw, you will see during which action this happened, and what the error was.\nWith persistState() store enhancer, you can persist debug sessions across page reloads."},{"question":"What are Redux selectors and why to use them?","answer":"Selectors are functions that take Redux state as an argument and return some data to pass to the component.For example, to get user details from the state:javascript\n const getUserData = (state) => state.user.data;These selectors have two main benefits,\nThe selector can compute derived data, allowing Redux to store the minimal possible state\nThe selector is not recomputed unless one of its arguments changes"},{"question":"What is Redux Form?","answer":"Redux Form works with React and Redux to enable a form in React to use Redux to store all of its state. Redux Form can be used with raw HTML5 inputs, but it also works very well with common UI frameworks like Material UI, React Widgets and React Bootstrap."},{"question":"What are the main features of Redux Form?","answer":"Some of the main features of Redux Form are:\nField values persistence via Redux store.\nValidation (sync\/async) and submission.\nFormatting, parsing and normalization of field values."},{"question":"How to add multiple middlewares to Redux?","answer":"You can use applyMiddleware().For example, you can add redux-thunk and logger passing them as arguments to applyMiddleware():javascript\n import { createStore, applyMiddleware } from \"redux\";\n const createStoreWithMiddleware = applyMiddleware(\n   ReduxThunk,\n   logger\n )(createStore);"},{"question":"How to set initial state in Redux?","answer":"You need to pass initial state as second argument to createStore:```javascript\n const rootReducer = combineReducers({\n   todos: todos,\n   visibilityFilter: visibilityFilter,\n });const initialState = {\n   todos: [{ id: 123, name: \"example\", completed: false }],\n };const store = createStore(rootReducer, initialState);\n ```"},{"question":"How Relay is different from Redux?","answer":"Relay is similar to Redux in that they both use a single store. The main difference is that relay only manages state originated from the server, and all access to the state is used via GraphQL queries (for reading data) and mutations (for changing data). Relay caches the data for you and optimizes data fetching for you, by fetching only changed data and nothing more."},{"question":"What is an action in Redux?","answer":"Actions are plain JavaScript objects or payloads of information that send data from your application to your store. They are the only source of information for the store. Actions must have a type property that indicates the type of action being performed.For example, let's take an action which represents adding a new todo item:{\n   type: ADD_TODO,\n   text: 'Add todo item'\n }"},{"question":"What is the difference between React Native and React?","answer":"React is a JavaScript library, supporting both front end web and being run on the server, for building user interfaces and web applications.React Native is a mobile framework that compiles to native app components, allowing you to build native mobile applications (iOS, Android, and Windows) in JavaScript that allows you to use React to build your components, and implements React under the hood."},{"question":"How to test React Native apps?","answer":"React Native can be tested only in mobile simulators like iOS and Android. You can run the app in your mobile using expo app (https:\/\/expo.io) Where it syncs using QR code, your mobile and computer should be in same wireless network."},{"question":"How to do logging in React Native?","answer":"You can use console.log, console.warn, etc. As of React Native v0.29 you can simply run the following to see logs in the console:$ react-native log-ios\n $ react-native log-android"},{"question":"How to debug your React Native?","answer":"Follow the below steps to debug React Native app:\nRun your application in the iOS simulator.\nPress Command + D and a webpage should open up at http:\/\/localhost:8081\/debugger-ui.\nEnable Pause On Caught Exceptions for a better debugging experience.\nPress Command + Option + I to open the Chrome Developer tools, or open it via View -> Developer -> Developer Tools.\nYou should now be able to debug as you normally would."},{"question":"What is reselect and how it works?","answer":"Reselect is a selector library (for Redux) which uses memoization concept. It was originally written to compute derived data from Redux-like applications state, but it can't be tied to any architecture or library.Reselect keeps a copy of the last inputs\/outputs of the last call, and recomputes the result only if one of the inputs changes. If the the same inputs are provided twice in a row, Reselect returns the cached output. It's memoization and cache are fully customizable."},{"question":"What is Flow?","answer":"Flow is a static type checker designed to find type errors in JavaScript. Flow types can express much more fine-grained distinctions than traditional type systems. For example, Flow helps you catch errors involving null, unlike most type systems."},{"question":"What is the difference between Flow and PropTypes?","answer":"Flow is a static analysis tool (static checker) which uses a superset of the language, allowing you to add type annotations to all of your code and catch an entire class of bugs at compile time.PropTypes is a basic type checker (runtime checker) which has been patched onto React. It can't check anything other than the types of the props being passed to a given component. If you want more flexible typechecking for your entire project Flow\/TypeScript are appropriate choices."},{"question":"How to use Font Awesome icons in React?","answer":"The below steps followed to include Font Awesome in React:\n\nInstall font-awesome:\nconsole\n$ npm install --save font-awesome\n\n\nImport font-awesome in your index.js file:\njavascript\nimport \"font-awesome\/css\/font-awesome.min.css\";\n\n\nAdd Font Awesome classes in className:\njavascript\nrender() {\n  return <div><i className={'fa fa-spinner'} \/><\/div>\n}"},{"question":"What is React Dev Tools?","answer":"React Developer Tools let you inspect the component hierarchy, including component props and state. It exists both as a browser extension (for Chrome and Firefox), and as a standalone app (works with other environments including Safari, IE, and React Native).The official extensions available for different browsers or environments.\nChrome extension\nFirefox extension\nStandalone app (Safari, React Native, etc)"},{"question":"Why is DevTools not loading in Chrome for local files?","answer":"If you opened a local HTML file in your browser (file:\/\/...) then you must first open Chrome Extensions and check Allow access to file URLs."},{"question":"How to use Polymer in React?","answer":"You need to follow below steps to use Polymer in React,\n\nCreate a Polymer element:\njsx harmony\n<link\n  rel=\"import\"\n  href=\"..\/..\/bower_components\/polymer\/polymer.html\"\n\/>;\nPolymer({\n  is: \"calendar-element\",\n  ready: function () {\n    this.textContent = \"I am a calendar\";\n  },\n});\n\n\nCreate the Polymer component HTML tag by importing it in a HTML document, e.g. import it in the index.html of your React application:\nhtml\n<link\n  rel=\"import\"\n  href=\".\/src\/polymer-components\/calendar-element.html\"\n\/>\n\n\nUse that element in the JSX file:\n```javascript\nimport React from \"react\";\nclass MyComponent extends React.Component {\n  render() {\n    return ;\n  }\n}\nexport default MyComponent;\n```"},{"question":"What are the advantages of React over Vue.js?","answer":"React has the following advantages over Vue.js:\nGives more flexibility in large apps developing.\nEasier to test.\nSuitable for mobile apps creating.\nMore information and solutions available."},{"question":"What is the difference between React and Angular?","answer":"Let's see the difference between React and Angular in a table format.| React                                                                                       | Angular                                                                                                                            |\n | ------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------- |\n | React is a library and has only the View layer                                              | Angular is a framework and has complete MVC functionality                                                                          |\n | React handles rendering on the server side                                                  | AngularJS renders only on the client side but Angular 2 and above renders on the server side                                       |\n | React uses JSX that looks like HTML in JS which can be confusing                            | Angular follows the template approach for HTML, which makes code shorter and easy to understand                                    |\n | React Native, which is a React type to build mobile applications are faster and more stable | Ionic, Angular's mobile native app is relatively less stable and slower                                                            |\n | In React, data flows only in one way and hence debugging is easy                            | In Angular, data flows both way i.e it has two-way data binding between children and parent and hence debugging is often difficult |"},{"question":"Why React tab is not showing up in DevTools?","answer":"When the page loads, React DevTools sets a global named __REACT_DEVTOOLS_GLOBAL_HOOK__, then React communicates with that hook during initialization. If the website is not using React or if React fails to communicate with DevTools then it won't show up the tab."},{"question":"What are Styled Components?","answer":"styled-components is a JavaScript library for styling React applications. It removes the mapping between styles and components, and lets you write actual CSS augmented with JavaScript."},{"question":"Give an example of Styled Components?","answer":"Lets create <Title> and <Wrapper> components with specific styles for each.```javascript\n import React from \"react\";\n import styled from \"styled-components\";\/\/ Create a  component that renders an  which is centered, red and sized at 1.5em\n const Title = styled.h1font-size: 1.5em;\n   text-align: center;\n   color: palevioletred;;\/\/ Create a  component that renders a  with some padding and a papayawhip background\n const Wrapper = styled.sectionpadding: 4em;\n   background: papayawhip;;\n ```These two variables, Title and Wrapper, are now components that you can render just like any other react component.jsx harmony\n <Wrapper>\n   <Title>{\"Lets start first styled component!\"}<\/Title>\n <\/Wrapper>"},{"question":"What is Relay?","answer":"Relay is a JavaScript framework for providing a data layer and client-server communication to web applications using the React view layer."},{"question":"How to use TypeScript in create-react-app application?","answer":"Starting from react-scripts@2.1.0 or higher, there is a built-in support for typescript. i.e, create-react-app now supports typescript natively. You can just pass --typescript option as below```bash\n npx create-react-app my-app --typescript# oryarn create react-app my-app --typescript\n ```But for lower versions of react scripts, just supply --scripts-version option as react-scripts-ts while you create a new project. react-scripts-ts is a set of adjustments to take the standard create-react-app project pipeline and bring TypeScript into the mix.Now the project layout should look like the following:my-app\/\n \u251c\u2500 .gitignore\n \u251c\u2500 images.d.ts\n \u251c\u2500 node_modules\/\n \u251c\u2500 public\/\n \u251c\u2500 src\/\n \u2502  \u2514\u2500 ...\n \u251c\u2500 package.json\n \u251c\u2500 tsconfig.json\n \u251c\u2500 tsconfig.prod.json\n \u251c\u2500 tsconfig.test.json\n \u2514\u2500 tslint.json"},{"question":"What are the main features of Reselect library?","answer":"Let's see the main features of Reselect library,\nSelectors can compute derived data, allowing Redux to store the minimal possible state.\nSelectors are efficient. A selector is not recomputed unless one of its arguments changes.\nSelectors are composable. They can be used as input to other selectors."},{"question":"Does the statics object work with ES6 classes in React?","answer":"No, statics only works with React.createClass():javascript\n someComponent = React.createClass({\n   statics: {\n     someMethod: function () {\n       \/\/ ..\n     },\n   },\n });But you can write statics inside ES6+ classes as below,```javascript\n class Component extends React.Component {\n   static propTypes = {\n     \/\/ ...\n   };static someMethod() {\n     \/\/ ...\n   }\n }\n ```or writing them outside class as below,```javascript\n class Component extends React.Component {\n    ....\n }Component.propTypes = {...}\n Component.someMethod = function(){....}\n ```"},{"question":"Can Redux only be used with React?","answer":"Redux can be used as a data store for any UI layer. The most common usage is with React and React Native, but there are bindings available for Angular, Angular 2, Vue, Mithril, and more. Redux simply provides a subscription mechanism which can be used by any other code."},{"question":"Do you need to have a particular build tool to use Redux?","answer":"Redux is originally written in ES6 and transpiled for production into ES5 with Webpack and Babel. You should be able to use it regardless of your JavaScript build process. Redux also offers a UMD build that can be used directly without any build process at all."},{"question":"How Redux Form initialValues get updated from state?","answer":"You need to add enableReinitialize : true setting.javascript\n const InitializeFromStateForm = reduxForm({\n   form: \"initializeFromState\",\n   enableReinitialize: true,\n })(UserEdit);If your initialValues prop gets updated, your form will update too."},{"question":"How React PropTypes allow different types for one prop?","answer":"You can use oneOfType() method of PropTypes.For example, the height property can be defined with either string or number type as below:javascript\n Component.propTypes = {\n   size: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n };"},{"question":"Can I import an SVG file as react component?","answer":"You can import SVG directly as component instead of loading it as a file. This feature is available with react-scripts@2.0.0 and higher.```jsx harmony\n import { ReactComponent as Logo } from \".\/logo.svg\";const App = () => (\n   \n     {\/ Logo is an actual react component \/}\n     \n\n );\n ```Note: Don't forget about the curly braces in the import."},{"question":"Why are inline ref callbacks or functions not recommended?","answer":"If the ref callback is defined as an inline function, it will get called twice during updates, first with null and then again with the DOM element. This is because a new instance of the function is created with each render, so React needs to clear the old ref and set up the new one.```jsx\n class UserForm extends Component {\n   handleSubmit = () => {\n     console.log(\"Input Value is: \", this.input.value);\n   };render() {\n     return (\n       \n (this.input = input)} \/> \/\/\n         Access DOM input in handle submit\n         Submit\n\n     );\n   }\n }\n ```But our expectation is for the ref callback to get called once, when the component mounts. One quick fix is to use the ES7 class property syntax to define the function```jsx\n class UserForm extends Component {\n   handleSubmit = () => {\n     console.log(\"Input Value is: \", this.input.value);\n   };setSearchInput = (input) => {\n     this.input = input;\n   };render() {\n     return (\n       \n \/\/ Access DOM input\n         in handle submit\n         Submit\n\n     );\n   }\n }\n ```Note: In React v16.3,"},{"question":"What is render hijacking in react?","answer":"The concept of render hijacking is the ability to control what a component will output from another component. It means that you decorate your component by wrapping it into a Higher-Order component. By wrapping, you can inject additional props or make other changes, which can cause changing logic of rendering. It does not actually enable hijacking, but by using HOC you make your component behave differently."},{"question":"What are HOC factory implementations?","answer":"There are two main ways of implementing HOCs in React.\nProps Proxy (PP) and\nInheritance Inversion (II).\nBut they follow different approaches for manipulating the WrappedComponent.Props ProxyIn this approach, the render method of the HOC returns a React Element of the type of the WrappedComponent. We also pass through the props that the HOC receives, hence the name Props Proxy.jsx\n function ppHOC(WrappedComponent) {\n   return class PP extends React.Component {\n     render() {\n       return <WrappedComponent {...this.props} \/>;\n     }\n   };\n }Inheritance InversionIn this approach, the returned HOC class (Enhancer) extends the WrappedComponent. It is called Inheritance Inversion because instead of the WrappedComponent extending some Enhancer class, it is passively extended by the Enhancer. In this way the relationship between them seems inverse.jsx\n function iiHOC(WrappedComponent) {\n   return class Enhancer extends WrappedComponent {\n     render() {\n       return super.render();\n     }\n   };\n }"},{"question":"How to pass numbers to React component?","answer":"You should be passing the numbers via curly braces({}) where as strings in quotesjsx\n React.render(\n   <User age={30} department={\"IT\"} \/>,\n   document.getElementById(\"container\")\n );"},{"question":"Do I need to keep all my state into Redux? Should I ever use react internal state?","answer":"It is up to the developer's decision, i.e., it is developer's job to determine what kinds of state make up your application, and where each piece of state should live. Some users prefer to keep every single piece of data in Redux, to maintain a fully serializable and controlled version of their application at all times. Others prefer to keep non-critical or UI state, such as \u201cis this dropdown currently open\u201d, inside a component's internal state.Below are the thumb rules to determine what kind of data should be put into Redux\nDo other parts of the application care about this data?\nDo you need to be able to create further derived data based on this original data?\nIs the same data being used to drive multiple components?\nIs there value to you in being able to restore this state to a given point in time (ie, time travel debugging)?\nDo you want to cache the data (i.e, use what's in state if it's already there instead of re-requesting it)?"},{"question":"What is the purpose of registerServiceWorker in React?","answer":"React creates a service worker for you without any configuration by default. The service worker is a web API that helps you cache your assets and other files so that when the user is offline or on a slow network, he\/she can still see results on the screen, as such, it helps you build a better user experience, that's what you should know about service worker for now. It's all about adding offline capabilities to your site.```jsx\n import React from \"react\";\n import ReactDOM from \"react-dom\";\n import App from \".\/App\";\n import registerServiceWorker from \".\/registerServiceWorker\";ReactDOM.render(, document.getElementById(\"root\"));\n registerServiceWorker();\n ```"},{"question":"What is React memo function?","answer":"Class components can be restricted from re-rendering when their input props are the same using PureComponent or shouldComponentUpdate. Now you can do the same with function components by wrapping them in React.memo.jsx\n const MyComponent = React.memo(function MyComponent(props) {\n   \/* only rerenders if props change *\/\n });"},{"question":"What is React lazy function?","answer":"The React.lazy function lets you render a dynamic import as a regular component. It will automatically load the bundle containing the OtherComponent when the component gets rendered. This must return a Promise which resolves to a module with a default export containing a React component.```jsx\n const OtherComponent = React.lazy(() => import(\".\/OtherComponent\"));function MyComponent() {\n   return (\n     \n\n\n   );\n }\n ```Note:\nReact.lazy and Suspense is not yet available for server-side rendering. If you want to do code-splitting in a server rendered app, we still recommend React Loadable."},{"question":"How to prevent unnecessary updates using setState?","answer":"You can compare the current value of the state with an existing state value and decide whether to rerender the page or not. If the values are the same then you need to return null to stop re-rendering otherwise return the latest state value.For example, the user profile information is conditionally rendered as follows,jsx\n getUserProfile = (user) => {\n   const latestAddress = user.address;\n   this.setState((state) => {\n     if (state.address === latestAddress) {\n       return null;\n     } else {\n       return { title: latestAddress };\n     }\n   });\n };"},{"question":"How do you render Array, Strings and Numbers in React 16 Version?","answer":"Arrays: Unlike older releases, you don't need to make sure render method return a single element in React16. You are able to return multiple sibling elements without a wrapping element by returning an array.For example, let us take the below list of developers,jsx\n const ReactJSDevs = () => {\n   return [\n     <li key=\"1\">John<\/li>,\n     <li key=\"2\">Jackie<\/li>,\n     <li key=\"3\">Jordan<\/li>,\n   ];\n };You can also merge this array of items in another array component.jsx\n const JSDevs = () => {\n   return (\n     <ul>\n       <li>Brad<\/li>\n       <li>Brodge<\/li>\n       <ReactJSDevs \/>\n       <li>Brandon<\/li>\n     <\/ul>\n   );\n };Strings and Numbers: You can also return string and number type from the render method.jsx\n render() {\n  return 'Welcome to ReactJS questions';\n }\n \/\/ Number\n render() {\n  return 2018;\n }"},{"question":"How to use class field declarations syntax in React classes?","answer":"React Class Components can be made much more concise using the class field declarations. You can initialize the local state without using the constructor and declare class methods by using arrow functions without the extra need to bind them.Let's take a counter example to demonstrate class field declarations for state without using constructor and methods without binding,```jsx\n class Counter extends Component {\n   state = { value: 0 };handleIncrement = () => {\n     this.setState((prevState) => ({\n       value: prevState.value + 1,\n     }));\n   };handleDecrement = () => {\n     this.setState((prevState) => ({\n       value: prevState.value - 1,\n     }));\n   };render() {\n     return (\n       \n         {this.state.value}     <button onClick={this.handleIncrement}>+<\/button>\n     <button onClick={this.handleDecrement}>-<\/button>\n   <\/div>\n );\n}\n }\n ```"},{"question":"What are hooks?","answer":"Hooks is a special JavaScript function that allows you use state and other React features without writing a class. This pattern has been introduced as a new feature in React 16.8 and helped to isolate the stateful logic from the components.Let's see an example of useState hook:```jsx\n import { useState } from \"react\";function Example() {\n   \/\/ Declare a new state variable, which we'll call \"count\"\n   const [count, setCount] = useState(0);return (\n     <>\n       You clicked {count} times\n setCount(count + 1)}>Click me\n\n   );\n }\n ```Note: Hooks can be used inside an existing function component without rewriting the component."},{"question":"What rules need to be followed for hooks?","answer":"You need to follow two rules in order to use hooks,\nCall Hooks only at the top level of your react functions: You shouldn\u2019t call Hooks inside loops, conditions, or nested functions. This will ensure that Hooks are called in the same order each time a component renders and it preserves the state of Hooks between multiple useState and useEffect calls.\nCall Hooks from React Functions only: You shouldn\u2019t call Hooks from regular JavaScript functions. Instead, you should call them from either function components or custom hooks.\nThe eslint plugin named eslint-plugin-react-hooks can be used to enforce these two rules."},{"question":"How to ensure hooks followed the rules in your project?","answer":"React team released an ESLint plugin called **eslint-plugin-react-hooks** that enforces these two rules. You can add this plugin to your project using the below command,\n ```javascript\n npm install eslint-plugin-react-hooks@next\n ```\n And apply the below config in your ESLint config file,\n ```javascript\n \/\/ Your ESLint configuration\n {\n   \"plugins\": [\n     \/\/ ...\n     \"react-hooks\"\n   ],\n   \"rules\": {\n     \/\/ ...\n     \"react-hooks\/rules-of-hooks\": \"error\"\n   }\n }\n ```\nFor example, the linter enforce proper naming convention for hooks. If you rename your custom hooks which as prefix \"use\" to something else then linter won't allow you to call built-in hooks such as useState, useEffect etc inside of your custom hook anymore.Note: This plugin is intended to use in Create React App by default."},{"question":"What are the differences between Flux and Redux?","answer":"Below are the major differences between Flux and Redux| Flux                                           | Redux                                      |\n | ---------------------------------------------- | ------------------------------------------ |\n | State is mutable                               | State is immutable                         |\n | The Store contains both state and change logic | The Store and change logic are separate    |\n | There are multiple stores exist                | There is only one store exist              |\n | All the stores are disconnected and flat       | Single store with hierarchical reducers    |\n | It has a singleton dispatcher                  | There is no concept of dispatcher          |\n | React components subscribe to the store        | Container components uses connect function |"},{"question":"What are the benefits of React Router V4?","answer":"Below are the main benefits of React Router V4 module,\nIn React Router v4(version 4), the API is completely about components. A router can be visualized as a single component(<BrowserRouter>) which wraps specific child router components(<Route>).\nYou don't need to manually set history. The router module will take care history by wrapping routes with <BrowserRouter> component.\nThe application size is reduced by adding only the specific router module(Web, core, or native)"},{"question":"Can you describe about componentDidCatch lifecycle method signature?","answer":"The componentDidCatch lifecycle method is invoked after an error has been thrown by a descendant component. The method receives two parameters,\nerror: - The error object which was thrown\ninfo: - An object with a componentStack key contains the information about which component threw the error.\nThe method structure would be as followsjavascript\n componentDidCatch(error, info);"},{"question":"In which scenarios error boundaries do not catch errors?","answer":"Below are the cases in which error boundaries doesn't work,\nInside Event handlers\nAsynchronous code using setTimeout or requestAnimationFrame callbacks\nDuring Server side rendering\nWhen errors thrown in the error boundary code itself"},{"question":"Why do you not need error boundaries for event handlers?","answer":"Error boundaries do not catch errors inside event handlers.React doesn\u2019t need error boundaries to recover from errors in event handlers. Unlike the render method and lifecycle methods, the event handlers don\u2019t happen during rendering. So if they throw, React still knows what to display on the screen.If you need to catch an error inside an event handler, use the regular JavaScript try \/ catch statement:```javascript\n class MyComponent extends React.Component {\n   constructor(props) {\n     super(props);\n     this.state = { error: null };\n     this.handleClick = this.handleClick.bind(this);\n   }handleClick() {\n     try {\n       \/\/ Do something that could throw\n     } catch (error) {\n       this.setState({ error });\n     }\n   }render() {\n     if (this.state.error) {\n       return Caught an error.;\n     }\n     return Click Me;\n   }\n }\n ```Note that the above example is demonstrating regular JavaScript behavior and doesn\u2019t use error boundaries."},{"question":"What is the difference between try catch block and error boundaries?","answer":"Try catch block works with imperative code whereas error boundaries are meant for declarative code to render on the screen.For example, the try catch block used for below imperative codejavascript\n try {\n   showButton();\n } catch (error) {\n   \/\/ ...\n }Whereas error boundaries wrap declarative code as below,javascript\n <ErrorBoundary>\n   <MyComponent \/>\n <\/ErrorBoundary>So if an error occurs in a componentDidUpdate method caused by a setState somewhere deep in the tree, it will still correctly propagate to the closest error boundary."},{"question":"What is the behavior of uncaught errors in react 16?","answer":"In React 16, errors that were not caught by any error boundary will result in unmounting of the whole React component tree. The reason behind this decision is that it is worse to leave corrupted UI in place than to completely remove it. For example, it is worse for a payments app to display a wrong amount than to render nothing."},{"question":"What is the proper placement for error boundaries?","answer":"The granularity of error boundaries usage is up to the developer based on project needs. You can follow either of these approaches,\n\nYou can wrap top-level route components to display a generic error message for the entire application.\nYou can also wrap individual components in an error boundary to protect them from crashing the rest of the application."},{"question":"What is the benefit of component stack trace from error boundary?","answer":"Apart from error messages and javascript stack, React16 will display the component stack trace with file names and line numbers using error boundary concept.For example, BuggyCounter component displays the component stack trace as below,"},{"question":"What is the required method to be defined for a class component?","answer":"The `render()` method is the only required method in a class component. i.e, All methods other than render method are optional for a class component."},{"question":"What are the possible return types of render method?","answer":"Below are the list of following types used and return from render method,\nReact elements: Elements that instruct React to render a DOM node. It includes html elements such as <div\/> and user defined elements.\nArrays and fragments: Return multiple elements to render as Arrays and Fragments to wrap multiple elements\nPortals: Render children into a different DOM subtree.\nString and numbers: Render both Strings and Numbers as text nodes in the DOM\nBooleans or null: Doesn't render anything but these types are used to conditionally render content."},{"question":"What is the main purpose of constructor?","answer":"The constructor is mainly used for two purposes,\nTo initialize local state by assigning object to this.state\nFor binding event handler methods to the instance\n    For example, the below code covers both the above cases,\njavascript\n constructor(props) {\n   super(props);\n   \/\/ Don't call this.setState() here!\n   this.state = { counter: 0 };\n   this.handleClick = this.handleClick.bind(this);\n }"},{"question":"Is it mandatory to define constructor for React component?","answer":"No, it is not mandatory. i.e, If you don\u2019t initialize state and you don\u2019t bind methods, you don\u2019t need to implement a constructor for your React component."},{"question":"What are default props?","answer":"The defaultProps can be defined as a property on the component to set the default values for the props. These default props are used when props not supplied(i.e., undefined props), but not for null props. That means, If you provide null value then it remains null value.For example, let us create color default prop for the button component,```javascript\n function MyButton {\n   \/\/ ...\n }MyButton.defaultProps = {\n   color: \"red\",\n };\n ```If props.color is not provided then it will set the default value to 'red'. i.e, Whenever you try to access the color prop it uses the default valuejavascript\n render() {\n    return <MyButton \/> ; \/\/ props.color will contain red value\n  }"},{"question":"Why should not call setState in componentWillUnmount?","answer":"You should not call `setState()` in `componentWillUnmount()` because once a component instance is unmounted, it will never be mounted again."},{"question":"What is the purpose of getDerivedStateFromError?","answer":"This lifecycle method is invoked after an error has been thrown by a descendant component. It receives the error that was thrown as a parameter and should return a value to update state.The signature of the lifecycle method is as follows,javascript\n static getDerivedStateFromError(error)Let us take error boundary use case with the above lifecycle method for demonstration purpose,```javascript\n class ErrorBoundary extends React.Component {\n   constructor(props) {\n     super(props);\n     this.state = { hasError: false };\n   }static getDerivedStateFromError(error) {\n     \/\/ Update state so the next render will show the fallback UI.\n     return { hasError: true };\n   }render() {\n     if (this.state.hasError) {\n       \/\/ You can render any custom fallback UI\n       return Something went wrong.;\n     } return this.props.children;\n}\n }\n ```"},{"question":"What is the methods order when component re-rendered?","answer":"An update can be caused by changes to props or state. The below methods are called in the following order when a component is being re-rendered.\nstatic getDerivedStateFromProps()\nshouldComponentUpdate()\nrender()\ngetSnapshotBeforeUpdate()\ncomponentDidUpdate()"},{"question":"What are the methods invoked during error handling?","answer":"Below methods are called when there is an error during rendering, in a lifecycle method, or in the constructor of any child component.\nstatic getDerivedStateFromError()\ncomponentDidCatch()"},{"question":"What is the purpose of displayName class property?","answer":"The displayName string is used in debugging messages. Usually, you don\u2019t need to set it explicitly because it\u2019s inferred from the name of the function or class that defines the component. You might want to set it explicitly if you want to display a different name for debugging purposes or when you create a higher-order component.For example, To ease debugging, choose a display name that communicates that it\u2019s the result of a withSubscription HOC.javascript\n function withSubscription(WrappedComponent) {\n   class WithSubscription extends React.Component {\n     \/* ... *\/\n   }\n   WithSubscription.displayName = `WithSubscription(${getDisplayName(\n     WrappedComponent\n   )})`;\n   return WithSubscription;\n }\n function getDisplayName(WrappedComponent) {\n   return (\n     WrappedComponent.displayName || WrappedComponent.name || \"Component\"\n   );\n }"},{"question":"What is the browser support for react applications?","answer":"React supports all popular browsers, including Internet Explorer 9 and above, although some polyfills are required for older browsers such as IE 9 and IE 10. If you use **es5-shim and es5-sham** polyfill then it even support old browsers that doesn't support ES5 methods."},{"question":"What is the purpose of unmountComponentAtNode method?","answer":"This method is available from react-dom package and it removes a mounted React component from the DOM and clean up its event handlers and state. If no component was mounted in the container, calling this function does nothing. Returns true if a component was unmounted and false if there was no component to unmount.The method signature would be as follows,javascript\n ReactDOM.unmountComponentAtNode(container);"},{"question":"What is code-splitting?","answer":"Code-Splitting is a feature supported by bundlers like Webpack and Browserify which can create multiple bundles that can be dynamically loaded at runtime. The react project supports code splitting via dynamic import() feature.For example, in the below code snippets, it will make moduleA.js and all its unique dependencies as a separate chunk that only loads after the user clicks the 'Load' button.\n moduleA.js```javascript\n const moduleA = \"Hello\";export { moduleA };\n ```App.js```javascript\n import React, { Component } from \"react\";class App extends Component {\n   handleClick = () => {\n     import(\".\/moduleA\")\n       .then(({ moduleA }) => {\n         \/\/ Use moduleA\n       })\n       .catch((err) => {\n         \/\/ Handle failure\n       });\n   };render() {\n     return (\n       \nLoad\n\n     );\n   }\n }export default App;\n ```"},{"question":"What is the benefit of strict mode?","answer":"The  will be helpful in the below cases\nIdentifying components with unsafe lifecycle methods.\nWarning about legacy string ref API usage.\nDetecting unexpected side effects.\nDetecting legacy context API.\nWarning about deprecated findDOMNode usage"},{"question":"What are Keyed Fragments?","answer":"The Fragments declared with the explicit  syntax may have keys. The general use case is mapping a collection to an array of fragments as below,javascript\n function Glossary(props) {\n   return (\n     <dl>\n       {props.items.map((item) => (\n         \/\/ Without the `key`, React will fire a key warning\n         <React.Fragment key={item.id}>\n           <dt>{item.term}<\/dt>\n           <dd>{item.description}<\/dd>\n         <\/React.Fragment>\n       ))}\n     <\/dl>\n   );\n }Note: key is the only attribute that can be passed to Fragment. In the future, there might be a support for additional attributes, such as event handlers."},{"question":"Does React support all HTML attributes?","answer":"As of React 16, both standard or custom DOM attributes are fully supported. Since React components often take both custom and DOM-related props, React uses the camelCase convention just like the DOM APIs.Let us take few props with respect to standard HTML attributes,javascript\n <div tabIndex=\"-1\" \/>      \/\/ Just like node.tabIndex DOM API\n <div className=\"Button\" \/> \/\/ Just like node.className DOM API\n <input readOnly={true} \/>  \/\/ Just like node.readOnly DOM APIThese props work similarly to the corresponding HTML attributes, with the exception of the special cases. It also support all SVG attributes."},{"question":"What are the limitations with HOCs?","answer":"Higher-order components come with a few caveats apart from its benefits. Below are the few listed in an order,\n\nDon\u2019t use HOCs inside the render method:\n    It is not recommended to apply a HOC to a component within the render method of a component.\njavascript\nrender() {\n  \/\/ A new version of EnhancedComponent is created on every render\n  \/\/ EnhancedComponent1 !== EnhancedComponent2\n  const EnhancedComponent = enhance(MyComponent);\n  \/\/ That causes the entire subtree to unmount\/remount each time!\n  return <EnhancedComponent \/>;\n}\nThe above code impacts on performance by remounting a component that causes the state of that component and all of its children to be lost. Instead, apply HOCs outside the component definition so that the resulting component is created only once.\n\n\nStatic methods must be copied over:\n    When you apply a HOC to a component the new component does not have any of the static methods of the original component\n```javascript\n\/\/ Define a static method\nWrappedComponent.staticMethod = function () {\n  \/...\/\n};\n\/\/ Now apply a HOC\nconst EnhancedComponent = enhance(WrappedComponent);\n\/\/ The enhanced component has no static method\ntypeof EnhancedComponent.staticMethod === \"undefined\"; \/\/ true\n```\nYou can overcome this by copying the methods onto the container before returning it,\njavascript\nfunction enhance(WrappedComponent) {\n  class Enhance extends React.Component {\n    \/*...*\/\n  }\n  \/\/ Must know exactly which method(s) to copy :(\n  Enhance.staticMethod = WrappedComponent.staticMethod;\n  return Enhance;\n}\n\n\nRefs aren\u2019t passed through:\n    For HOCs you need to pass through all props to the wrapped component but this does not work for refs. This is because ref is not really a prop similar to key. In this case you need to use the React.forwardRef API"},{"question":"How to debug forwardRefs in DevTools?","answer":"React.forwardRef accepts a render function as parameter and DevTools uses this function to determine what to display for the ref forwarding component.For example, If you don't name the render function or not using displayName property then it will appear as \u201dForwardRef\u201d in the DevTools,javascript\n const WrappedComponent = React.forwardRef((props, ref) => {\n   return <LogProps {...props} forwardedRef={ref} \/>;\n });But If you name the render function then it will appear as \u201dForwardRef(myFunction)\u201djavascript\n const WrappedComponent = React.forwardRef(function myFunction(props, ref) {\n   return <LogProps {...props} forwardedRef={ref} \/>;\n });As an alternative, You can also set displayName property for forwardRef function,```javascript\n function logProps(Component) {\n   class LogProps extends React.Component {\n     \/\/ ...\n   }function forwardRef(props, ref) {\n     return ;\n   }\/\/ Give this component a more helpful display name in DevTools.\n   \/\/ e.g. \"ForwardRef(logProps(MyComponent))\"\n   const name = Component.displayName || Component.name;\n   forwardRef.displayName = logProps(${name});return React.forwardRef(forwardRef);\n }\n ```"},{"question":"When component props defaults to true?","answer":"If you pass no value for a prop, it defaults to true. This behavior is available so that it matches the behavior of HTML.For example, below expressions are equivalent,```javascript\n \n ```Note: It is not recommended to use this approach because it can be confused with the ES6 object shorthand (example, {name} which is short for {name: name})"},{"question":"What is NextJS and major features of it?","answer":"Next.js is a popular and lightweight framework for static and server\u2011rendered applications built with React. It also provides styling and routing solutions. Below are the major features provided by NextJS,\nServer-rendered by default\nAutomatic code splitting for faster page loads\nSimple client-side routing (page based)\nWebpack-based dev environment which supports (HMR)\nAble to implement with Express or any other Node.js HTTP server\nCustomizable with your own Babel and Webpack configurations"},{"question":"How do you pass an event handler to a component?","answer":"You can pass event handlers and other functions as props to child components. It can be used in child component as below,html\n <button onClick=\"{this.handleClick}\"><\/button>"},{"question":"Is it good to use arrow functions in render methods?","answer":"Yes, You can use. It is often the easiest way to pass parameters to callback functions. But you need to optimize the performance while using it.javascript\n class Foo extends Component {\n   handleClick() {\n     console.log(\"Click happened\");\n   }\n   render() {\n     return <button onClick={() => this.handleClick()}>Click Me<\/button>;\n   }\n }Note: Using an arrow function in render method creates a new function each time the component renders, which may have performance implications"},{"question":"How to prevent a function from being called multiple times?","answer":"If you use an event handler such as onClick or onScroll and want to prevent the callback from being fired too quickly, then you can limit the rate at which callback is executed. This can be achieved in the below possible ways,\nThrottling: Changes based on a time based frequency. For example, it can be used using _.throttle lodash function\nDebouncing: Publish changes after a period of inactivity. For example, it can be used using _.debounce lodash function\nRequestAnimationFrame throttling: Changes based on requestAnimationFrame. For example, it can be used using raf-schd lodash function"},{"question":"How JSX prevents Injection Attacks?","answer":"React DOM escapes any values embedded in JSX before rendering them. Thus it ensures that you can never inject anything that\u2019s not explicitly written in your application. Everything is converted to a string before being rendered.For example, you can embed user input as below,javascript\n const name = response.potentiallyMaliciousInput;\n const element = <h1>{name}<\/h1>;This way you can prevent XSS(Cross-site-scripting) attacks in the application."},{"question":"How do you update rendered elements?","answer":"You can update UI(represented by rendered element) by passing the newly created element to ReactDOM's render method.For example, lets take a ticking clock example, where it updates the time by calling render method multiple times,```javascript\n function tick() {\n   const element = (\n     \nHello, world!\nIt is {new Date().toLocaleTimeString()}.\n\n   );\n   ReactDOM.render(element, document.getElementById(\"root\"));\n }setInterval(tick, 1000);\n ```"},{"question":"How do you say that props are readonly?","answer":"When you declare a component as a function or a class, it must never modify its own props.Let us take a below capital function,javascript\n function capital(amount, interest) {\n   return amount + interest;\n }The above function is called \u201cpure\u201d because it does not attempt to change their inputs, and always return the same result for the same inputs. Hence, React has a single rule saying \"All React components must act like pure functions with respect to their props.\""},{"question":"How do you say that state updates are merged?","answer":"When you call setState() in the component, React merges the object you provide into the current state.For example, let us take a facebook user with posts and comments details as state variables,javascript\n   constructor(props) {\n     super(props);\n     this.state = {\n       posts: [],\n       comments: []\n     };\n   }Now you can update them independently with separate setState() calls as below,```javascript\n  componentDidMount() {\n     fetchPosts().then(response => {\n       this.setState({\n         posts: response.posts\n       });\n     }); fetchComments().then(response => {\n   this.setState({\n     comments: response.comments\n   });\n });\n}\n ```As mentioned in the above code snippets, this.setState({comments}) updates only comments variable without modifying or replacing posts variable."},{"question":"How do you pass arguments to an event handler?","answer":"During iterations or loops, it is common to pass an extra parameter to an event handler. This can be achieved through arrow functions or bind method.Let us take an example of user details updated in a grid,javascript\n <button onClick={(e) => this.updateUser(userId, e)}>Update User details<\/button>\n <button onClick={this.updateUser.bind(this, userId)}>Update User details<\/button>In the both approaches, the synthetic argument e is passed as a second argument. You need to pass it explicitly for arrow functions and it will be passed automatically for bind method."},{"question":"How to prevent component from rendering?","answer":"You can prevent component from rendering by returning null based on specific condition. This way it can conditionally render component.```javascript\n function Greeting(props) {\n   if (!props.loggedIn) {\n     return null;\n   }return welcome, {props.name};\n }\n ``````javascript\n class User extends React.Component {\n   constructor(props) {\n     super(props);\n     this.state = {loggedIn: false, name: 'John'};\n   }render() {\n    return (\n        \n          \/\/Prevent component render if it is not loggedIn\n          \n\n\n    );\n   }\n ```In the above example, the greeting component skips its rendering section by applying condition and returning null value."},{"question":"What are the conditions to safely use the index as a key?","answer":"There are three conditions to make sure, it is safe use the index as a key.\nThe list and items are static\u2013 they are not computed and do not change\nThe items in the list have no ids\nThe list is never reordered or filtered."},{"question":"Should keys be globally unique?","answer":"The keys used within arrays should be unique among their siblings but they don\u2019t need to be globally unique. i.e, You can use the same keys with two different arrays.For example, the below Book component uses two arrays with different arrays,javascript\n function Book(props) {\n   const index = (\n     <ul>\n       {props.pages.map((page) => (\n         <li key={page.id}>{page.title}<\/li>\n       ))}\n     <\/ul>\n   );\n   const content = props.pages.map((page) => (\n     <div key={page.id}>\n       <h3>{page.title}<\/h3>\n       <p>{page.content}<\/p>\n       <p>{page.pageNumber}<\/p>\n     <\/div>\n   ));\n   return (\n     <div>\n       {index}\n       <hr \/>\n       {content}\n     <\/div>\n   );\n }"},{"question":"What is the popular choice for form handling?","answer":"Formik is a form library for react which provides solutions such as validation, keeping track of the visited fields, and handling form submission.In detail, You can categorize them as follows,\nGetting values in and out of form state\nValidation and error messages\nHandling form submission\nIt is used to create a scalable, performant, form helper with a minimal API to solve annoying stuff."},{"question":"What are the advantages of formik over redux form library?","answer":"Below are the main reasons to recommend formik over redux form library,\nThe form state is inherently short-term and local, so tracking it in Redux (or any kind of Flux library) is unnecessary.\nRedux-Form calls your entire top-level Redux reducer multiple times ON EVERY SINGLE KEYSTROKE. This way it increases input latency for large apps.\nRedux-Form is 22.5 kB minified gzipped whereas Formik is 12.7 kB"},{"question":"Why are you not required to use inheritance?","answer":"In React, it is recommended to use composition over inheritance to reuse code between components. Both Props and composition give you all the flexibility you need to customize a component\u2019s look and behavior explicitly and safely.\n Whereas, If you want to reuse non-UI functionality between components, it is suggested to extract it into a separate JavaScript module. Later components import it and use that function, object, or class, without extending it."},{"question":"Can I use web components in react application?","answer":"Yes, you can use web components in a react application. Even though many developers won't use this combination, it may require especially if you are using third-party UI components that are written using Web Components.For example, let us use Vaadin date picker web component as below,javascript\n import React, { Component } from \"react\";\n import \".\/App.css\";\n import \"@vaadin\/vaadin-date-picker\";\n class App extends Component {\n   render() {\n     return (\n       <div className=\"App\">\n         <vaadin-date-picker label=\"When were you born?\"><\/vaadin-date-picker>\n       <\/div>\n     );\n   }\n }\n export default App;"},{"question":"What is dynamic import?","answer":"You can achieve code-splitting in your app using dynamic import.Let's take an example of addition,\nNormal Import\njavascript\n import { add } from \".\/math\";\n console.log(add(10, 20));\nDynamic Import\njavascript\n import(\".\/math\").then((math) => {\n   console.log(math.add(10, 20));\n });"},{"question":"What are loadable components?","answer":"If you want to do code-splitting in a server rendered app, it is recommend to use Loadable Components because React.lazy and Suspense is not yet available for server-side rendering. Loadable lets you render a dynamic import as a regular component.Lets take an example,```javascript\n import loadable from \"@loadable\/component\";const OtherComponent = loadable(() => import(\".\/OtherComponent\"));function MyComponent() {\n   return (\n     \n\n\n   );\n }\n ```Now OtherComponent will be loaded in a separated bundle"},{"question":"What is suspense component?","answer":"If the module containing the dynamic import is not yet loaded by the time parent component renders, you must show some fallback content while you\u2019re waiting for it to load using a loading indicator. This can be done using Suspense component.For example, the below code uses suspense component,```javascript\n const OtherComponent = React.lazy(() => import(\".\/OtherComponent\"));function MyComponent() {\n   return (\n     \nLoading...\\}>\n         \n\n\n   );\n }\n ```As mentioned in the above code, Suspense is wrapped above the lazy component."},{"question":"What is route based code splitting?","answer":"One of the best place to do code splitting is with routes. The entire page is going to re-render at once so users are unlikely to interact with other elements in the page at the same time. Due to this, the user experience won't be disturbed.Let us take an example of route based website using libraries like React Router with React.lazy,```javascript\n import { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n import React, { Suspense, lazy } from \"react\";const Home = lazy(() => import(\".\/routes\/Home\"));\n const About = lazy(() => import(\".\/routes\/About\"));const App = () => (\n   \nLoading...\\}>\n       \n\n\n\n\n\n );\n ```In the above code, the code splitting will happen at each route level."},{"question":"Give an example on How to use context?","answer":"Context is designed to share data that can be considered global for a tree of React components.For example, in the code below lets manually thread through a \u201ctheme\u201d prop in order to style the Button component.javascript\n \/\/Lets create a context with a default theme value \"luna\"\n const ThemeContext = React.createContext(\"luna\");\n \/\/ Create App component where it uses provider to pass theme value in the tree\n class App extends React.Component {\n   render() {\n     return (\n       <ThemeContext.Provider value=\"nova\">\n         <Toolbar \/>\n       <\/ThemeContext.Provider>\n     );\n   }\n }\n \/\/ A middle component where you don't need to pass theme prop anymore\n function Toolbar(props) {\n   return (\n     <div>\n       <ThemedButton \/>\n     <\/div>\n   );\n }\n \/\/ Lets read theme value in the button component to use\n class ThemedButton extends React.Component {\n   static contextType = ThemeContext;\n   render() {\n     return <Button theme={this.context} \/>;\n   }\n }"},{"question":"What is the purpose of default value in context?","answer":"The defaultValue argument is only used when a component does not have a matching Provider above it in the tree. This can be helpful for testing components in isolation without wrapping them.Below code snippet provides default theme value as Luna.javascript\n const MyContext = React.createContext(defaultValue);"},{"question":"How do you use contextType?","answer":"ContextType is used to consume the context object. The contextType property can be used in two ways,\n\ncontextType as property of class:\n    The contextType property on a class can be assigned a Context object created by React.createContext(). After that, you can consume the nearest current value of that Context type using this.context in any of the lifecycle methods and render function.\nLets assign contextType property on MyClass as below,\njavascript\nclass MyClass extends React.Component {\n  componentDidMount() {\n    let value = this.context;\n    \/* perform a side-effect at mount using the value of MyContext *\/\n  }\n  componentDidUpdate() {\n    let value = this.context;\n    \/* ... *\/\n  }\n  componentWillUnmount() {\n    let value = this.context;\n    \/* ... *\/\n  }\n  render() {\n    let value = this.context;\n    \/* render something based on the value of MyContext *\/\n  }\n}\nMyClass.contextType = MyContext;\n\n\nStatic field\n    You can use a static class field to initialize your contextType using public class field syntax.\njavascript\nclass MyClass extends React.Component {\n  static contextType = MyContext;\n  render() {\n    let value = this.context;\n    \/* render something based on the value *\/\n  }\n}"},{"question":"What is a consumer?","answer":"A Consumer is a React component that subscribes to context changes. It requires a function as a child which receives current context value as argument and returns a react node. The value argument passed to the function will be equal to the value prop of the closest Provider for this context above in the tree.Lets take a simple example,javascript\n <MyContext.Consumer>\n   {value => \/* render something based on the context value *\/}\n <\/MyContext.Consumer>"},{"question":"How do you solve performance corner cases while using context?","answer":"The context uses reference identity to determine when to re-render, there are some gotchas that could trigger unintentional renders in consumers when a provider\u2019s parent re-renders.For example, the code below will re-render all consumers every time the Provider re-renders because a new object is always created for value.javascript\n class App extends React.Component {\n   render() {\n     return (\n       <Provider value={{ something: \"something\" }}>\n         <Toolbar \/>\n       <\/Provider>\n     );\n   }\n }This can be solved by lifting up the value to parent state,```javascript\n class App extends React.Component {\n   constructor(props) {\n     super(props);\n     this.state = {\n       value: { something: \"something\" },\n     };\n   }render() {\n     return (\n       \n\n\n     );\n   }\n }\n ```"},{"question":"What is the purpose of forward ref in HOCs?","answer":"Refs will not get passed through because ref is not a prop. It is handled differently by React just like key. If you add a ref to a HOC, the ref will refer to the outermost container component, not the wrapped component. In this case, you can use Forward Ref API. For example, we can explicitly forward refs to the inner FancyButton component using the React.forwardRef API.The below HOC logs all props,```javascript\n function logProps(Component) {\n   class LogProps extends React.Component {\n     componentDidUpdate(prevProps) {\n       console.log(\"old props:\", prevProps);\n       console.log(\"new props:\", this.props);\n     } render() {\n   const { forwardedRef, ...rest } = this.props;\n\n   \/\/ Assign the custom prop \"forwardedRef\" as a ref\n   return <Component ref={forwardedRef} {...rest} \/>;\n }\n}return React.forwardRef((props, ref) => {\n     return ;\n   });\n }\n ```Let's use this HOC to log all props that get passed to our \u201cfancy button\u201d component,```javascript\n class FancyButton extends React.Component {\n   focus() {\n     \/\/ ...\n   }\/\/ ...\n }\n export default logProps(FancyButton);\n ```Now let's create a ref and pass it to FancyButton component. In this case, you can set focus to button element.```javascript\n import FancyButton from \".\/FancyButton\";const ref = React.createRef();\n ref.current.focus();\n ;\n ```"},{"question":"Is ref argument available for all functions or class components?","answer":"Regular function or class components don\u2019t receive the ref argument, and ref is not available in props either. The second ref argument only exists when you define a component with React.forwardRef call."},{"question":"Why do you need additional care for component libraries while using forward refs?","answer":"When you start using forwardRef in a component library, you should treat it as a breaking change and release a new major version of your library. This is because your library likely has a different behavior such as what refs get assigned to, and what types are exported. These changes can break apps and other libraries that depend on the old behavior."},{"question":"How to create react class components without ES6?","answer":"If you don\u2019t use ES6 then you may need to use the create-react-class module instead. For default props, you need to define getDefaultProps() as a function on the passed object. Whereas for initial state, you have to provide a separate getInitialState method that returns the initial state.javascript\n var Greeting = createReactClass({\n   getDefaultProps: function () {\n     return {\n       name: \"Jhohn\",\n     };\n   },\n   getInitialState: function () {\n     return { message: this.props.message };\n   },\n   handleClick: function () {\n     console.log(this.state.message);\n   },\n   render: function () {\n     return <h1>Hello, {this.props.name}<\/h1>;\n   },\n });Note: If you use createReactClass then auto binding is available for all methods. i.e, You don't need to use .bind(this) with in constructor for event handlers."},{"question":"Is it possible to use react without JSX?","answer":"Yes, JSX is not mandatory for using React. Actually it is convenient when you don\u2019t want to set up compilation in your build environment. Each JSX element is just syntactic sugar for calling React.createElement(component, props, ...children).For example, let us take a greeting example with JSX,```javascript\n class Greeting extends React.Component {\n   render() {\n     return Hello {this.props.message};\n   }\n }ReactDOM.render(\n   ,\n   document.getElementById(\"root\")\n );\n ```You can write the same code without JSX as below,``javascript\n class Greeting extends React.Component {\n   render() {\n     return React.createElement(\"div\", null,Hello ${this.props.message}`);\n   }\n }ReactDOM.render(\n   React.createElement(Greeting, { message: \"World\" }, null),\n   document.getElementById(\"root\")\n );\n ```"},{"question":"What is diffing algorithm?","answer":"React needs to use algorithms to find out how to efficiently update the UI to match the most recent tree. The diffing algorithms is generating the minimum number of operations to transform one tree into another. However, the algorithms have a complexity in the order of O(n\u00b3) where n is the number of elements in the tree.In this case, displaying 1000 elements would require in the order of one billion comparisons. This is far too expensive. Instead, React implements a heuristic O(n) algorithm based on two assumptions:\nTwo elements of different types will produce different trees.\nThe developer can hint at which child elements may be stable across different renders with a key prop."},{"question":"What are the rules covered by diffing algorithm?","answer":"When diffing two trees, React first compares the two root elements. The behavior is different depending on the types of the root elements. It covers the below rules during reconciliation algorithm,\nElements Of Different Types:\n    Whenever the root elements have different types, React will tear down the old tree and build the new tree from scratch. For example, elements  to , or from  to  of different types lead a full rebuild.\n\nDOM Elements Of The Same Type:\n    When comparing two React DOM elements of the same type, React looks at the attributes of both, keeps the same underlying DOM node, and only updates the changed attributes. Lets take an example with same DOM elements except className attribute,\n```javascript\n\n\n```\n\n\nComponent Elements Of The Same Type:\n    When a component updates, the instance stays the same, so that state is maintained across renders. React updates the props of the underlying component instance to match the new element, and calls componentWillReceiveProps() and componentWillUpdate() on the underlying instance. After that, the render() method is called and the diff algorithm recurses on the previous result and the new result.\n\n\nRecursing On Children:\n    when recursing on the children of a DOM node, React just iterates over both lists of children at the same time and generates a mutation whenever there\u2019s a difference. For example, when adding an element at the end of the children, converting between these two trees works well.\n```javascript\n\nfirst\nsecond\n\n\nfirst\nsecond\nthird\n\n```\n\n\nHandling keys:\n    React supports a key attribute. When children have keys, React uses the key to match children in the original tree with children in the subsequent tree. For example, adding a key can make the tree conversion efficient,\n\n```javascript\n \nDuke\nVillanova\n\nConnecticut\nDuke\nVillanova\n\n ```"},{"question":"When do you need to use refs?","answer":"There are few use cases to go for refs,\nManaging focus, text selection, or media playback.\nTriggering imperative animations.\nIntegrating with third-party DOM libraries."},{"question":"Must prop be named as render for render props?","answer":"Even though the pattern named render props, you don\u2019t have to use a prop named render to use this pattern. i.e, Any prop that is a function that a component uses to know what to render is technically a \u201crender prop\u201d. Lets take an example with the children prop for render props,javascript\n <Mouse\n   children={(mouse) => (\n     <p>\n       The mouse position is {mouse.x}, {mouse.y}\n     <\/p>\n   )}\n \/>Actually children prop doesn\u2019t need to be named in the list of \u201cattributes\u201d in JSX element. Instead, you can keep it directly inside element,javascript\n <Mouse>\n   {(mouse) => (\n     <p>\n       The mouse position is {mouse.x}, {mouse.y}\n     <\/p>\n   )}\n <\/Mouse>While using this above technique(without any name), explicitly state that children should be a function in your propTypes.javascript\n Mouse.propTypes = {\n   children: PropTypes.func.isRequired,\n };"},{"question":"What are the problems of using render props with pure components?","answer":"If you create a function inside a render method, it negates the purpose of pure component. Because the shallow prop comparison will always return false for new props, and each render in this case will generate a new value for the render prop. You can solve this issue by defining the render function as instance method."},{"question":"How do you create HOC using render props?","answer":"You can implement most higher-order components (HOC) using a regular component with a render prop. For example, if you would prefer to have a withMouse HOC instead of a  component, you could easily create one using a regular  with a render prop.javascript\n function withMouse(Component) {\n   return class extends React.Component {\n     render() {\n       return (\n         <Mouse\n           render={(mouse) => <Component {...this.props} mouse={mouse} \/>}\n         \/>\n       );\n     }\n   };\n }This way render props gives the flexibility of using either pattern."},{"question":"What is windowing technique?","answer":"Windowing is a technique that only renders a small subset of your rows at any given time, and can dramatically reduce the time it takes to re-render the components as well as the number of DOM nodes created. If your application renders long lists of data then this technique is recommended. Both react-window and react-virtualized are popular windowing libraries which provides several reusable components for displaying lists, grids, and tabular data."},{"question":"How do you print falsy values in JSX?","answer":"The falsy values such as false, null, undefined, and true are valid children but they don't render anything. If you still want to display them then you need to convert it to string. Let's take an example on how to convert to a string,javascript\n <div>My JavaScript variable is {String(myVariable)}.<\/div>"},{"question":"What is the typical use case of portals?","answer":"React portals are very useful when a parent component has overflow: hidden or has properties that affect the stacking context (e.g. z-index, position, opacity) and you need to visually \u201cbreak out\u201d of its container.For example, dialogs, global message notifications, hovercards, and tooltips."},{"question":"How do you set default value for uncontrolled component?","answer":"In React, the value attribute on form elements will override the value in the DOM. With an uncontrolled component, you might want React to specify the initial value, but leave subsequent updates uncontrolled. To handle this case, you can specify a defaultValue attribute instead of value.javascript\n render() {\n   return (\n     <form onSubmit={this.handleSubmit}>\n       <label>\n         User Name:\n         <input\n           defaultValue=\"John\"\n           type=\"text\"\n           ref={this.input} \/>\n       <\/label>\n       <input type=\"submit\" value=\"Submit\" \/>\n     <\/form>\n   );\n }The same applies for select and textArea inputs. But you need to use defaultChecked for checkbox and radio inputs."},{"question":"What is your favorite React stack?","answer":"Even though the tech stack varies from developer to developer, the most popular stack is used in react boilerplate project code. It mainly uses Redux and redux-saga for state management and asynchronous side-effects, react-router for routing purpose, styled-components for styling react components, axios for invoking REST api, and other supported stack such as webpack, reselect, ESNext, Babel.\n You can clone the project https:\/\/github.com\/react-boilerplate\/react-boilerplate and start working on any new react project."},{"question":"What is the difference between Real DOM and Virtual DOM?","answer":"Below are the main differences between Real DOM and Virtual DOM,| Real DOM                             | Virtual DOM                          |\n | ------------------------------------ | ------------------------------------ |\n | Updates are slow                     | Updates are fast                     |\n | DOM manipulation is very expensive.  | DOM manipulation is very easy        |\n | You can update HTML directly.        | You Can\u2019t directly update HTML       |\n | It causes too much of memory wastage | There is no memory wastage           |\n | Creates a new DOM if element updates | It updates the JSX if element update |"},{"question":"How to add Bootstrap to a react application?","answer":"Bootstrap can be added to your React app in a three possible ways,\nUsing the Bootstrap CDN:\n    This is the easiest way to add bootstrap. Add both bootstrap CSS and JS resources in a head tag.\nBootstrap as Dependency:\n    If you are using a build tool or a module bundler such as Webpack, then this is the preferred option for adding Bootstrap to your React application\n    javascript\n    npm install bootstrap\nReact Bootstrap Package:\n    In this case, you can add Bootstrap to our React app is by using a package that has rebuilt Bootstrap components to work particularly as React components. Below packages are popular in this category,\nreact-bootstrap\nreactstrap"},{"question":"Can you list down top websites or applications using react as front end framework?","answer":"Below are the top 10 websites using React as their front-end framework,\nFacebook\nUber\nInstagram\nWhatsApp\nKhan Academy\nAirbnb\nDropbox\nFlipboard\nNetflix\nPayPal"},{"question":"Is it recommended to use CSS In JS technique in React?","answer":"React does not have any opinion about how styles are defined but if you are a beginner then good starting point is to define your styles in a separate \\*.css file as usual and refer to them using className. This functionality is not part of React but came from third-party libraries. But If you want to try a different approach(CSS-In-JS) then styled-components library is a good option."},{"question":"Do I need to rewrite all my class components with hooks?","answer":"No. But you can try Hooks in a few components(or new components) without rewriting any existing code. Because there are no plans to remove classes in ReactJS."},{"question":"How to fetch data with React Hooks?","answer":"The effect hook called useEffect can be used to fetch data from an API and to set the data in the local state of the component with the useState hook\u2019s update function.Here is an example of fetching a list of react articles from an API using fetch.```javascript\n import React from \"react\";function App() {\n   const [data, setData] = React.useState({ hits: [] });React.useEffect(() => {\n    fetch(\"http:\/\/hn.algolia.com\/api\/v1\/search?query=react\")\n    .then(response => response.json())\n    .then(data => setData(data))\n   }, []);return (\n     \n       {data.hits.map((item) => (\n         \n{item.title}\n\n       ))}\n     \n   );\n }export default App;\n ```A popular way to simplify this is by using the library axios.We provided an empty array as second argument to the useEffect hook to avoid activating it on component updates. This way, it only fetches on component mount."},{"question":"Is Hooks cover all use cases for classes?","answer":"Hooks doesn't cover all use cases of classes but there is a plan to add them soon. Currently there are no Hook equivalents to the uncommon **getSnapshotBeforeUpdate** and **componentDidCatch** lifecycles yet."},{"question":"What is the stable release for hooks support?","answer":"React includes a stable implementation of React Hooks in 16.8 release for below packages\nReact DOM\nReact DOM Server\nReact Test Renderer\nReact Shallow Renderer"},{"question":"Why do we use array destructuring (square brackets notation) in useState?","answer":"When we declare a state variable with useState, it returns a pair \u2014 an array with two items. The first item is the current value, and the second is a function that updates the value. Using [0] and [1] to access them is a bit confusing because they have a specific meaning. This is why we use array destructuring instead.For example, the array index access would look as follows:javascript\n var userStateVariable = useState(\"userProfile\"); \/\/ Returns an array pair\n var user = userStateVariable[0]; \/\/ Access first item\n var setUser = userStateVariable[1]; \/\/ Access second itemWhereas with array destructuring the variables can be accessed as follows:javascript\n const [user, setUser] = useState(\"userProfile\");"},{"question":"What are the sources used for introducing hooks?","answer":"Hooks got the ideas from several different sources. Below are some of them,\nPrevious experiments with functional APIs in the react-future repository\nCommunity experiments with render prop APIs such as Reactions Component\nState variables and state cells in DisplayScript.\nSubscriptions in Rx.\nReducer components in ReasonReact."},{"question":"How do you access imperative API of web components?","answer":"Web Components often expose an imperative API to implement its functions. You will need to use a **ref** to interact with the DOM node directly if you want to access imperative API of a web component. But if you are using third-party Web Components, the best solution is to write a React component that behaves as a **wrapper** for your Web Component."},{"question":"What is formik?","answer":"Formik is a small react form library that helps you with the three major problems,\nGetting values in and out of form state\nValidation and error messages\nHandling form submission"},{"question":"What are typical middleware choices for handling asynchronous calls in Redux?","answer":"Some of the popular middleware choices for handling asynchronous calls in Redux eco system are `Redux Thunk, Redux Promise, Redux Saga`."},{"question":"Do browsers understand JSX code?","answer":"No, browsers can't understand JSX code. You need a transpiler to convert your JSX to regular Javascript that browsers can understand. The most widely used transpiler right now is Babel."},{"question":"Describe about data flow in react?","answer":"React implements one-way reactive data flow using props which reduce boilerplate and is easier to understand than traditional two-way data binding."},{"question":"What is react scripts?","answer":"The `react-scripts` package is a set of scripts from the create-react-app starter pack which helps you kick off projects without configuring. The `react-scripts start` command sets up the development environment and starts a server, as well as hot module reloading."},{"question":"What are the features of create react app?","answer":"Below are the list of some of the features provided by create react app.\nReact, JSX, ES6, Typescript and Flow syntax support.\nAutoprefixed CSS\nCSS Reset\/Normalize\nA live development server\nA fast interactive unit test runner with built-in support for coverage reporting\nA build script to bundle JS, CSS, and images for production, with hashes and sourcemaps\nAn offline-first service worker and a web app manifest, meeting all the Progressive Web App criteria."},{"question":"What is the purpose of renderToNodeStream method?","answer":"The `ReactDOMServer#renderToNodeStream` method is used to generate HTML on the server and send the markup down on the initial request for faster page loads. It also helps search engines to crawl your pages easily for SEO purposes.\n **Note:** Remember this method is not available in the browser but only server."},{"question":"What is MobX?","answer":"MobX is a simple, scalable and battle tested state management solution for applying functional reactive programming (TFRP). For reactJs application, you need to install below packages,\n ```bash\n npm install mobx --save\n npm install mobx-react --save\n ```"},{"question":"What are the differences between Redux and MobX?","answer":"Below are the main differences between Redux and MobX,| Topic         | Redux                                                         | MobX                                                                   |\n | ------------- | ------------------------------------------------------------- | ---------------------------------------------------------------------- |\n | Definition    | It is a javascript library for managing the application state | It is a library for reactively managing the state of your applications |\n | Programming   | It is mainly written in ES6                                   | It is written in JavaScript(ES5)                                       |\n | Data Store    | There is only one large store exist for data storage          | There is more than one store for storage                               |\n | Usage         | Mainly used for large and complex applications                | Used for simple applications                                           |\n | Performance   | Need to be improved                                           | Provides better performance                                            |\n | How it stores | Uses JS Object to store                                       | Uses observable to store the data                                      |"},{"question":"Should I learn ES6 before learning ReactJS?","answer":"No, you don\u2019t have to learn es2015\/es6 to learn react. But you may find many resources or React ecosystem uses ES6 extensively. Let's see some of the frequently used ES6 features,\n\nDestructuring: To get props and use them in a component\n```javascript\n\/\/ in es 5\nvar someData = this.props.someData;\nvar dispatch = this.props.dispatch;\n\/\/ in es6\nconst { someData, dispatch } = this.props;\n```\n\n\nSpread operator: Helps in passing props down into a component\n```javascript\n\/\/ in es 5\n\n\/\/ in es6\n\n```\n\n\nArrow functions: Makes compact syntax\n    javascript\n    \/\/ es 5\n    var users = usersList.map(function (user) {\n      return <li>{user.name}<\/li>;\n    });\n    \/\/ es 6\n    const users = usersList.map((user) => <li>{user.name}<\/li>);"},{"question":"What is Concurrent Rendering?","answer":"The Concurrent rendering makes React apps to be more responsive by rendering component trees without blocking the main UI thread. It allows React to interrupt a long-running render to handle a high-priority event. i.e, When you enabled concurrent Mode, React will keep an eye on other tasks that need to be done, and if there's something with a higher priority it will pause what it is currently rendering and let the other task finish first. You can enable this in two ways,```javascript\n \/\/ 1. Part of an app by wrapping with ConcurrentMode\n \n\n;\/\/ 2. Whole app using createRoot\n ReactDOM.unstable_createRoot(domNode).render();\n ```"},{"question":"What is the difference between async mode and concurrent mode?","answer":"Both refers the same thing. Previously concurrent Mode being referred to as \"Async Mode\" by React team. The name has been changed to highlight React\u2019s ability to perform work on different priority levels. So it avoids the confusion from other approaches to Async Rendering."},{"question":"Can I use javascript urls in react16.9?","answer":"Yes, you can use javascript: URLs but it will log a warning in the console. Because URLs starting with javascript: are dangerous by including unsanitized output in a tag like <a href> and create a security hole.javascript\n const companyProfile = {\n   website: \"javascript: alert('Your website is hacked')\",\n };\n \/\/ It will log a warning\n <a href={companyProfile.website}>More details<\/a>;Remember that the future versions will throw an error for javascript URLs."},{"question":"What is the purpose of eslint plugin for hooks?","answer":"The ESLint plugin enforces rules of Hooks to avoid bugs. It assumes that any function starting with \u201duse\u201d and a capital letter right after it is a Hook. In particular, the rule enforces that,\nCalls to Hooks are either inside a PascalCase function (assumed to be a component) or another useSomething function (assumed to be a custom Hook).\nHooks are called in the same order on every render."},{"question":"What is the difference between Imperative and Declarative in React?","answer":"Imagine a simple UI component, such as a \"Like\" button. When you tap it, it turns blue if it was previously grey, and grey if it was previously blue.The imperative way of doing this would be:javascript\n if (user.likes()) {\n   if (hasBlue()) {\n     removeBlue();\n     addGrey();\n   } else {\n     removeGrey();\n     addBlue();\n   }\n }Basically, you have to check what is currently on the screen and handle all the changes necessary to redraw it with the current state, including undoing the changes from the previous state. You can imagine how complex this could be in a real-world scenario.In contrast, the declarative approach would be:javascript\n if (this.state.liked) {\n   return <blueLike \/>;\n } else {\n   return <greyLike \/>;\n }Because the declarative approach separates concerns, this part of it only needs to handle how the UI should look in a sepecific state, and is therefore much simpler to understand."},{"question":"What are the benefits of using typescript with reactjs?","answer":"Below are some of the benefits of using typescript with Reactjs,\nIt is possible to use latest JavaScript features\nUse of interfaces for complex type definitions\nIDEs such as VS Code was made for TypeScript\nAvoid bugs with the ease of readability and Validation"},{"question":"How do you make sure that user remains authenticated on page refresh while using Context API State Management?","answer":"When a user logs in and reload, to persist the state generally we add the load user action in the useEffect hooks in the main App.js. While using Redux, loadUser action can be easily accessed."},{"question":"What are the benefits of new JSX transform?","answer":"There are three major benefits of new JSX transform,\nIt is possible to use JSX without importing React packages\nThe compiled output might improve the bundle size in a small amount\nThe future improvements provides the flexibility to reduce the number of concepts to learn React."},{"question":"How is the new JSX transform different from old transform??","answer":"The new JSX transform doesn\u2019t require React to be in scope. i.e, You don't need to import React package for simple scenarios.Let's take an example to look at the main differences between the old and the new transform,Old Transform:```js\n import React from \"react\";function App() {\n   return Good morning!!;\n }\n ```Now JSX transform convert the above code into regular JavaScript as below,```js\n import React from \"react\";function App() {\n   return React.createElement(\"h1\", null, \"Good morning!!\");\n }\n ```New Transform:The new JSX transform doesn't require any React importsjs\n function App() {\n   return <h1>Good morning!!<\/h1>;\n }Under the hood JSX transform compiles to below code```js\n import { jsx as _jsx } from \"react\/jsx-runtime\";function App() {\n   return _jsx(\"h1\", { children: \"Good morning!!\" });\n }\n ```Note: You still need to import React to use Hooks."},{"question":"How do you get redux scaffolding using create-react-app?","answer":"Redux team has provided official redux+js or redux+typescript templates for create-react-app project. The generated project setup includes,\n\nRedux Toolkit and React-Redux dependencies\nCreate and configure Redux store\nReact-Redux <Provider> passing the store to React components\nSmall \"counter\" example to demo how to add redux logic and React-Redux hooks API to interact with the store from components\n    The below commands need to be executed along with template option as below,\nJavascript template:\njs\n npx create-react-app my-app --template redux\nTypescript template:\njs\n npx create-react-app my-app --template redux-typescript"},{"question":"What are React Server components?","answer":"React Server Component is a way to write React component that gets rendered in the server-side with the purpose of improving React app performance. These components allow us to load components from the backend.Note: React Server Components is still under development and not recommended for production yet."},{"question":"What is prop drilling?","answer":"Prop Drilling is the process by which you pass data from one component of the React Component tree to another by going through other components that do not need the data but only help in passing it around."},{"question":"What is state mutation and how to prevent it?","answer":"State mutation happens when you try to update the state of a component without actually using setState function. This can happen when you are trying to do some computations using a state variable and unknowingly save the result in the same state variable. This is the main reason why it is advised to return new instances of state variables from the reducers by using Object.assign({}, ...) or spread syntax.This can cause unknown issues in the UI as the value of the state variable got updated without telling React to check what all components were being affected from this update and it can cause UI bugs.Ex:```javascript\n class A extends React.component {\n   constructor(props) {\n     super(props);\n     this.state = {\n       loading: false\n     }\n  }componentDidMount() {\n   let { loading } = this.state;\n   loading = (() => true)(); \/\/ Trying to perform an operation and directly saving in a state variable\n }```How to prevent it: Make sure your state variables are immutable by either enforcing immutability by using plugins like Immutable.js, always using setState to make updates, and returning new instances in reducers when sending updated state values."},{"question":"What is the difference between useState and useRef hook?","answer":"useState causes components to re-render after state updates whereas useRef doesn\u2019t cause a component to re-render when the value or state changes.\n    Essentially, useRef is like a \u201cbox\u201d that can hold a mutable value in its (.current) property.\nuseState allows us to update the state inside components. While useRef allows referencing DOM elements."},{"question":"What is a wrapper component?","answer":"A wrapper in React is a component that wraps or surrounds another component or group of components. It can be used for a variety of purposes such as adding additional functionality, styling, or layout to the wrapped components.For example, consider a simple component that displays a message:javascript\n const Message = ({ text }) => {\n   return <p>{text}<\/p>;\n };We can create a wrapper component that will add a border to the message component:javascript\n const MessageWrapper = (props) => {\n   return (\n     <div style={{ border: \"1px solid black\" }}>\n       <Message {...props} \/>\n     <\/div>\n   );\n };Now we can use the MessageWrapper component instead of the Message component and the message will be displayed with a border:javascript\n <MessageWrapper text=\"Hello World\" \/>Wrapper component can also accept its own props and pass them down to the wrapped component, for example, we can create a wrapper component that will add a title to the message component:javascript\n const MessageWrapperWithTitle = ({title, ...props}) => {\n   return (\n     <div>\n       <h3>{title}<\/h3>\n       <Message {...props} \/>\n     <\/div>\n   );\n };Now we can use the MessageWrapperWithTitle component and pass title props:javascript\n <MessageWrapperWithTitle title=\"My Message\" text=\"Hello World\" \/>This way, the wrapper component can add additional functionality, styling, or layout to the wrapped component while keeping the wrapped component simple and reusable."},{"question":"What are the differences between useEffect and useLayoutEffect hooks?","answer":"useEffect and useLayoutEffect are both React hooks that can be used to synchronize a component with an external system, such as a browser API or a third-party library. However, there are some key differences between the two:\n\nTiming: useEffect runs after the browser has finished painting, while useLayoutEffect runs synchronously before the browser paints. This means that useLayoutEffect can be used to measure and update layout in a way that feels more synchronous to the user.\n\n\nBrowser Paint: useEffect allows browser to paint the changes before running the effect, hence it may cause some visual flicker. useLayoutEffect synchronously runs the effect before browser paints and hence it will avoid visual flicker.\n\n\nExecution Order: The order in which multiple useEffect hooks are executed is determined by React and may not be predictable. However, the order in which multiple useLayoutEffect hooks are executed is determined by the order in which they were called.\n\n\nError handling: useEffect has a built-in mechanism for handling errors that occur during the execution of the effect, so that it does not crash the entire application. useLayoutEffect does not have this mechanism, and errors that occur during the execution of the effect will crash the entire application.\n\nIn general, it's recommended to use useEffect as much as possible, because it is more performant and less prone to errors. useLayoutEffect should only be used when you need to measure or update layout, and you can't achieve the same result using useEffect."},{"question":"What are the differences between Functional and Class Components?","answer":"There are two different ways to create components in ReactJS. The main differences are listed down as below,## 1.  Syntax:The classs components uses ES6 classes to create the components. It uses render function to display the HTML content in the webpage.The syntax for class component looks like as below.\n    ```js\n    class App extends Reacts.Component {\n      render(){\n        return This is a class component}\n      }```\nNote: The Pascal Case is the recommended approach to provide naming to a component.Functional component has been improved over the years with some added features like Hooks. Here is a syntax for functional component.```js\n  function App(){\n    return \nHello, I'm a function component\n\n  }```## 2. State:State contains information or data about a component which may change over time. In class component, you can update the state when a user interacts with it or server updates the data using the setState() method. The initial state is going to be assigned in the Constructor( )method using the the this.state object and it is possible to different data types in the this.state object such as string, boolean, numbers, etc.\n  A simple example showing how we use the setState() and constructor()```js\n  class App extends Component {\n    constructor() {\n      super();\n      this.state = {\n        message: \"This is a class component\",\n      };\n    }\n    updateMessage() {\n      this.setState({t\n        message: \"Updating the class component\",\n      });\n    }\n    render() {\n      return (\n        <>\n          {this.state.message}\n {\n              this.updateMessage();\n            }}>\n            Click!!\n          \n\n      );\n    }\n  }```You not use state in functional components because it was only supported in class components. But over the years hooks have been implemented in functional component which enable to use state in functional component too.The useState() hook can used to implement state in funcitonal component. It returns an array with two items: the first item is current state and the next one is a function (setState) that updates the value of the current state. Let's see an example to demonstrate the state in functional components,js\n  function App() {\n    const [message, setMessage] = useState(\"This is a functional component\");\n    const updateMessage = () => {\n      setCountry(\"Updating the functional component\");\n    };\n    return (\n      <div className=\"App\">\n        <h1>{message} <\/h1>\n        <button onClick={updateMessage}>Click me!!<\/button>\n      <\/div>\n    );\n  }## 4. Props:\n  Props are referred to as \"properties\". The props are passed into react component just like arguments passed to a function. In otherwords, they are similar to HTML attributes. The props are accessible in child class component using this.props as shown in below example,\n  ```js\n  class Child extends React.Component {\n    render() {\n      return  This is a functional component and component name is {this.props.name} ;\n    }\n  }class Parent extends React.Component {\n    render() {\n           return (\n              \n\n\n\n            );\n     }\n  }\n  ```Props in functional components are similar to that of the class components but the difference is the absence of 'this' keyword. ```js\n  function Child(props) {\n    return This is a child component and the component name is{props.name};\n  }function Parent() {\n    return (\n      \n\n\n\n    );\n  }\n  ```"},{"question":"Why does strict mode render twice in React?","answer":"StrictMode renders components twice in development mode(not production) in order to detect any problems with your code and warn you about those problems. This is used to detect accidental side effects in the render phase.  If you used `create-react-app` development tool then it automatically enables StrictMode by default.\njs\n  ReactDOM.render(\n    <React.StrictMode>\n      {App}\n    <\/React.StrictMode>,\n    document.getElementById('root')\n  );If you want to disable this behavior then you can remove strict mode.\n  js\n  ReactDOM.render(\n    {App}, \n    document.getElementById('root')\n  );To detect side effects the following functions are invoked twice:\nClass component constructor, render, and shouldComponentUpdate methods\nClass component static getDerivedStateFromProps method\nFunction component bodies\nState updater functions\nFunctions passed to useState, useMemo, or useReducer (any Hook)"},{"question":"What is the difference between String and string in C#?","answer":"string is an alias in C# for System.String. So technically, there is no difference. It's like int vs. System.Int32.As far as guidelines, it's generally recommended to use string any time you're referring to an object.\ncsharp\nstring place = \"world\";Likewise, it's generally recommended to use String if you need to refer specifically to the class.\ncsharp\nstring greet = String.Format(\"Hello {0}!\", place);"},{"question":"What is .NET Standard?","answer":"The .NET Standard is a formal specification of .NET APIs that are intended to be available on all .NET implementations."},{"question":"What is .NET Core?","answer":"The .NET Core platform is a new .NET stack that is optimized for open source development and agile delivery on NuGet. .NET Core has two major components. It includes a small runtime that is built from the same codebase as the .NET Framework CLR. The .NET Core runtime includes the same GC and JIT (RyuJIT), but doesn\u2019t include features like Application Domains or Code Access Security. The runtime is delivered via NuGet, as part of the ASP.NET Core package..NET Core also includes the base class libraries. These libraries are largely the same code as the .NET Framework class libraries, but have been factored (removal of dependencies) to enable to ship a smaller set of libraries. These libraries are shipped as System.* NuGet packages on NuGet.org."},{"question":"What is the .NET Framework?","answer":"The .NET is a Framework, which is a collection of classes of reusable libraries given by Microsoft to be used in other .NET applications and to develop, build and deploy many types of applications on the Windows platform including the following:\nConsole Applications\nWindows Forms Applications\nWindows Presentation Foundation (WPF) Applications\nWeb Applications\nWeb Services\nWindows Services\nServices-oriented applications using Windows Communications Foundation (WCF)\nWorkflow-enabled applications using Windows Workflow Foundation(WF)"},{"question":"What's the difference between SDK and Runtime in .NET Core?","answer":"The SDK is all of the stuff that is needed\/makes developing a .NET Core application easier, such as the CLI and a compiler.\n\n\nThe runtime is the \"virtual machine\" that hosts\/runs the application and abstracts all the interaction with the base operating system."},{"question":"What is .NET Standard and why we need to consider it?","answer":".NET Standard solves the code sharing problem for .NET developers across all platforms by bringing all the APIs that you expect and love across the environments that you need: desktop applications, mobile apps & games, and cloud services:\n.NET Standard is a set of APIs that all .NET platforms have to implement. This unifies the .NET platforms and prevents future fragmentation.\n.NET Standard 2.0 will be implemented by .NET Framework, .NET Core,\n    and Xamarin. For .NET Core, this will add many of the existing APIs\n    that have been requested.\n.NET Standard 2.0 includes a compatibility shim for .NET Framework binaries, significantly increasing the set of libraries that you can reference from your .NET Standard libraries.\n.NET Standard will replace Portable Class Libraries (PCLs) as the\n    tooling story for building multi-platform .NET libraries."},{"question":"What is the difference between decimal, float and double in .NET?","answer":"Details:\nWhen would someone use one of these?Precision is the main difference.\nFloat - 7 digits (32 bit)\nDouble-15-16 digits (64 bit)\nDecimal -28-29 significant digits (128 bit)\nAs for what to use when:\n\nFor values which are \"naturally exact decimals\" it's good to use decimal. This is usually suitable for any concepts invented by humans: financial values are the most obvious example, but there are others too. Consider the score given to divers or ice skaters, for example.\n\n\nFor values which are more artefacts of nature which can't really be measured exactly anyway, float\/double are more appropriate. For example, scientific data would usually be represented in this form. Here, the original values won't be \"decimally accurate\" to start with, so it's not important for the expected results to maintain the \"decimal accuracy\". Floating binary point types are much faster to work with than decimals."},{"question":"What are some characteristics of .NET Core?","answer":"Flexible deployment: Can be included in your app or installed side-by-side user- or machine-wide.\n\n\nCross-platform: Runs on Windows, macOS and Linux; can be ported to other OSes. The supported Operating Systems (OS), CPUs and application scenarios will grow over time, provided by Microsoft, other companies, and individuals.\n\n\nCommand-line tools: All product scenarios can be exercised at the command-line.\n\n\nCompatible: .NET Core is compatible with .NET Framework, Xamarin and Mono, via the .NET Standard Library.\n\n\nOpen source: The .NET Core platform is open source, using MIT and Apache 2 licenses. Documentation is licensed under CC-BY. .NET Core is a .NET Foundation project.\n\n\nSupported by Microsoft: .NET Core is supported by Microsoft, per .NET Core Support"},{"question":"What is an unmanaged resource?","answer":"Use that rule of thumb: \n* If you found it in the Microsoft .NET Framework: it's managed. \n* If you went poking around MSDN yourself, it's unmanaged. Anything you've used P\/Invoke calls to get outside of the nice comfy world of everything available to you in the .NET Framwork is unmanaged \u2013 and you're now responsible for cleaning it up."},{"question":"What is CTS?","answer":"The Common Type System (CTS) standardizes the data types of all programming languages using .NET under the umbrella of .NET to a common data type for easy and smooth communication among these .NET languages. CTS is designed as a singly rooted object hierarchy with System.Object as the base type from which all other types are derived. CTS supports two different kinds of types: \nValue Types: Contain the values that need to be stored directly on the stack or allocated inline in a structure. They can be built-in (standard primitive types), user-defined (defined in source code) or enumerations (sets of enumerated values that are represented by labels but stored as a numeric type).\nReference Types: Store a reference to the value\u2018s memory address and are allocated on the heap. Reference types can be any of the pointer types, interface types or self-describing types (arrays and class types such as user-defined classes, boxed value types and delegates)."},{"question":"What is the difference between .NET Core and Mono?","answer":"To be simple:\n* Mono is third party implementation of .Net Framework for Linux\/Android\/iOs\n* .Net Core is Microsoft's own implementation for same."},{"question":"What is MSIL?","answer":"When we compile our .NET code then it is not directly converted to native\/binary code; it is first converted into intermediate code known as MSIL code which is then interpreted by the CLR. MSIL is independent of hardware and the operating system. Cross language relationships are possible since MSIL is the same for all .NET languages. MSIL is further converted into native code."},{"question":"What is a .NET application domain?","answer":"It is an isolation layer provided by the .NET runtime. As such, App domains live with in a process (1 process can have many app domains) and have their own virtual address space.App domains are useful because:\nThey are less expensive than full processes\nThey are multithreaded\nYou can stop one without killing everything in the process\nSegregation of resources\/config\/etc\nEach app domain runs on its own security level"},{"question":"What is CLR?","answer":"The CLR stands for Common Language Runtime and it is an Execution Environment. It works as a layer between Operating Systems and the applications written in .NET languages that conforms to the Common Language Specification (CLS). The main function of Common Language Runtime (CLR) is to convert the Managed Code into native code and then execute the program."},{"question":"Name some CLR services?","answer":"CLR services\nAssembly Resolver\nAssembly Loader\nType Checker\nCOM marshalled\nDebug Manager\nThread Support\nIL to Native compiler\nException Manager\nGarbage Collector\n[\u2b06] ADO.NET Interview Questions"},{"question":"What is ADO.NET?","answer":"ADO stands for Active Data Object and ADO.NET is a set of .NET libraries for ADO.\nNET is a collection of managed libraries used by .NET applications for data source communication using a driver or provider:\nEnterprise applications handle a large amount of data. This data is primarily stored in relational databases, such as Oracle, SQL Server, and Access and so on. These databases use Structured Query Language (SQL) for retrieval of data.  \nTo access enterprise data from a .NET application, an interface was needed. This interface acts as a bridge between an RDBMS system and a .NET application. ADO.NET is such an interface that is created to connect .NET applications to RDBMS systems.  \nIn the .NET framework, Microsoft introduced a new version of Active X Data Objects (ADO) called ADO.NET. Any .NET application, either Windows based or web based, can interact with the database using a rich set of classes of the ADO.NET library. Data can be accessed from any database using connected or disconnected architecture."},{"question":"What is exactly meaning of disconnected and connected approach in ADO.NET?","answer":"In short:\n* Disconnected = Make Connection , Fetch Data , Close Connection\n* Connected = Make Connection , Keep Connection alive , Close Connection when close is called.The ADO.net architecture, in which connection must be kept open till the end to retrieve and access data from database is called as connected architecture. Connected architecture is built on the these types - connection, command, datareaderThe ADO.net architecture, in which connection will be kept open only till the data retrieved from database, and later can be accessed even when connection to database is closed is called as disconnected architecture. Disconnected architecture of ADO.net is built on these types - connection, dataadapter, commandbuilder and dataset and dataview."},{"question":"Describe when you would use the DataView in ADO.NET?","answer":"A DataView enables you to create different views of the data stored in a DataTable, a capability that is often used in data binding applications. Using a DataView, you can expose the data in a table with different sort orders, and you can filter the data by row state or based on a filter expression. A DataView provides a dynamic view of data whose content, ordering, and membership reflect changes to the underlying DataTable as they occur. This is different from the Select method of the DataTable, which returns a DataRow array from a table per particular filter and\/or sort order and whose content reflects changes to the underlying table, but whose membership and ordering remain static. The dynamic capabilities of the DataView make it ideal for data-binding applications."},{"question":"What is the SqlCommandBuilder?","answer":"CommandBuilder helps you to generate update, delete, and insert commands on a single database table for a data adapter. Similar to other objects, each data provider has a command builder class. The OleDbCommandBuilder, SqlCommonBuilder, and OdbcCommandBuilder classes represent the CommonBuilder object in the OleDb, Sql, and ODBC data providers."},{"question":"What is the DataAdapter Object in ADO.NET?","answer":"A DataAdapter is used to retrieve data from a data source and populate tables within a DataSet. Data Adapters form the bridge between a data source and a dataset. The DataAdapter also resolves changes made to the DataSet back to the data source. The DataAdapter uses the Connection object of the .NET Framework data provider to connect to a data source, and it uses Command objects to retrieve data from and resolve changes to the data source.A DataAdapter supports mainly the following two methods:\nFill(): The Fill method populates a dataset or a data table object with data from the database. It retrieves rows from the data source using the SELECT statement specified by an associated select command property. The Fill method leaves the connection in the same state as it encountered before populating the data.     \nUpdate(): The Update method commits the changes back to the database. It also analyzes the RowState of each record in the DataSet and calls the appropriate INSERT, UPDATE, and DELETE statements."},{"question":"What is the basic difference between ADO.NET and Entity Framework?","answer":"ADO.NET Entity Framework is an ORM (object-relational mapping) which creates a higher abstract object model over ADO.NET components. ADO.NET is a layer closer to the database (datatables, datasets and etc...). The main and the only benefit of EF is it auto-generates code for the Model (middle layer), Data Access Layer, and mapping code, thus reducing a lot of development time. Consider the following example:ADO.NET:\n```csharp\nDataTable table = adoDs.Tables[0];\nfor (int j = 0; j < table.Rows.Count; j++)\n{\n    DataRow row = table.Rows[j];\/\/ Get the values of the fields\nstring CustomerName =\n    (string)row[\"Customername\"];\nstring CustomerCode =\n    (string)row[\"CustomerCode\"];\n}\n```EF:\ncsharp\nforeach (Customer objCust in obj.Customers)\n{}"},{"question":"What is Connection Pooling in ADO.NET?","answer":"ADO.NET uses a technique called connection pooling, which minimizes the cost of repeatedly opening and closing connections. Connection pooling reuses existing active connections with the same connection string instead of creating new connections when a request is made to the database. It involves the use of a connection manager that is responsible for maintaining a list, or pool, of available connections for a given connection string. Several pools exist if different connection strings ask for connection pooling."},{"question":"What is SqlCommand Object?","answer":"The SqlCommand carries the SQL statement that needs to be executed on the database. SqlCommand carries the command in the CommandText property and this property will be used when the SqlCommand calls any of its execute methods.\nThe Command Object uses the connection object to execute SQL queries.\nThe queries can be in the form of Inline text, Stored Procedures or direct Table access.\nAn important feature of Command object is that it can be used to execute queries and Stored Procedures with Parameters.\nIf a select query is issued, the result set it returns is usually stored in either a DataSet or a DataReader object.\nThe three important methods exposed by the SqlCommand object is shown below:\nExecuteScalar\nExecuteNonQuery\nExecuteReader"},{"question":"What are the ADO.NET components?","answer":"ADO.NET components categorized in three modes: \n* disconnected, \n* common or shared and \n* the .NET data providers.The disconnected components build the basic ADO.NET architecture. You can use these components (or classes) with or without data providers. For example, you can use a DataTable object with or without providers and shared or common components are the base classes for data providers. Shared or common components are the base classes for data providers and shared by all data providers. The data provider components are specifically designed to work with different kinds of data sources. For example, ODBC data providers work with ODBC data sources and OleDb data providers work with OLE-DB data sources."},{"question":"How can you define the DataSet structure?","answer":"A DataSet object falls in disconnected components series. The DataSet consists of a collection of tables, rows, columns and relationships.DataSet contains a collection of DataTables and the DataTable contains a collection of DataRows, DataRelations, and DataColumns. A DataTable maps to a table in the database."},{"question":"What do you understand by DataRelation class?","answer":"The DataRelation is a class of disconnected architecture in the .NET framework. It is found in the System.Data namespace. It represents a relationship between database tables and correlates tables on the basis of matching column.[\u2b06] ASP.NET Interview Questions"},{"question":"What is ViewData?","answer":"Viewdata contains the key, value pairs as dictionary and this is derived from class\u200a\u2014\u200a\u201cViewDataDictionary\u201c. In action method we are setting the value for viewdata and in view the value will be fetched by typecasting."},{"question":"What is ASP.Net?","answer":"It is a framework developed by Microsoft on which we can develop new generation web sites using web forms(aspx), MVC, HTML, Javascript, CSS etc. Its successor of Microsoft Active Server Pages(ASP). Currently there is ASP.NET 4.0, which is used to develop web sites. There are various page extensions provided by Microsoft that are being used for web site development. Eg: aspx, asmx, ascx, ashx, cs, vb, html, XML etc."},{"question":"Talk about Logging in ASP.NET Core?","answer":"Logging\u00a0is built-in and you get access to structured logs from the ASP.NET Core host itself to your application. With tools like\u00a0Serilog,\u00a0you can extend your logging\u00a0easily\u00a0and save your logs to file, Azure, Amazon or any other output provider. You can configure verbosity and log levels via configuration (appsettings.json by default), and you can configure log levels by different categories."},{"question":"Explain startup process in ASP.NET Core?","answer":"Everything starts from Program.cs\n```csharp\npublic static void Main(string[] args)\n{\n    BuildWebHost(args).Run();\n}public static IWebHost BuildWebHost(string[] args) =>\n    WebHost.CreateDefaultBuilder(args)\n        .UseStartup()\n        .Build();\n```CreateDefaultBuilder extension method will create a default configuration which will look first into appsettings.json files then will look for Environment variables and at the end, it will use command line arguments.This part will also set up default logger sources (debug and console) and load the settings for logging from appsettings.json.After the\u00a0CreateDefaultBuilder finishes, then Startup class is executed. First, the constructor code is executed. After that, services are added to DI container via AddServices method that lives in Startup class. After that, an order of middleware that will handle every incoming request is set up."},{"question":"What exactly is an application pool? What is its purpose?","answer":"Application pools allow you to isolate your applications from one another, even if they are running on the same server. This way, if there is an error in one app, it won't take down other applications.Additionally, applications pools allow you to separate different apps which require different levels of security."},{"question":"How you can add an event handler?","answer":"** **Using the Attributes property of server side control. e.g. \ncsharp\nbtnSubmit.Attributes.Add(\"onMouseOver\",\"JavascriptCode();\")"},{"question":"What's the use of Response.Output.Write()?","answer":"We can write formatted output using Response.Output.Write()."},{"question":"How to configure your ASP.NET Core app?","answer":"Another crucial part of ASP.NET Core Framework is Configuration. Also, it is part of Dependency Injection. Use it anywhere in your code with an option to\u00a0reload on changes\u00a0of configuration values from sources (appsettings.json, environment variables, command line arguments, etc.). It is also easy to override, extend and customize the Configuration. No more extensive configurations in web.config, the preferred way now is appsettings.json in combination with a mix of Environment variables and cmd-line args."},{"question":"What is ASP.NET Core?","answer":"ASP.NET Core is a brand new cross-platform web framework built with .NET Core framework. It is not an update to existing ASP.NET framework. It is a complete rewrite of the ASP.NET framework. It works with both .NET Core and .NET Framework.Main characterestics of ASP.NET Core:\nDI Container which is quite simple and built-in. You can extend it with other popular DI containers\nBuilt-in and extensible structured logging. You can redirect output to as many sources as you want (file, Azure, AWS, console)\nExtensible strongly typed configuration, which can also be used to reload at run-time\nKestrel \u2013 new, cross-platform and super fast web server which can stand alone without IIS, Nginx or Apache\nNew, fully async pipeline. It is easily configured via middleware\nASP.NET All meta package which improves development speed, and enables you to reference all Microsoft packages for ASP.NET Core and it will deploy only those that are being used by your code\nThere is no web.config. We now use appsettings.json file in combination with other sources of configuration (command line args, environment variables, etc.)\nThere is no Global._asax \u2013 We have _Startup.cs which is used to set up Middleware and services for DI Container."},{"question":"What is the difference between ASP.NET and ASP.NET MVC?","answer":"ASP.NET, at its most basic level, provides a means for you to provide general HTML markup combined with server side \"controls\" within the event-driven programming model that can be leveraged with VB, C#, and so on. You define the page(s) of a site, drop in the controls, and provide the programmatic plumbing to make it all work.ASP.NET MVC is an application framework based on the Model-View-Controller architectural pattern. This is what might be considered a \"canned\" framework for a specific way of implementing a web site, with a page acting as the \"controller\" and dispatching requests to the appropriate pages in the application. The idea is to \"partition\" the various elements of the application, eg business rules, presentation rules, and so on.Think of the former as the \"blank slate\" for implementing a site architecture you've designed more or less from the ground up. MVC provides a mechanism for designing a site around a pre-determined \"pattern\" of application access, if that makes sense. There's more technical detail to it than that, to be sure, but that's the nickel tour for the purposes of the question."},{"question":"What is ViewState?","answer":"View State is the method to preserve the Value of the Page and Controls between round trips. It is a Page-Level State Management technique. View State is turned on by default and normally serializes the data in every control on the page regardless of whether it is actually used during a post-back.  A web application is stateless. That means that a new instance of a page is created every time when we make a request to the server to get the page and after the round trip our page has been lost immediately"},{"question":"Can ASP.NET Core work with the .NET framework?","answer":"Yes. This might surprise many, but ASP.NET Core works with .NET framework and this is officially supported by Microsoft.ASP.NET Core works with:\n.NET Core framework\n.NET framework"},{"question":"What is the good practice to implement validations in aspx page?","answer":"Client-side validation is the best way to validate data of a web page. It reduces the network traffic and saves server resources."},{"question":"What is a postback?","answer":"A postback originates from the client browser. Usually one of the controls on the page will be manipulated by the user (a button clicked or dropdown changed, etc), and this control will initiate a postback. The state of this control, plus all other controls on the page (known as the View State) is Posted Back to the web server."},{"question":"What is the file extension of ASP.NET web service?","answer":"Web services have file extension .asmx.[\u2b06] ASP.NET MVC Interview Questions"},{"question":"What is Layout in MVC?","answer":"Layout pages are similar to master pages in traditional web forms. This is used to set the common look across multiple pages. In each child page we can find\u200a\u2014html\n@{\nLayout = \u201c~\/Views\/Shared\/TestLayout1.cshtml\u201d;\n}This indicates child page uses TestLayout page as it\u2019s master page."},{"question":"Explain Bundle.Config in MVC4?","answer":"\u201cBundleConfig.cs\u201d in MVC4 is used to register the bundles by the bundling and minification system. Many bundles are added by default including jQuery libraries like\u200a\u2014\u200ajquery.validate, Modernizr, and default CSS references."},{"question":"What is Razor View Engine?","answer":"Razor is the first major update to render HTML in MVC 3. Razor was designed specifically for view engine syntax. Main focus of this would be to simplify and code-focused templating for HTML generation. Below is the sample of using Razor:```html\n@model MvcMusicStore.Models.Customer\n@{ViewBag.Title = \u201cGet Customers\u201d;} @Model.CustomerName \n```\n\n\n\n#### What is the use of ViewModel in MVC? \nViewModel is a plain class with properties, which is used to bind it to strongly typed view. ViewModel can have the validation rules defined for its properties using data annotations.\n\n\n#### What you mean by Routing in MVC? \n**Routing** is a pattern matching mechanism of incoming requests to the URL patterns which are registered in route table. Class\u200a\u2014\u200a\u201cUrlRoutingModule\u201d is used for the same process.\n\n\n#### What are Actions in MVC? \n**Actions** are the methods in Controller class which is responsible for returning the view or json data. Action will mainly have return type\u200a\u2014\u200a\u201cActionResult\u201d and it will be invoked from method\u200a\u2014\u200a\u201cInvokeAction()\u201d called by controller.\n\n\n#### What are the advantages of MVC over ASP.NET? \n* Provides a clean separation of concerns among UI (Presentation layer), model (Transfer objects\/Domain Objects\/Entities) and Business Logic (Controller).\n* Easy to UNIT Test\n* Improved reusability of model and views. We can have multiple views which can point to the same model and vice versa.\n* Improved structuring of the code\n\n\n#### What are Scaffold templates in MVC? \nScaffolding in ASP.NET MVC is used to generate the Controllers, Model and Views for create, read, update, and delete (CRUD) functionality in an application. The scaffolding will be knowing the naming conventions used for models and controllers and views.\n\n\n#### Can you explain Model, Controller and View in MVC? \n* **Model**\u200a\u2014\u200aIt\u2019s a business entity and it is used to represent the application data.\n* **Controller**\u200a\u2014\u200aRequest sent by the user always scatters through controller and it\u2019s responsibility is to redirect to the specific view using View() method.\n* **View**\u200a\u2014\u200aIt\u2019s the presentation layer of MVC.\n\n\n#### What is Razor Pages? \n[Razor Pages](https:\/\/codingblast.com\/asp-net-core-razor-pages\/) is a new feature of ASP.NET Core that makes coding page-focused scenarios easier and more productive.\n\nWith Razor Pages, you have this one Razor file (_.cshtml_), and the code for a single page lives inside of that file, and that file also represents the URL structure of the app. Therefore, you got everything inside of one file, and it just works.\n\nHowever, you can separate your code to the _code behind_ file with _.cshtml.cs_ extension. You would usually have your view model and handlers (like action methods in MVC) in that file and handle the logic there. Of course, you could also have your view model moved to separate place.\n\nSince Razor Pages is part of the MVC stack, you can use anything that comes with MVC inside of our Razor Pages.\n\n\n#### Explain Sections is MVC? \nSection are the part of HTML which is to be rendered in layout page. In Layout page we will use the below syntax for rendering the HTML \u2013\n\n```html\n@RenderSection(\u201cTestSection\u201d)\n```\n\nAnd in child pages we are defining these sections as shown below \u2013\n\n```html\n@section TestSection{\n     Test Content\n}\n```\n\n\n#### What are Non Action methods in MVC? \nIn MVC all public methods have been treated as Actions. So if you are creating a method and if you do not want to use it as an action method then the method has to be decorated with \"NonAction\" attribute as shown below:\n\n```csharp\n[NonAction]\npublic void TestMethod()\n{\n   \/\/ Method logic\n}\n```\n\n\n## [[\u2b06]](#toc) ASP.NET Web API Interview Questions\n#### What is ASP.NET Web API? \nASP.NET Web API is a framework that simplifies building HTTP services for broader range of clients (including browsers as well as mobile devices) on top of .NET Framework.\n\nUsing ASP.NET Web API, we can create non-SOAP based services like plain XML or JSON strings, etc. with many other advantages including:\n\n*   Create resource-oriented services using the full features of HTTP\n*   Exposing services to a variety of clients easily like browsers or mobile devices, etc.\n\n\n#### Which status code used for all uncaught exceptions by default? \n**500** \u2013 Internal Server Error\n\nConsider:\n```csharp\n[Route(\"CheckId\/{id}\")]\n[HttpGet]\npublic IHttpActionResult CheckId(int id)\n{\n    if(id > 100)\n    {\n        throw new ArgumentOutOfRangeException();\n    }\n    return Ok(id);\n}\n```\nAnd the result:\n\n\n\n\n\n#### What are the Advantages of Using ASP.NET Web API? \nUsing ASP.NET Web API has a number of advantages, but core of the advantages are:\n\n*   It works the HTTP way using standard HTTP verbs like `GET`, `POST`, `PUT`, `DELETE`, etc. for all CRUD operations\n*   Complete support for routing\n*   Response generated in JSON or XML format using `MediaTypeFormatter`\n*   It has the ability to be hosted in IIS as well as self-host outside of IIS\n*   Supports Model binding and Validation\n*   Support for OData\n\n\n#### What New Features are Introduced in ASP.NET Web API 2.0? \nMore new features introduced in ASP.NET Web API framework v2.0 are as follows:\n\n*   Attribute Routing\n*   External Authentication\n*   CORS (Cross-Origin Resource Sharing)\n*   OWIN (Open Web Interface for .NET) Self Hosting\n*   `IHttpActionResult`\n*   Web API OData\n\n\n#### What exactly is OAuth (Open Authorization)? \n**OAuth** (Open Authorization) is an open standard for access granting\/deligation protocol. It used as a way for Internet users to grant websites or applications access to their information on other websites but without giving them the passwords. It does not deal with authentication.\n\nBasically there are three parties involved: oAuth Provider, oAuth Client and Owner.\n\n* oAuth Client (Application Which wants to access your credential)\n* oAuth Provider (eg. facebook, twitter...)\n* Owner (the person with facebook,twitter.. account )\n\n\n#### Explain the usage of HttpResponseMessage? \n`HttpResponseMessage` works with HTTP protocol to return the data with status\/error. \n\n\n#### What is the difference between ApiController and Controller? \n* Use **Controller** to render your normal views. \n* **ApiController** action only return data that is serialized and sent to the client.\n\nConsider:\n```csharp\npublic class TweetsController : Controller {\n  \/\/ GET: \/Tweets\/\n  [HttpGet]\n  public ActionResult Index() {\n    return Json(Twitter.GetTweets(), JsonRequestBehavior.AllowGet);\n  }\n}\n```\nor\n```csharp\npublic class TweetsController : ApiController {\n  \/\/ GET: \/Api\/Tweets\/\n  public List Get() {\n    return Twitter.GetTweets();\n  }\n}\n```\n\n\n#### What are main return types supported in Web API? \nA Web API controller action can return following values:\n\n*   Void \u2013 It will return empty content\n*   HttpResponseMessage \u2013 It will convert the response to an HTTP message.\n*   IHttpActionResult \u2013 internally calls ExecuteAsync to create an HttpResponseMessage\n*   Other types \u2013 You can write the serialized return value into the response body\n\n\n## [[\u2b06]](#toc) AWS Interview Questions\n#### What is AWS? \n**AWS** stands for Amazon Web Services and is a platform that provides database storage, secure cloud services, offering to compute power, content delivery, and many other services to develop business levels.\n\n\n#### Explain the key components of AWS? \n* **Simple Storage Service (S3)**: S3 is most widely used AWS storage web service.\n* **Simple E-mail Service (SES)**: SES is a hosted transactional email service and allows one to fluently send deliverable emails using a RESTFUL API call or through a regular SMTP.\n* **Identity and Access Management (IAM)**: IAM provides improved identity and security management for AWS account.\n* **Elastic Compute Cloud (EC2)**: EC2 is an AWS ecosystem central piece. It is responsible for providing on-demand and flexible computing resources with a \u201cpay as you go\u201d pricing model.\n* **Elastic Block Store (EBS)**: EBS offers continuous storage solution that can be seen in instances as a regular hard drive.\n* **CloudWatch**: CloudWatch allows the controller to outlook and gather key metrics and also set a series of alarms to be notified if there is any trouble.\n\n\n#### What is buckets in AWS? \nAn Amazon S3 bucket is a public cloud storage resource available in Amazon Web Services' (AWS) Simple Storage Service (S3), an object storage offering. Amazon S3 buckets, which are similar to file folders, store objects, which consist of data and its descriptive metadata.\n\nBy default, you can create up to 100 buckets in each of your AWS accounts. If you need more buckets, you can increase your bucket limit by submitting a service limit increase.\n\n\n#### What is AWS Cloudfront? \nAmazon **CloudFront** is a content delivery network (CDN) offered by Amazon Web Services. Content delivery networks provide a globally-distributed network of proxy servers which cache content, such as web videos or other bulky media, more locally to consumers, thus improving access speed for downloading the content.\n\n\n#### What do you mean by AMI? What does it include? \n**AMI** stands for the term **Amazon Machine Image**.  It\u2019s an AWS template which provides the information (an application server, and operating system, and applications) required to perform the launch of an instance. This AMI is the copy of the AMI that is running in the cloud as a virtual server.  You can launch instances from as many different AMIs as you need. AMI consists of the followings:\n\n* A root volume template for an existing instance\n* Launch permissions to determine which AWS accounts will get the AMI in order to launch the instances\n* Mapping for block device to calculate the total volume that will be attached to the instance at the time of launch\n\n\n#### How can I download a file from EC2? \nUse scp:\n\n```sh\nscp -i ec2key.pem username@ec2ip:\/path\/to\/file .\n```\n\n\n#### Is it possible to clone a EC2 instance data? \nYou can make an AMI of an existing instance, and then launch other instances using that AMI.\n\n\n#### What is AWS Data Pipeline? \n**AWS Data Pipeline** is a web service that you can use to automate the movement and transformation of data. With AWS Data Pipeline, you can define data-driven workflows, so that tasks can be dependent on the successful completion of previous tasks.\n\n\n#### Explain the features of Amazon EC2 services \nAmazon EC2 services have following features:\n\n* Virtual Computing Environments\n* Proffers Persistent storage volumes\n* Firewall validating you to specify the protocol\n* Pre-configured templates\n* Static IP address for dynamic Cloud Computing\n\n\n#### What is the connection between AMI and Instance? \nMany different types of *instances* can be launched from one *AMI*. The type of an instance generally regulates the hardware components of the host computer that is used for the instance. Each type of instance has distinct computing and memory efficacy.\n\nOnce an instance is launched, it casts as host and the user interaction with it is same as with any other computer but we have a completely controlled access to our instances. AWS developer interview questions may contain one or more AMI based questions, so prepare yourself for the AMI topic very well.\n\n\n#### Are S3 buckets region specific? \nYes, buckets exist in a specific region and you need to specify that region when you create a bucket. Amazon S3 creates bucket in a region you specify. You can choose any AWS region that is geographically close to you to optimize latency, minimize costs, or address regulatory requirements.\n\n\n#### What is AWS Direct Connect? \n**AWS Direct Connect** bypasses the public Internet and establishes a secure, dedicated connection from your infrastructure into AWS. With established connectivity via AWS Direct Connect, you can access your Amazon VPC and all AWS services.\n\n\n#### What is AWS EBS? \n**Amazon Elastic Block Store** (Amazon EBS) provides persistent block storage volumes for use with Amazon EC2 instances in the AWS Cloud. Each Amazon EBS volume is automatically replicated within its Availability Zone to protect you from component failure, offering high availability and durability.\n\n\n#### What is AWS Lambda? \n**AWS Lambda** is a serverless compute service that runs your code in response to events and automatically manages the underlying compute resources for you. You can use AWS Lambda to extend other AWS services with custom logic, or create your own back-end services that operate at AWS scale, performance, and security.\n\n\n#### What is AWS DynamoDB? \n**Amazon DynamoDB** is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic.\n\n\n#### What is AWS EMR? \n**Amazon Elastic MapReduce (EMR)** is an Amazon Web Services (AWS) tool for big data processing and analysis. Amazon EMR offers the expandable low-configuration service as an easier alternative to running in-house cluster computing.\n\nAmazon EMR is based on Apache Hadoop, a Java-based programming framework that supports the processing of large data sets in a distributed computing environment. MapReduce is a software framework that allows developers to write programs that process massive amounts of unstructured data in parallel across a distributed cluster of processors or stand-alone computers.\n\n\n#### Is data stored in S3 is always encrypted? \nBy default data on S3 is not encrypted, but all you could enable server-side encryption in your object metadata when you upload your data to Amazon S3. As soon as your data reaches S3, it is encrypted and stored.\n\n\n#### Can we attach single EBS to multiple EC2s same time? \nNo. After you create a volume, you can attach it to any EC2 instance in the same Availability Zone. An EBS volume can be attached to **only one EC2 instance at a time**, but multiple volumes can be attached to a single instance.\n\n\n#### What is AWS API gateway? \nAmazon **API Gateway** is an AWS service that enables developers to create, publish, maintain, monitor, and secure APIs at any scale. You can create APIs that access AWS or other web services, as well as data stored in the AWS Cloud.\n\n\n#### What is AWS Direct Connect? \nUsing **AWS Direct Connect**, you can establish private connectivity between AWS and your datacenter, office, or colocation environment, which in many cases can reduce your network costs, increase bandwidth throughput, and provide a more consistent network experience than Internet-based connections.\n\n\n## [[\u2b06]](#toc) Agile & Scrum Interview Questions\n#### What is ASP.NET MVC? \nASP.NET MVC is a web application Framework. It is light weight and highly testable Framework. MVC separates application into three components\u200a\u2014\u200aModel, View and Controller.\n\n\n#### What is Scrum? \n**Scrum** is one of the most popular frameworks for implementing *Agile*. Many people think scrum and agile are the same thing but they're not.\n\nWith scrum, the product is built in a series of fixed-length iterations called sprints that give teams a framework for shipping software on a regular cadence.\n\n\n#### What is sprint in Scrum? \nIn the Scrum methodology a **sprint** is the basic unit of development. Scrum sprints correspond to Agile iterations. \n\nEach sprint starts with \n* a **planning meeting**, where the tasks for the sprint are identified and an estimated commitment for the **sprint goal** is made. \n\nA Sprint ends with \n* a **review or retrospective meeting** where the progress is reviewed and lessons for the next sprint are identified. During each sprint, the team creates finished portions of a product.\n\n\n#### Name roles in Scrum \nThree essential roles for scrum success are:\n* **The Product Owner** are the champions for their product. They are focused on understanding business and market requirements, then prioritizing the work to be done by the engineering team accordingly.\n* ** The Scrum Master** are the champion for scrum within their team. They coach the team, the product owner, and the business on the scrum process and look for ways to fine-tune their practice of it.\n* **The Scrum Team** are the champions for sustainable development practices. Scrum teams are cross-functional, \"the development team\" includes testers, designers, and ops engineers in addition to developers. \n\n\n#### What is User Stories? \n**User stories** are features customers might want to see in their software. They are written on index cards to encourage face-to-face communication. Typically no more than a couple days work, they form the basis of our Agile plans.\n\n#### What is an epic, user stories and task? \n**Epic:** A customer described software feature that is itemized in the product backlog is known as epic. Epics are sub-divided into stories.\n\n**User Stories:** From the client perspective user stories are prepared which defines project or business functions, and it is delivered in a particular sprint as expected.\n\n**Task:** Further down user stories are broken down into different task\n\n\n#### Explain what is Refactoring? \nTo improve the performance, the existing code is modified; this is re-factoring. During re-factoring the code functionality remains same.\n\n\n#### What is an Agile iteration? \nAn Agile **iteration** is a short one to two week period where a team takes most important user stories,  builds them completely and deliver as running-tested-software to the customer. Analysis, design, coding, testing happen during an iteration.\n\n#### Name some types of meetings or ceremonies in Scrum \nScrum calls for four ceremonies that bring structure to each sprint:\n\n* **Sprint planning**: A team planning meeting that determines what to complete in the coming sprint.\n* **Daily stand-up**: Also known as a daily scrum, a 15-minute mini-meeting for the software team to sync.\n* **Sprint demo**: A sharing meeting where the team shows what they've shipped in that sprint.\n* **Sprint retrospective**: A review of what did and didn't go well with actions to make the next sprint better.\n\n\n\n#### If a timebox plan needs to be reprioritized who should re-prioritise it? \nIf a timebox plan needs to be reprioritized it should include whole team, product owner, and developers.\n\n\n#### Mention the key difference between sprint backlog and product backlog? \n* **Product backlog**: It contains a list of all desired features and is owned by the product owner\n\n* **Sprint backlog**: It is a subset of the product backlog owned by development team and commits to deliver it in a sprint. It is created in Sprint Planning Meeting\n\n\n#### What is Agile? \n**Agile** is a time boxed, **iterative approach (framework) to software delivery** that builds software incrementally from the start of the project, instead of trying to deliver it all at once near the end.\n\nIt works by breaking projects down into little bits of user functionality called **user stories**, prioritizing them, and then continuously delivering them in short two week cycles called **iterations**.\n\nAgile refers to any process that aligns with the concepts of the [Agile Manifesto](http:\/\/agilemanifesto.org\/). \n\n\n#### Explain in Agile, burn-up and burn-down chart? \nTo track the project progress burnup and burn down, charts are used\n\n* Burnup Chart: It shows the progress of stories done over time\n* Burndown Chart: It shows how much work was left to do overtime\n\n\n#### What is Sprint Planning? \nThe work to be performed in the Sprint is planned at the **Sprint Planning**. This plan is created by the collaborative work of the entire Scrum Team.\n\nSprint Planning answers the following:\n\n* What can be delivered in the Increment resulting from the upcoming Sprint?\n* How will the work needed to deliver the Increment be achieved?\n\nThe Sprint Goal is an objective set for the Sprint that can be met through the implementation of Product Backlog. \n\n\n#### Explain difference between a Product and a Sprint Backlog \n* The **Product Backlog** is an ordered list of everything that is known to be needed in the product. It is the single source of requirements for any changes to be made to the product.\n\n* The **Sprint Backlog** is the set of Product Backlog items selected for the Sprint during the Sprint Planning, plus a plan for delivering the product Increment and realizing the Sprint Goal. \n\n\n#### What is story points\/efforts\/ scales? \nIt is used to discuss the difficulty of the story without assigning actual hours. The most common scale used is a Fibonacci sequence (1, 2, 3, 5, 8,1 3,\u2026.100) although some teams use linear scale (1, 2, 3, 4\u2026.), Powers of 2 (1, 2, 4, 8\u2026\u2026) and cloth size (XS, S ,M, L, XL)\n\n\n#### How is Agile different from other software delivery aproaches? \n* Analysis, design, coding, and testing are continuous activities\n* Development is iterative\n* Planning is adaptive\n* Roles blur\n* Scope can vary\n* Requirements can change\n* Working software is the primary measure of success\n\n\n\n#### Have you ever used Scrum Task Board? \nIn Scrum the *task board* is a visual display of the progress of the Scrum team during a sprint. It presents a snapshot of the current sprint backlog allowing everyone to see which tasks remain to be started, which are in progress and which are done.\n\nConsider the following layout of the task board:\n- Stories\n- To Do\n- In Progress\n- Testing\n- Done\n\n\n#### Explain what does it mean by product roadmap? \nA **product roadmap** is referred for the holistic view of product features that create the product vision.\n\n\n#### Explain what is Velocity in Agile? \n**Velocity** is a metric that is calculated by addition of all efforts estimates related with user stories completed in an iteration. It figures out how much work Agile can complete in a sprint and how much time will it need to finish a project.\n\n\n#### Mention what should a burndown chart should highlight? \nThe burn-down chart shows the remaining work to complete before the timebox (iteration) ends.\n\n\n#### What is test driven development? \n**Test driven development (TDD)** is also known as test-driven design. In this method, developer first writes an automated test case which describes new function or improvement and then creates small codes to pass that test, and later re-factors the new code to meet the acceptable standards.\n\n\n## [[\u2b06]](#toc) Android Interview Questions\n#### Mention the difference between RelativeLayout and LinearLayout? \n* **Linear Layout** \u2014 Arranges elements either vertically or horizontally. i.e. in a row or column.\n* **Relative Layout** \u2014 Arranges elements relative to parent or other elements.\n\n\n#### What is the difference between Bitmap and Drawable in Android? \n* A **Bitmap** is a representation of a bitmap image (something like java.awt.Image).\n* A **Drawable** is an abstraction of \"something that can be drawn\". It could be a Bitmap (wrapped up as a BitmapDrawable), but it could also be a solid color, a collection of other Drawable objects, or any number of other structures.\n\n\n#### What is a difference between Spannable and String? \nA **Spannable** allows to attach formatting information like bold, italic, ... to sub-sequences (\"spans\", thus the name) of the characters. It can be used whenever you want to represent \"rich text\".\n\n\n#### What is an Activity? \nAn **activity** provides the window in which the app draws its UI. This window typically fills the screen, but may be smaller than the screen and float on top of other windows. Generally, one activity implements one screen in an app. For instance, one of an app\u2019s activities may implement a Preferences screen, while another activity implements a Select Photo screen.\n\n\n#### What is Armv7? \nThere are 3 CPU architectures in Android:\n\n* **_ARMv7_**  is the most common as it is optimised for battery consumption.\n*  **_ARM64_**  is an evolved version of that that supports 64-bit processing for more powerful computing.\n*  **_ARMx86_**, is the least used for these three, since it is not battery friendly. It is more powerful than the other two.\n\n\n#### Explain activity lifecycle \nAs a user navigates through, out of, and back to your app, the Activity instances in your app transition through different states in their lifecycle.\n\nTo navigate transitions between stages of the activity lifecycle, the Activity class provides a core set of six callbacks: `onCreate()`, `onStart()`, `onResume()`, `onPause()`, `onStop()`, and `onDestroy()`. The system invokes each of these callbacks as an activity enters a new state."},{"question":"How can I get the context in a fragment?","answer":"You can use getActivity(), which returns the activity associated with a fragment. The activity is a context (since Activity extends Context).You can also override the onAttach method of fragment:java\npublic static class DummySectionFragment extends Fragment{\n...\n    @Override\n    public void onAttach(Activity activity) {\n        super.onAttach(activity);\n        DBHelper = new DatabaseHelper(activity);\n    }\n}"},{"question":"What is View Group? How are they different from Views?","answer":"View: View objects are the basic building blocks of User Interface(UI) elements in Android. View is a simple rectangle box which responds to the user\u2019s actions. Examples are EditText, Button, CheckBox etc. View refers to the android.view.View class, which is the base class of all UI classes.ViewGroup: ViewGroup is the invisible container. It holds View and ViewGroup. For example, LinearLayout is the ViewGroup that contains Button(View), and other Layouts also. ViewGroup is the base class for Layouts."},{"question":"Is it possible to implement the model\u2013view\u2013controller pattern in Java for Android?","answer":"In Android you don't have MVC, but you have the following:\nYou define your user interface in  various XML files by resolution, hardware, etc.\nYou define your resources in various XML files by locale, etc.\nYou extend clases like ListActivity, TabActivity and make use of the XML file by inflaters.\nYou can create as many classes as you wish for your business logic.\nA lot of Utils have been already written for you - DatabaseUtils, Html."},{"question":"What\u2019s the difference between onCreate() and onStart()?","answer":"The onCreate() method is called once during the Activity lifecycle, either when the application starts, or when the Activity has been destroyed and then recreated, for example during a configuration change.\nThe onStart() method is called whenever the Activity becomes visible to the user, typically after onCreate() or onRestart()."},{"question":"Explain the build process in Android","answer":"First step involves compiling the resources folder (\/res) using the aapt (android asset packaging tool) tool. These are compiled to a single class file called R.java. This is a class that just contains constants.\nSecond step involves the java source code being compiled to .class files by javac, and then the class files are converted to Dalvik bytecode by the \u201cdx\u201d tool, which is included in the sdk \u2018tools\u2019. The output is classes.dex.\nThe final step involves the android apkbuilder which takes all the input and builds the apk (android packaging key) file."},{"question":"What is an Intent in Android?","answer":"An Intent is basically a message that is passed between components (such as Activities, Services, Broadcast Receivers, and Content Providers).So, it is almost equivalent to parameters passed to API calls. The fundamental differences between API calls and invoking components via intents are:\nAPI calls are synchronous while intent-based invocations are asynchronous.\nAPI calls are compile-time binding while intent-based calls are run-time binding.\nTo listen for an broadcast intent (like the phone ringing, or an SMS is received), you implement a broadcast receiver, which will be passed the intent. To declare that you can handle another's app intent like \"take picture\", you declare an intent filter in your app's manifest file.If you want to fire off an intent to do something, like pop up the dialer, you fire off an intent saying you will.An Intent provides a facility for performing late runtime binding between the code in different applications."},{"question":"What is the most appropriate way to store user settings in Android application?","answer":"In general SharedPreferences are your best bet for storing preferences, so in general I'd recommend that approach for saving application and user settings.The only area of concern here is what you're saving. Passwords are always a tricky thing to store, and I'd be particularly wary of storing them as clear text. The Android architecture is such that your application's SharedPreferences are sandboxed to prevent other applications from being able to access the values so there's some security there, but physical access to a phone could potentially allow access to the values."},{"question":"In what situation should one use RecyclerView over ListView?","answer":"RecyclerView was created as a ListView improvement, so yes, you can create an attached list with ListView control, but using RecyclerView is easier as it:\nReuses cells while scrolling up\/down - this is possible with implementing View Holder in the ListView adapter, but it was an optional thing, while in the RecycleView it's the default way of writing adapter.\nDecouples list from its container - so you can put list items easily at run time in the different containers (linearLayout, gridLayout) with setting LayoutManager.\nTo conclude, RecyclerView is a more flexible control for handling \"list data\" that follows patterns of delegation of concerns and leaves for itself only one task - recycling items."},{"question":"Explain briefly all the Android application components","answer":"App components are the essential building blocks of an Android app. Each component is an entry point through which the system or a user can enter your app.There are four different types of app components:\nActivities - An activity is the entry point for interacting with the user. It represents a single screen with a user interface.\nServices - A service is a general-purpose entry point for keeping an app running in the background for all kinds of reasons. It is a component that runs in the background to perform long-running operations or to perform work for remote processes.\nBroadcast receivers - A broadcast receiver is a component that enables the system to deliver events to the app outside of a regular user flow, allowing the app to respond to system-wide broadcast announcements.\nContent providers - A content provider manages a shared set of app data that you can store in the file system, in a SQLite database, on the web, or on any other persistent storage location that your app can access."},{"question":"What is 'Context' on Android?","answer":"The documentation itself provides a rather straightforward explanation: The Context class is an \u201cInterface to global information about an application environment\".We may assume a Context is a handle to the system; it provides services like resolving resources, obtaining access to databases and preferences, and so on. An Android app has activities. Context is like a handle to the environment your application is currently running in. The activity object inherits the Context object."},{"question":"What is the Dalvik Virtual Machine?","answer":"The Dalvik Virtual Machine (DVM) is an android virtual machine optimized for mobile devices. It optimizes the virtual machine for memory, battery life and performance.The Dex compiler converts the class files into the .dex file that run on the Dalvik VM. Multiple class files are converted into one dex file."},{"question":"Tell about Constraint Layout","answer":"ConstraintLayout allows you to create large and complex layouts with a flat view hierarchy (no nested view groups). It's similar to RelativeLayout in that all views are laid out according to relationships between sibling views and the parent layout, but it's more flexible than RelativeLayout and easier to use with Android Studio's Layout Editor.Intention of ConstraintLayout is to optimize and flatten the view hierarchy of your layouts by applying some rules to each view to avoid nesting."},{"question":"What is ADB and what is it used for?","answer":"ADB is the acronym for Android Debug Bridge, which is part of the Android SDK (Software Development Kit). It uses a client-server-model (i.e. adbd, the ADB daemon, is running on the device and can be connected to), and in most cases is used via an USB connection. It is also possible to use it via WiFi (wireless adb).There's nothing you need to install on your Android device, as the ADB daemon (adbd) is already integrated into the Android OS. It is usually accessed via a command line interface from the PC, where either the full Android SDK is installed (several 30 MB download archive currently), or a massively stripped-down version for \"non-developers\", sometimes referred to as \"Mini ADB\" or \"ADB essentials\" (for Linux, this is only the adb executable; for Windows it's adb.exe plus two or three .dll files)."},{"question":"What is Dalvik?","answer":"Dalvik is a Just In Time (JIT) compiler. By the term JIT, we mean to say that whenever you run your app in your mobile device then that part of your code that is needed for execution of your app will only be compiled at that moment and rest of the code will be compiled in the future when needed. The JIT or Just In Time compiles only a part of your code and it has a smaller memory footprint and due to this, it uses very less physical space on your device."},{"question":"What types of Context do you know?","answer":"The are mainly two types of context:\n\nApplication Context: It is an instance that is the singleton and can be accessed in activity via getApplicationContext(). This context is tied to the lifecycle of an application. The application context can be used where you need a context whose lifecycle is separate from the current context or when you are passing a context beyond the scope of activity.\n\n\nActivity Context: This context is tied to the lifecycle of an activity. The activity context should be used when you are passing the context in the scope of an activity or you need the context whose lifecycle is attached to the current context."},{"question":"How do I pass data between Activities in Android application?","answer":"Details:\nI have a scenario where, after logging in through a login page, there will be a sign-out button on each activity. Can you guide me on how to keep session id available to all activities?The easiest way to do this would be to pass the session id to the signout activity in the Intent you're using to start the activity:java\nIntent intent = new Intent(getBaseContext(), SignoutActivity.class);\nintent.putExtra(\"EXTRA_SESSION_ID\", sessionId);\nstartActivity(intent);\nAccess that intent on next activity:\njava\nString sessionId = getIntent().getStringExtra(\"EXTRA_SESSION_ID\");"},{"question":"How does the OutOfMemory happens?","answer":"Out of memory error is very common error when you are developing for a application that deals with multiple images sets or large bitmaps or some Animation stuff. In Android, every application runs in a Linux Process. Each Linux Process has a Virtual Machine (Dalvik Virtual Machine) running inside it. There is a limit on the memory a process can demand and it is different for different devices and also differs for phones and tablets. When some process demands a higher memory than its limit it causes a error i.e Out of memory error.There are number of reasons why we get a Out of memory errors. Some of those are:\n\nYou are doing some operation that continuously demands a lot of memory and at some point it goes beyond the max heap memory limit of a process.\n\n\nYou are leaking some memory i.e you didn\u2019t make the previous objects you allocated eligible for Garbage Collection (GC). This is called Memory leak.\n\n\nYou are dealing with large bitmaps and loading all of them at run time. You have to deal very carefully with large bitmaps by loading the size that you need not the whole bitmap at once and then do scaling."},{"question":"What is a ContentProvider and what is it typically used for?","answer":"A content provider manages access to a central repository of data. A provider is part of an Android application, which often provides its own UI for working with the data. However, content providers are primarily intended to be used by other applications, which access the provider using a provider client object.Typically you work with content providers in one of two scenarios; \n* you may want to implement code to access an existing content provider in another application, or \n* you may want to create a new content provider in your application to share data with other applications."},{"question":"What is an AsyncTask?","answer":"AsyncTask is one of the easiest ways to implement parallelism in Android without having to deal with more complex methods like Threads. Though it offers a basic level of parallelism with the UI thread, it should not be used for longer operations (of, say, not more than 2 seconds). AsyncTask has four methods \nonPreExecute() \ndoInBackground()\nonProgressUpdate()\nonPostExecute()\nwhere doInBackground() is the most important as it is where background computations are performed."},{"question":"Why is it recommended to use only the default constructor to create a Fragment?","answer":"In short, Fragments need to have a no-args constructor for the Android system to instantiate them. Your Fragment subclasses need a public empty constructor as this is what's being called by the framework.It is used in the case when device has to restore the state of a fragment. No data will be passed and a default fragment will be created and then the state will be restored. Since the system has no way to know what you passed in your constructor or your newInstance, default constructor will be used and saved bundle should be passed via onCreate after the fragment is actually instantiated with the default constructor."},{"question":"How to persist data in an Android app?","answer":"There are basically four different ways to store data in an Android app:\nShared Preferences - to save primitive data in key-value pairs\nInternal Storage - you need to store data to the device filesystem, but you do not want any other app (even the user) to read this data\nExternal Storage -  you might want the user to view the files and data saved by your app\nSQLite database"},{"question":"Explain Android notification system","answer":"A notification is a message that Android displays outside your app's UI to provide the user with reminders, communication from other people, or other timely information from your app. Users can tap the notification to open your app or take an action directly from the notification.Notifications appear to users in different locations and formats, such as an icon in the status bar, a more detailed entry in the notification drawer, as a badge on the app's icon, and on paired wearables automatically. Beginning with Android 5.0, notifications can appear on the lock screen.Starting in Android 8.0 (API level 26), all notifications must be assigned to a channel or it will not appear. By categorizing notifications into channels, users can disable specific notification channels for your app (instead of disabling all your notifications), and users can control the visual and auditory options for each channel\u2014all from the Android system settings.[\u2b06] Angular Interview Questions"},{"question":"What is Routing Guard in Angular?","answer":"Angular\u2019s route guards are interfaces which can tell the router whether or not it should allow navigation to a requested route. They make this decision by looking for a true or false return value from a class which implements the given guard interface."},{"question":"What is a module, and what does it contain?","answer":"An Angular module is set of Angular basic building blocks like component, directives, services etc. An app can have more than one module.A module can be created using @NgModule decorator.js\n@NgModule({\n  imports:      [ BrowserModule ],\n  declarations: [ AppComponent ],\n  bootstrap:    [ AppComponent ]\n})\nexport class AppModule { }"},{"question":"What are pipes? Give me an example.","answer":"A pipe takes in data as input and transforms it to a desired output. You can chain pipes together in potentially useful combinations. You can write your own custom pipes. Angular comes with a stock of pipes such as DatePipe, UpperCasePipe, LowerCasePipe, CurrencyPipe, and PercentPipe.Consider:\n```htmlThe hero's birthday is {{ birthday | date }}```\nIn this page, you'll use pipes to transform a component's birthday property into a human-friendly date."},{"question":"What is the minimum definition of a component?","answer":"The absolute minimal configuration for a @Component in Angular is a template. Both template properties are set to optional because you have to define either template or templateUrl.When you don't define them, you will get an exception like this:\nsh\nNo template specified for component 'ComponentName'\nA selector property is not required, as you can also use your components in a route."},{"question":"What's the difference between an Angular component and module?","answer":"Components control views (html). They also communicate with other components and services to bring functionality to your app.Modules consist of one or more components. They do not control any html. Your modules declare which components can be used by components belonging to other modules, which classes will be injected by the dependency injector and which component gets bootstrapped. Modules allow you to manage your components to bring modularity to your app."},{"question":"How would you run unit test?","answer":"The Angular CLI downloads and install everything you need to test an Angular application with the Jasmine test framework.The project you create with the CLI is immediately ready to test. Just run this one CLI command:sh\nng test"},{"question":"What is a service, and when will you use it?","answer":"Angular services are singleton objects which get instantiated only once during the lifetime of an application. They contain methods that maintain data throughout the life of an application, i.e. data does not get refreshed and is available all the time. The main objective of a service is to organize and share business logic, models, or data and functions with different components of an Angular application.The separation of concerns is the main reason why Angular services came into existence. An Angular service is a stateless object and provides some very useful functions."},{"question":"What is interpolation?","answer":"Interpolation is a special syntax that Angular converts into property binding. It\u2019s a convenient alternative to property binding. It is represented by double curly braces({{}}). The text between the braces is often the name of a component property. Angular replaces that name with the string value of the corresponding component property.\nLet's take an example,\nhtml\n    <h3>\n      {{title}}\n      <img src=\"{{url}}\" style=\"height:30px\">\n    <\/h3>\nIn the example above, Angular evaluates the title and url properties and fills in the blanks, first displaying a bold application title and then a URL."},{"question":"What is a bootstrapping module?","answer":"Every application has at least one Angular module, the root module that you bootstrap to launch the application is called as bootstrapping module. It is commonly known as AppModule. The default structure of AppModule generated by AngularCLI would be as follows,\n```javascript\n    \/ JavaScript imports \/\n    import { BrowserModule } from '@angular\/platform-browser';\n    import { NgModule } from '@angular\/core';\n    import { FormsModule } from '@angular\/forms';\n    import { HttpClientModule } from '@angular\/common\/http';import { AppComponent } from '.\/app.component';\n\n\/* the AppModule class with the @NgModule decorator *\/\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```"},{"question":"What is the equivalent of ngShow and ngHide in Angular?","answer":"Just bind to the hidden property"},{"question":"What are observables?","answer":"Observables are declarative which provide support for passing messages between publishers and subscribers in your application. They are mainly used for event handling, asynchronous programming, and handling multiple values. In this case, you define a function for publishing values, but it is not executed until a consumer subscribes to it. The subscribed consumer then receives notifications until the function completes, or until they unsubscribe."},{"question":"What is an observable?","answer":"An Observable is a unique Object similar to a Promise that can help manage async code. Observables are not part of the JavaScript language so we need to rely on a popular Observable library called RxJS.\n    The observables are created using new keyword. Let see the simple example of observable,\n```javascript\n    import { Observable } from 'rxjs';const observable = new Observable(observer => {\n  setTimeout(() => {\n    observer.next('Hello from a Observable!');\n  }, 2000);\n});`\n```"},{"question":"What is a component? Why would you use it?","answer":"Components are the most basic building block of an UI in an Angular application. An Angular application is a tree of Angular components. Angular components are a subset of directives. Unlike directives, components always have a template and only one component can be instantiated per an element in a template.A component must belong to an NgModule in order for it to be usable by another component or application. To specify that a component is a member of an NgModule, you should list it in the declarations field of that NgModule.js\n@Component({selector: 'greet', template: 'Hello {{name}}!'})\nclass Greet {\n  name: string = 'World';\n}"},{"question":"What is an observer?","answer":"Observer is an interface for a consumer of push-based notifications delivered by an Observable. It has below structure,\njavascript\n    interface Observer<T> {\n      closed?: boolean;\n      next: (value: T) => void;\n      error: (err: any) => void;\n      complete: () => void;\n    }\nA handler that implements the Observer interface for receiving observable notifications will be passed as a parameter for observable as below,\njavascript\n    myObservable.subscribe(myObserver);\nNote: If you don't supply a handler for a notification type, the observer ignores notifications of that type."},{"question":"What is the purpose of base href tag?","answer":"The routing application should add  element to the index.html as the first child in the  tag inorder to indicate how to compose navigation URLs. If app folder is the application root then you can set the href value as below\nhtml\n    <base href=\"\/\">"},{"question":"You have an HTML response I want to display. How do I do that?","answer":"The correct syntax is the following:\n```html``\nWorking in5.2.6`"},{"question":"What is the difference between Structural and Attribute directives in Angular?","answer":"Structural directives are used to alter the DOM layout by removing and adding DOM elements. It is far better in changing the structure of the view. Examples of Structural directives are NgFor and Nglf.\n\n\nAttribute Directives These are being used as characteristics of elements. For example, a directive such as built-in NgStyle in the template Syntax guide is an attribute directive."},{"question":"How can I select an element in a component template?","answer":"You can get a handle to the DOM element via ElementRef by injecting it into your component's constructor:js\nconstructor(myElement: ElementRef) { ... }"},{"question":"What is the equivalent of \"ngShow\" and \"ngHide\" in Angular?","answer":"Just bind to the hidden property:js\n[hidden]=\"!myVar\""},{"question":"What is the difference between *ngIf vs [hidden]?","answer":"*ngIf effectively removes its content from the DOM while [hidden] modifies the display property and only instructs the browser to not show the content but the DOM still contains it."},{"question":"What are the differences between AngularJS (angular 1.x) and Angular (Angular 2.x and beyond)?","answer":"Angular and AngularJS is basically a different framework with the same name.Angular is more ready for the current state of web standards and the future state of the web (ES6\\7, immutiablity, components, shadow DOM, service workers, mobile compatibilty, modules, typescript and so on and so on... )Angular killed many main features in AngularJS like - controllers, $scope, directives (replaced with @component annotations), the module definition, and much more, even simple things like ng-repeat has not left the same as it was.Also: \n1. They added an angular cli.\n2. Your angular code is written in ES6 Typescript and it compiles at runtime to Javascript in the browser.\n3. You bind to your HTML similarly like how you would if in an Angular 1 directive. So variable like $scope and $rootScope have been deprecated."},{"question":"What are some differences between Angular 2 and 4?","answer":"Just to name a few:\n* Improvements in AOT, \n* allowing the \"else\" clause in ngIf, \n* support for TypeScript 2.1\n* breaking out the animations package"},{"question":"What is the difference between \"@Component\" and \"@Directive\" in Angular?","answer":"Directives add behaviour to an existing DOM element or an existing component instance.\nA component, rather than adding\/modifying behaviour, actually creates its own view (hierarchy of DOM elements) with attached behaviour.\nWrite a component when you want to create a reusable set of DOM elements of UI with custom behaviour. Write a directive when you want to write reusable behaviour to supplement existing DOM elements."},{"question":"How would you protect a component being activated through the router?","answer":"The Angular router ships with a feature called guards. These provide us with ways to control the flow of our application. We can stop a user from visitng certain routes, stop a user from leaving routes, and more. The overall process for protecting Angular routes:\nCreate a guard service: ng g guard auth\nCreate canActivate() or canActivateChild() methods\nUse the guard when defining routes\njs\n\/\/ import the newly created AuthGuard\nconst routes: Routes = [\n  {\n    path: 'account',\n    canActivate: [AuthGuard]\n  }\n];Some other available guards:\nCanActivate: Check if a user has access\nCanActivateChild: Check if a user has access to any of the child routes\nCanDeactivate: Can a user leave a page? For example, they haven't finished editing a post\nResolve: Grab data before the route is instantiated\nCanLoad: Check to see if we can load the routes assets"},{"question":"What does this line do?","answer":"Details:\njs\n@HostBinding('[class.valid]') isValid;@HostBinding lets you set properties on the element or component that hosts the directive.The code applies the css class valid to whatever is using this directive conditionally based on the value of isValid.[\u2b06] AngularJS Interview Questions"},{"question":"Why to use AngularJS?","answer":"There are following reasons to choose AngularJS as a web development framework:\nIt is based on MVC pattern which helps you to organize your web apps or web application properly.\nIt extends HTML by attaching directives to your HTML markup with new attributes or tags and expressions\nin order to define very powerful templates.\nIt also allows you to create your own directives, making reusable components that fill your needs and\nabstract your DOM manipulation logic.\nIt supports two-way data binding i.e. connects your HTML (views) to your JavaScript objects (models)\nseamlessly. In this way any change in model will update the view and vice versa without any DOM\nmanipulation or event handling.\nIt encapsulates the behavior of your application in controllers which are instantiated with the help of\ndependency injection.\nIt supports services that can be injected into your controllers to use some utility code to fullfil your need.\nFor example, it provides $http service to communicate with REST service.\nIt supports dependency injection which helps you to test your angular app code very easily.\nAlso, AngularJS is mature community to help you. It has widely support over the internet."},{"question":"What is the difference between \"ng-show\"\/\"ng-hide\" and \"ng-if\" directives?","answer":"ng-show\/ng-hide will always insert the DOM element, but will display\/hide it based on the condition. ng-if will not insert the DOM element until the condition is not fulfilled.ng-if is better when we needed the DOM to be loaded conditionally, as it will help load page bit faster compared to ng-show\/ng-hide.We only need to keep in mind what the difference between these directives is, so deciding which one to use totally depends on the task requirements."},{"question":"Does AngularJS has dependency on jQuery?","answer":"AngularJS has no dependency on jQuery library. But it can be used with jQuery library."},{"question":"How do you hide an HTML element via a button click in AngularJS?","answer":"This can be done by using the ng-hide directive in conjunction with a controller to hide an HTML element on button click.```html\nHide element\nHello World!\n```js\nfunction MyCtrl($scope) {\n    $scope.isHide = false;\n    $scope.hide = function () {\n        $scope.isHide = true;\n    };\n}"},{"question":"What is a singleton pattern and where we can find it in AngularJS?","answer":"Is a great pattern that restricts the use of a class more than once. We can find singleton pattern in angular in dependency injection and in the services.In a sense, if the you do 2 times new Object() without this pattern, the you will be alocating 2 pieces of memory for the same object. With singleton pattern, if the object exists, it'll be reused."},{"question":"What are the AngularJS features?","answer":"The features of AngularJS are listed below:\nModules\nDirectives\nTemplates\nScope\nExpressions\nData Binding\nMVC (Model, View & Controller)\nValidations\nFilters\nServices\nRouting\nDependency Injection\nTesting"},{"question":"When dependent modules of a module are loaded?","answer":"A module might have dependencies on other modules. The dependent modules are loaded by angular\nbefore the requiring module is loaded.In other words the configuration blocks of the dependent modules execute before the configuration blocks of the requiring module. The same is true for the run blocks. Each module can only be loaded once, even if multiple other modules require it."},{"question":"What is Angular\u2019s prefixes $ and $$?","answer":"To prevent accidental name collisions with your code, Angular prefixes names of public objects with $ and names of private objects with $$. So, do not use the $ or $$ prefix in your code."},{"question":"What are Filters in AngularJS?","answer":"Filters are used to format data before displaying it to the user. They can be used in view templates, controllers, services and directives. There are some built-in filters provided by AngularJS like as Currency, Date, Number, OrderBy, Lowercase, Uppercase etc. You can also create your own filters.Filter Syntax:{{ expression | filter}}"},{"question":"What are Directives in AngularJS?","answer":"AngularJS directives are a combination of AngularJS template markups (HTML attributes or elements, or CSS classes) and supporting JavaScript code. The JavaScript directive code defines the template data and behaviors of the HTML elements.AngularJS directives are used to extend the HTML vocabulary i.e. they decorate html elements with new behaviors and help to manipulate html elements attributes in interesting way.There are some built-in directives provided by AngularJS like as ng-app, ng-controller, ng-repeat, ng-model etc."},{"question":"What are Directives?","answer":"Directives are markers on a DOM element (such as an attribute, element name, comment or CSS class) that tell AngularJS\u2019s HTML compiler ($compile) to attach a specified behavior to that DOM element (e.g. via event listeners), or even to transform the DOM element and its children. Angular comes with a set of these directives built-in, like ngBind, ngModel, and ngClass. Much like you create controllers and services, you can create your own directives for Angular to use. When Angular bootstraps your application, the HTML compiler traverses the DOM matching directives against the DOM elements."},{"question":"Explain what is a \"$scope\" in AngularJS","answer":"Scope is an object that refers to the application model. It is an execution context for expressions. Scopes are arranged in hierarchical structure which mimic the DOM structure of the application. Scopes can watch expressions and propagate events. Scopes are objects that refer to the model. They act as glue between controller and view."},{"question":"What directive would you use to hide elements from the HTML DOM by removing them from that DOM not changing their styling?","answer":"The ngIf Directive, when applied to an element, will remove that element from the DOM if it\u2019s condition is false."},{"question":"What is the difference between one-way binding and two-way binding?","answer":"One way binding implies that the scope variable in the html will be set to the first value its model is bound to (i.e. assigned to)  \nTwo way binding implies that the scope variable will change it\u2019s value everytime its model is assigned to a different value"},{"question":"What is auto bootstrap process in AngularJS?","answer":"Angular initializes automatically upon DOMContentLoaded event or when the angular.js script is downloaded to the browser and the document.readyState is set to complete. At this point AngularJS looks for the ng-app directive which is the root of angular app compilation and tells about AngularJS part within DOM. When the ng-app directive is found then Angular will:\nLoad the module associated with the directive.\nCreate the application injector.\nCompile the DOM starting from the ng-app root element.\nThis process is called auto-bootstrapping.\n```html\n\n Hello {{msg}}!\n\n\n\n\n```"},{"question":"How would you specify that a scope variable should have one-time binding only?","answer":"By using \u201c::\u201d in front of it."},{"question":"What is scope in AngularJS?","answer":"Scope is a JavaScript object that refers to the application model. It acts as a context for evaluating angular expressions. Basically, it acts as glue between controller and view.Scopes are hierarchical in nature and follow the DOM structure of your AngularJS app. AngularJS has two scope objects: $rootScope and $scope."},{"question":"How do you disable a button depending on a checkbox\u2019s state?","answer":"We can use the ng-disabled directive and bind its condition to the checkbox\u2019s state.```html\n\nDisable Button\n    \nSelect me\n```"},{"question":"What is scope hierarchy?","answer":"The $scope object used by views in AngularJS are organized into a hierarchy. There is a root scope, and the $rootScope can has one or more child scopes. Each controller has its own $scope (which is a child of the $rootScope), so whatever variables you create on $scope within controller, these variables are accessible by the view based on this controller.For example, suppose you have two controllers: ParentController and ChildController as given below:\n```html\n\n\n\n\n\n\n\nParent Controller\n\nManager Name\n{{managerName}}\n\n\nCompany Name\n{{companyName}}\n\n\n\n\nChild Controller\n\nTeam Lead Name\n{{ teamLeadName }}\n\n\nReporting To\n{{managerName}}\n\n\nCompany Name\n{{companyName}}\n\n\n\n\n\n\n\n```"},{"question":"How do you share data between controllers?","answer":"Create an AngularJS service that will hold the data and inject it inside of the controllers.Using a service is the cleanest, fastest and easiest way to test. However, there are couple of other ways to implement data sharing between controllers, like:\u2013 Using events\n\u2013 Using $parent, nextSibling, controllerAs, etc. to directly access the controllers\n\u2013 Using the $rootScope to add the data on (not a good practice)The methods above are all correct, but are not the most efficient and easy to test."},{"question":"What are the basic steps to unit test an AngularJS filter?","answer":"Inject the module that contains the filter.\nProvide any mocks that the filter relies on.\nGet an instance of the filter using $filter('yourFilterName').\nAssert your expectations."},{"question":"What are the basic steps to unit test an AngularJS filter?","answer":"Inject the module that contains the filter.\nProvide any mocks that the filter relies on.\nGet an instance of the filter using $filter('yourFilterName').\nAssert your expectations."},{"question":"What are the advantage of AngularJS?","answer":"There are following advantages of AngularJS:\nData Binding - AngularJS provides a powerful data binding mechanism to bind data to HTML elements by using scope.\nCustomize & Extensible - AngularJS is customized and extensible as per you requirement. You can create your own custom components like directives, services etc.\nCode Reusability - AngularJS allows you to write code which can be reused. For example custom directive which you can reuse.\nSupport \u2013 AngularJS is mature community to help you. It has widely support over the internet. Also, AngularJS is supported by Google which gives it an advantage.\nCompatibility - AngularJS is based on JavaScript which makes it easier to integrate with any other JavaScript library and runnable on browsers like IE, Opera, FF, Safari, Chrome etc.\nTesting - AngularJS is designed to be testable so that you can test your AngularJS app components as easy as possible. It has dependency injection at its core, which makes it easy to test."},{"question":"Explain what is services in AngularJS","answer":"In AngularJS services are the singleton objects or functions that are used for carrying out specific tasks.  It holds some business logic and these function can be called as controllers, directive, filters and so on."},{"question":"Explain what is directive and mention what are the different types of Directive?","answer":"During compilation process when specific HTML constructs are encountered a behaviour or function is triggered, this function is referred as directive.  It is executed when the compiler encounters it in the DOM.Different types of directives are:\nElement directives\nAttribute directives\nCSS class directives\nComment directives\n[\u2b06] Azure Interview Questions"},{"question":"What are the benefits of severless applications?","answer":"Avoid managing servers\nFlexible scaling by demand\nPay for time and resources it takes to execute your code"},{"question":"What is Azure Cloud Service?","answer":"By creating a cloud service, you can deploy a multi-tier web application in Azure, defining multiple roles to distribute processing and allow flexible scaling of your application. A cloud service consists of one or more web roles and\/or worker roles, each with its own application files and configuration. Azure Websites and Virtual Machines also enable web applications on Azure. The main advantage of cloud services is the ability to support more complex multi-tier architectures"},{"question":"What is a web role?","answer":"A web role provides a dedicated Internet Information Services (IIS) web-server used for hosting front-end web applications."},{"question":"What is Azure Functions?","answer":"Azure Functions is a solution for easily running small pieces of code, or \"functions,\" in the cloud. We can write just the code we need for the problem at hand, without worrying about a whole application or the infrastructure to run it and use language of our choice such as C#, F#, Node.js, Java, or PHP. Azure Functions lets us develop serverless applications on Microsoft Azure."},{"question":"What is serverless computing?","answer":"Serverless computing is the abstraction of servers, infrastructure, and operating systems. When you build serverless apps you don\u2019t need to provision and manage any servers, so you can take your mind off infrastructure concerns. Serverless computing is driven by the reaction to events and triggers happening in near-real-time\u2014in the cloud. As a fully managed service, server management and capacity planning are invisible to the developer and billing is based just on resources consumed or the actual time your code is running."},{"question":"Is Azure Table Storage Nosql?","answer":"Azure Table storage is a service that stores structured NoSQL data in the cloud, providing a key\/attribute store with a schemaless design."},{"question":"What is Kudu?","answer":"Every Azure App Service web application includes a \"hidden\" service site called Kudu.Kudu Console for example is a debugging service for Azure platform which allows you to explore your web app and surf the bugs present on it, like deployment logs, memory dump, and uploading files to your web app, and adding JSON endpoints to your web apps, etc."},{"question":"What is a role instance?","answer":"A role instance is a virtual machine on which the application code and role configuration run. A role can have multiple instances, defined in the service configuration file."},{"question":"What is a guest operating system?","answer":"The guest operating system for a cloud service is the operating system installed on the role instances (virtual machines) on which your application code runs."},{"question":"What is Azure Blob Storage?","answer":"Azure Blob storage is Microsoft's object storage solution for the cloud. Blob storage is optimized for storing massive amounts of unstructured data, such as text or binary data. Azure Storage offers three types of blobs:\n* Block blobs store text and binary data, up to about 4.7 TB. Block blobs are made up of blocks of data that can be managed individually.\n* Append blobs are made up of blocks like block blobs, but are optimized for append operations. Append blobs are ideal for scenarios such as logging data from virtual machines.\n* Page blobs store random access files up to 8 TB in size. Page blobs store the VHD files that back VMs."},{"question":"How to include external dll into Azure Function?","answer":"Add the assembly to the BIN directory using KUDU\nInclude the assembly and code the Azure Function to use it\nAdd the using declaration so that the methods within the DLL can be accessed. \n```csr \"D:\\home\\site\\wwwroot\\GreetingsAssemblyReference\\bin\\benjamin.dll\"using benjamin;\n```"},{"question":"What is an Azure subscription?","answer":"A Windows Azure subscription grants you access to Windows Azure services and to the Windows Azure Platform Management Portal. A Windows Azure subscription has two aspects: \n* The Windows Azure account, through which resource usage is reported\n* Services are billed."},{"question":"What is Azure ARM?","answer":"The Azure Resource Manager (ARM) is the service used to provision resources in your Azure subscription. It was first announced at Build 2014 when the new Azure portal ( portal.azure.com) was announced and provides a new set of API's that are used to provision resources. The ARM is:\nTemplate-driven \u2013 Using templates to deploy all resources.\nDeclarative \u2013 You declare the resources you want to have instead of imperative where you need to make rules.\nIdempotent \u2013 You can deploy the template over and over again without affecting the current state of resources.\nMulti-service \u2013 All services can be deployed using Azure Resource Manager, Website, Storage, VMs etc.\nMulti region - You can choose in which region you would like to deploy the resources.\nExtensible \u2013 Azure Resource Manager is extensible with more resource providers and thus resources."},{"question":"Explain the Azure ARM Templates","answer":"An Azure Resource Template is a JSON file used to deploy resources with Azure Resource Manager. It defines:\n* Parameters\n* Variables\n* Resources - the actual resources that you are going to deploy or update\n* Outputs"},{"question":"What is a cloud service role?","answer":"A cloud service role is comprised of application files and a configuration. A cloud service can have two types of roles:\n* web role\n* worker role"},{"question":"What is Azure Redis Cache?","answer":"Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker. Azure Redis Cache is based on the popular open-source Redis cache. It gives you access to a secure, dedicated Redis cache, managed by Microsoft, and accessible from any application within Azure. It supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs and geospatial indexes with radius queries."},{"question":"What is Azure Service Fabric?","answer":"Azure Service Fabric is a distributed systems platform that makes it easy to package, deploy, and manage scalable and reliable micro-services. Service Fabric also addresses the significant challenges in developing and managing cloud applications. Developers and administrators can avoid complex infrastructure problems and focus on implementing mission-critical, demanding workloads that are scalable, reliable, and manageable. Service Fabric represents the next-generation middleware platform for building and managing these enterprise-class, tier-1, cloud-scale applications."},{"question":"How can I use applications with Azure AD that I\u2019m using on-premises?","answer":"Azure AD gives you an easy and secure way to connect to the web applications you choose. You can access these applications in the same way you access your SaaS apps in Azure AD, no need for a VPN to change your network infrastructure."},{"question":"What is Azure Resource Group?","answer":"Resource groups (RG) in Azure is an approach to group a collection of assets in logical groups for easy or even automatic provisioning, monitoring, and access control, and for more effective management of their costs. The underlying technology that powers resource groups is the Azure Resource Manager (ARM)."},{"question":"What Is Azure Key Vault?","answer":"Key Vault help you safeguard cryptographic keys and other secrets used by your applications whenever they are On-Premise or in the cloud. More and more services on Azure are now integrating Azure Key Vault as their secret\/key source for things like deployments, data or even disk encryption."},{"question":"What is a Blob Container?","answer":"A container organizes a set of blobs, similar to a folder in a file system. All blobs reside within a container. A storage account can contain an unlimited number of containers, and a container can store an unlimited number of blobs.[\u2b06] Behavioral Interview Questions"},{"question":"Why do you want to work for X company?","answer":"The interviewer is looking for similar things whether asking about company or position. The hiring manager wants to:\nLearn about your career goals and how this position fits into your plan\nMake sure that you are sincerely interested in the job and will be motivated to perform if hired\nFind out what you know about the company, industry, position (and if you took the time to research)\nUnderstand your priorities and preferences \u2014 which aspects of the company and\/or job are appealing to you and why?"},{"question":"Why do you want to leave your current\/last company?","answer":"Here are some things your interviewer is likely looking for:\nDid you leave for a good reason?\nDid you leave voluntarily?\nDid you leave on good terms?\nWhat are your work values?\n[\u2b06] Big Data Interview Questions"},{"question":"What is the meaning of big data and how is it different?","answer":"Big data is the term to represent all kind of data generated on the internet. On the internet over hundreds of GB of data is generated only by online activity. Here, online activity implies web activity, blogs, text, video\/audio files, images, email, social network activity, and so on. Big data can be referred to data created from all these activities. Data generated online is mostly in unstructured form. Big data will also include transactions data in the database, system log files, along with data generated from smart devices such as sensors, IoT, RFID tags, and so on in addition to online activities.Big data needs specialized systems and software tools to process all unstructured data. In fact, according to some industry estimates almost 85% of data generated on the internet is unstructured. Usually, relational databases have a structured format and the database is centralized. Hence, with RDBMS processing can be quickly done using a query language such as SQL. On the other hand, big data is very large and is distributed across the internet and hence processing big data will need distributed systems and tools to extract information from them. Big data needs specialized tools such as Hadoop, Hive, or others along with high-performance hardware and networks to process them."},{"question":"What are the characteristics of big data?","answer":"Big data has three main characteristics: Volume, Variety, and Velocity.\nVolume characteristic refers to the size of data. Estimates show that over 3 million GB of data is generated every day. Processing this volume of data is not possible in a normal personal computer or in a client-server network in an office environment with limited compute bandwidth and storage capacities. However, cloud services provide solutions to handle big data volumes and process them efficiently using distributed computing architectures.Variety characteristic refers to the format of big data \u2013 structured or unstructured. Traditional RDBMS fits into the structured format. An example of unstructured data format is, a video file format, image files, plain text format, from web document or standard MS Word documents, all have unique formats, and so on. Also to note, RDBMS does not have the capacity to handle unstructured data formats. Further, all this unstructured data must be grouped and consolidated which creates the need for specialized tools and systems. In addition new, data is added each day, or each minute and data grows continuously. Hence big data is more synonymous with variety.The velocity characteristic refers to the speed at which data is created and the efficiency required to process all the data. For example, Facebook is accessed by over 1.6 billion users in a month. Likewise, there are other social network sites, YouTube, Google services, etc. Such data streams must be processed using queries in real time and must be stored without data loss. Thus, velocity characteristic is important in big data processing.\nIn addition, other characteristics include veracity and value. Veracity will determine the dependability and reliability of data and value is the value derived by organizations from big data processing."},{"question":"Why is big data important for organizations?","answer":"This is the basic Big Data interview question asked in an interview. Big data is important because by processing big data, organizations can obtain insight information related to:\nCost reduction\nImprovements in products or services\nTo understand customer behaviour and markets\nEffective decision making\nTo become more competitive"},{"question":"Name some tools or systems used in big data processing?","answer":"Big data processing and analysis can be done using:\n * Hadoop\n * Hive\n * Pig\n * Mahout\n * Flume"},{"question":"How can big data support organizations?","answer":"Big data has the potential to support organizations in many ways. Information extracted from big data can be used in:\n * Better coordination with customers and stakeholders and to resolve problems\n * Improve reporting and analysis for product or service improvements\n * Customize products and services to selected markets\n * Ensure better information sharing\n * Support in management decisions\n * Identify new opportunities, product ideas, and new markets\n * Gather data from multiple sources and archive them for future reference\n * Maintain databases, systems\n * Determine performance metrics\n * Understand interdependencies between business functions\n * Evaluate organizational performance"},{"question":"Explain how big data can be used to increase business value?","answer":"While understanding the need for analyzing big data, such analysis will help businesses to identify their position in markets, and help businesses to differentiate themselves from their competitors. For example, from the results of big data analysis, organizations can understand the need for customized products or can understand potential markets towards increasing revenue and value. Analyzing big data will involve grouping data from various sources to understand trends and information related to business. When big data analysis is done in a planned manner by gathering data from the right sources, organizations can easily generate business value and revenue by almost 5% to 20%. Some examples of such organizations are Amazon, Linkedin, WalMart, and many others."},{"question":"What is big data solution implementation?","answer":"Big data solutions are implemented at a small scale first, based on a concept as appropriate for the business. From the result, which is a prototype solution, the business solution is scaled further. This is the most popular Big Data interview questions asked in a Big Data interview Some of the best practices followed in the industry include:\n * To have clear project objectives and to collaborate wherever necessary\n * Gathering data from the right sources\n * Ensure the results are not skewed because this can lead to wrong conclusions\n * Be prepared to innovate by considering hybrid approaches in processing by including data from structured and unstructured types, include both internal and external data sources\n * Understand the impact of big data on existing information flows in the organization"},{"question":"What are the steps involved in big data solutions?","answer":"Big data solutions follow three standard steps in its implementation. They are:Data ingestion: This step will define the approach to extract and consolidate data from multiple sources. For example, data sources can be social network feeds, CRM, RDBMS, etc. The data extracted from different sources is stored in a Hadoop distributed file system (HDFS).Data storage: This is the second step, the extracted data is stored. This storage can be in HDFS or HBase (NoSQL database).Process the data: This is the last step. The data stored must be processed. Processing is done using tools such as Spark, Pig, MapReduce, and others.[\u2b06] Blockchain Interview Questions"},{"question":"What is blockchain?","answer":"Blockchain is a secure distributed ledger (data structure or database) that maintains a continuously growing list of ordered records, called \u201cblocks\u201d,  that are linked using cryptography. Each block contains a cryptographic hash of the previous block, a timestamp, and transaction data.By design, a blockchain is resistant to modification of the data. It is \"an open, distributed ledger that can record transactions between two parties efficiently and in a verifiable and permanent way\".Once recorded, the data in any given block cannot be altered retroactively without alteration of all subsequent blocks, which requires consensus of the network majority."},{"question":"Explain the common structure of blockchains","answer":"Blockchains are composed of three core parts:\n* Block: A list of transactions recorded into a ledger over a given period. The size, period, and triggering event for blocks is different for every blockchain.\n* Chain: A hash that links one block to another, mathematically \u201cchaining\u201d them together. \n* Network: The network is composed of \u201cfull nodes.\u201d Think of them as the computer running an algorithm that is securing the network. Each node contains a complete record of all the transactions that were ever recorded in that blockchain."},{"question":"What is the blockchain data structure?","answer":"Basically the blockchain data structure is explained as a back-linked record of blocks of transactions, which is ordered. It can be saved as a file or in a plain database. Each block can be recognized by a hash, created utilizing the SHA256 cryptographic hash algorithm on the header of the block. Each block mentions a former block, also identified as the parent block, in the \u201cprevious block hash\u201d field, in the block header."},{"question":"What is the Genesis Block?","answer":"The first block in any blockchain is termed the genesis block. If you start at any block and follow the chain backwards chronologically, you will arrive at the genesis block. The genesis block is statically encoded within the client software, that it cannot be changed. Every node can identify the genesis block\u2019s hash and structure, the fixed time of creation, and the single transactions within. Thus every node has a secure \u201croot\u201d from which is possible to build a trusted blockchain on."},{"question":"What is blockchain transaction?","answer":"Transactions are the things that give a blockchain purpose. They are the smallest building blocks of a blockchain system. Transactions generally consist of:\n* a recipient address, \n* a sender address, \n* and a value. This is not too different from a standard transaction that you would find on a credit card statement.A transaction changes the state of the agreed-correct blockchain. A blockchain is a shared, decentralized, distributed state machine. This means that all nodes (users of the blockchain system) independently hold their own copy of the blockchain, and the current known \"state\" is calculated by processing each transaction in order as it appears in the blockchain."},{"question":"What is the purpose of a blockchain node?","answer":"A blockchain exists out of blocks of data. These blocks of data are stored on nodes (compare it to small servers). Nodes can be any kind of device (mostly computers, laptops or even bigger servers). Nodes form the infrastructure of a blockchain. All nodes on a blockchain are connected to each other and they constantly exchange the latest blockchain data with each other so all nodes stay up to date. They store, spread and preserve the blockchain data, so theoretically a blockchain exists on nodes. A full node is basically a device (like a computer) that contains a full copy of the transaction history of the blockchain."},{"question":"Why does Blockchain need coins or tokens?","answer":"Tokens\/Coins are used as a medium of exchange between the states. They are digital assets built in to perform a specific function within a blockchain.When someone does a transaction, there is a change of state, and coins are moved from one address to another address. Apart from that, transactions contain some additional data; this data can be mutated through the change of state. For this reason, blockchains need coins or tokens to incentivize the participants to join their networks."},{"question":"What is proof-of-work?","answer":"A proof of work is a piece of data which is difficult (costly, time-consuming) to produce but easy for others to verify and which satisfies certain requirements. Producing a proof of work can be a random process with low probability so that a lot of trial and error is required on average before a valid proof of work is generated. Difficulty is a measure of how difficult it is to find a hash below a given target."},{"question":"What is deterministic behavior?","answer":"If A + B = C, then no matter what the circumstances, A+B will always be equal to C. That is called deterministic behavior.Hash functions are deterministic, meaning A\u2019s hash will always be H(A).[\u2b06] Bootstrap Interview Questions"},{"question":"Explain Bootstrap?","answer":"Bootstrap is a platform for web development that is based on front-end framework\nand creates exceptional responsive designs. It is fast, easy and has multiple\ntemplates designed using HTML, and CSS. These templates are used for forms,\ntables, buttons, typography, modals, tables, navigation, carousels and images.\nBootstrap also has Javascript plugins, which are optional. Bootstrap is\npreferred for developing mobile web applications."},{"question":"Explain what is Bootstrap?","answer":"Bootstrap is CSS\/Javascript framework for building the rich web applications with\nminimal effort. This framework emphasis more on building mobile web\napplications."},{"question":"Explain the two codes that are used for code display in Bootstrap?","answer":"There are two simple ways to display a code in Bootstrap:\n<code> tag: In case you wish to display an inline code\n<pre> tag: In case you have a code with several lines or even a block element"},{"question":"What are the types of layout available in Bootstrap?","answer":"In Bootstrap there are two types of Layout available\nFluid Layout: Fluid layout is used when you want to create a app that is 100%\nwide and use up all the width of the screen\nFixed Layout: For a standard screen you will use fixed layout (940 px) option"},{"question":"What will be the output of the following HTML code","answer":"Consider:\n```js\nItem 1\nItem 2\n\nNested item 2.1\nNested item 2.2\nNested item 2.3\n\nItem 3\n```\nWhat will be the output of the following HTML code?If we apply .list-unstyled to a list, it will remove the default list-style and left margin on the list items. But only for the immediate children. Main list items will be without any style, and nested list items will still have default unordered nested list-style."},{"question":"Explain why you prefer Bootstrap for website development?","answer":"Bootstrap has features that are way better than other web development platforms.\nIt provides an extensive browser support for almost every known browser such as\nOpera, Chrome, Firefox, Safari etc. With adequate knowledge of CSS and HTML, web\ndevelopment becomes easy on Bootstrap. Also, it supports mobile applications\nwith the help of responsive design. It can adjust CSS as per the device, screen\nsize etc. Instead of creating multiple files, it creates only a single file,\nwhich reduces any extra effort by the developer."},{"question":"What are the key components of Bootstrap?","answer":"In total, there are five key components of Bootstrap i.e. CSS (multiple CSS\nfiles), Scaffolding (essential for the basic system that consist of Grid\nsystem, background and link styles), Layout Components: (shares a list of\nall layouts), JavaScript Plugins (includes jQuery and JavaScript plugins)\nand Customization (Allows customization of all components for a desired\nframework)"},{"question":"How many types of layout are available in Bootstrap?","answer":"There are two major layouts for Bootstrap i.e. Fluid Layout and Fixed Layout.\nFluid layout is necessary for creating an app that is 100 % wider and covers all\nthe screen width. Fixed Layout is used only for a standard screen (940px). Both\nlayouts can be used for creating a responsive design."},{"question":"Why do we use Jumbotron in Bootstrap?","answer":"Jumbotron has a very basic function in bootstrap i.e. highlighting a content. It\ncould either be a slogan\/uvp (unique value proposition) or probably a headline. It increases the heading size\nand gives a margin for content of the landing page. In order to implement\nJumbotron in a Bootstrap use:```html\n \n\n```\n\nJumbotron can have any valid HTML along with other functions and classes.\n\n\n#### What is Twitter Bootstrap? \nBootstrap is a sleek, intuitive, and powerful mobile first front-end framework\nfor faster and easier web development. It uses HTML, CSS and Javascript.\n\n\n#### Explain why to choose Bootstrap for building the websites? \nThere are few reason why we choose Bootstrap for building websites\n\n* Mobile Support: For mobile devices it provides full support in one single file\nrather than in separate file. It supports the responsive design including\nadjusting the CSS based on the different types of device, size of the screen\netc. It reduces extra effort for developers.\n* Easy to learn: Writing application in bootstrap is easy if you know CSS and HTML\n* Browser Support: It supports all the popular browsers like Firefox, Opera,\nSafari, IE etc.\n\n\n#### What global styles are applied as a part of Bootstrap\u2019s default typography? \nBootstrap sets the global default font-size to `14px`, with a line-height of `1.428`. The default font is changed to `Helvetica` and `Arial` with `sans serif` fallback. \n\nAll these styles are applied to the `` and all paragraphs, with the addition that `` (paragraphs) receive a bottom margin of half their computed line-height, which is `10px` by default.\n\n\n#### What is the procedure to create Nav elements in Bootstrap? \nThere are several styling navigation elements available on bootstrap and every\nstyle uses the same function i.e. class `.nav`. In order to create tabs or a\ntabular navigation, you can begin with a simple or rather basic unordered list\nusing the function class `.nav`. To add the tabs the function class `.nav-tabs` can\nbe used.\n\n\n####  What are Glyphicons? \nGlyphicons are icon fonts which you can use in your web projects. Glyphicons\nHalflings are not free and require licensing, however their creator has made\nthem available for Bootstrap projects free of cost.\n\nTo use the icons, simply use the following code just about anywhere in your\ncode. Leave a space between the icon and text for proper padding.\n\n```html\n\n```\n\n\n#### When to use \"lead\" in Bootstrap? \nTo add some emphasis to a paragraph, add class `.lead`. This will give you\nlarger font size, lighter weight, and a taller line height.\n\n\n#### Explain the typography and links in Bootstrap. \nBootstrap sets a basic global display (background), typography, and link styles:\n\n* **Basic Global display** \u2212 sets *background-color: #fff;* on the **\n* **Typography** \u2212 uses the *@font-family-base*, *@font-size-base*,\nand *@line-height-base* attributes as the typographic base\n* **Link styles** \u2212 sets the global link color via attribute *@link-color* and\napply link underlines only on *:hover*.\n\n\n#### How do you make images responsive? \nBootstrap 3 allows to make the images responsive by adding a class\n`.img-responsive` to the `` tag. This class applies `max-width: 100%;` and\n`height: auto;` to the image so that it scales nicely to the parent element.\n\n\n#### What is missing for a tooltip to show properly? \nConsider:\n```html\nHover over me\n```\nWhat is missing for a tooltip to show properly?\n\n**Answer**\n\nBootstrap\u2019s Tooltip plugin is not CSS-only, like other plugins are. For performance reasons, the Tooltip plugin is opt-in, and to use it you must initialize it using JavaScript with the following example code:\n```js\n$(function () {\n  $('[data-toggle=\"tooltip\"]').tooltip();\n});\n```\n\n\n## [[\u2b06]](#toc) C# Interview Questions\n#### What is C#? \nC# is the programming language for writing Microsoft .NET applications. C# provides the rapid application development found in Visual Basic with the power of C++. Its syntax is similar to C++ syntax and meets 100% of the requirements of OOPs like the following: \n* Abstraction\n* Encapsulation\n* Polymorphism\n* Inheritance\n\n\n#### What is the difference between \"continue\" and \"break\" statements in C#? \n* using **break** statement, you can jump out of a loop\n* using **continue** statement, you can jump over one iteration and then resume your loop execution\n\n\n#### What are property Accessors? \nThe _get_ and _set_ portions or blocks of a property are called accessors. These are useful to restrict the accessibility of a property, the set accessor specifies that we can assign a value to a private field in a property and without the set accessor property it is like a read-only field. By the get accessor we can access the value of the private field, in other words it returns a single value. A Get accessor specifies that we can access the value of a field publically.\n\n\n#### What is an Object? \nAccording to MSDN, \"_a class or struct definition is like a blueprint that specifies what the type can do. An object is basically a block of memory that has been allocated and configured according to the blueprint. A program may create many objects of the same class. Objects are also called instances, and they can be stored in either a named variable or in an array or collection. Client code is the code that uses these variables to call the methods and access the public properties of the object. In an object-oriented language such as C#, a typical program consists of multiple objects interacting dynamically\"._\n\nObjects helps us to access the member of a class or struct either they can be fields, methods or properties, by using the dot. \n\n\n#### What is enum in C#? \nAn **enum** is a value type with a set of related named constants often referred to as an enumerator list. The enum keyword is used to declare an enumeration. It is a primitive data type, which is user defined. An enum is used to create numeric constants in .NET framework. All the members of enum are of enum type. Their must be a numeric value for each enum type.\n\n**Some points about enum**\n\n* Enums are enumerated data type in C#.  \n* Enums are strongly typed constant. They are strongly typed, i.e. an enum of one type may not be implicitly assigned to an enum of another type even though the underlying value of their members are the same.  \n* Enumerations (enums) make your code much more readable and understandable.  \n* Enum values are fixed. Enum can be displayed as a string and processed as an integer.  \n* The default type is int, and the approved types are byte, sbyte, short, ushort, uint, long, and ulong.  \n* Every enum type automatically derives from System.Enum and thus we can use System.Enum methods on enums.  \n* Enums are value types and are created on the stack and not on the heap.\n\n\n#### How is Exception Handling implemented in C#? \nException handling is done using four keywords in C#:\n\n*   **try** \u2013 Contains a block of code for which an exception will be checked.\n*   **catch** \u2013 It is a program that catches an exception with the help of exception handler.\n*   **finally** \u2013 It is a block of code written to execute regardless whether an exception is caught or not.\n*   **Throw** \u2013 Throws an exception when a problem occurs.\n\n\n#### Can \"this\" be used within a static method? \nWe can't use _this_ in static method because keyword _this_ returns a reference to the current instance of the class containing it. Static methods (or any static member) do not belong to a particular instance. They exist without creating an instance of the class and call with the name of a class not by instance so we can't use this keyword in the body of static Methods, but in case of Extension Methods we can use it as the functions parameters.\n\n\n#### Define Property in C#? \n**Properties** are members that provide a flexible mechanism to read, write or compute the values of private fields, in other words by the property we can access private fields. In other words we can say that a property is a return type function\/method with one parameter or without a parameter. These are always public data members. It uses methods to access and assign values to private fields called accessors.\n\n\n#### What is Boxing and Unboxing? \nBoxing and Unboxing both are used for type conversion but have some difference:\n\n* **Boxing** - Boxing is the process of converting a value type data type to the object or to any interface data type which is implemented by this value type. When the CLR boxes a value means when CLR is converting a value type to Object Type, it wraps the value inside a System.Object and stores it on the heap area in application domain.\n\n* **Unboxing** - Unboxing is also a process which is used to extract the value type from the object or any implemented interface type. Boxing may be done implicitly, but unboxing have to be explicit by code. \n\nThe concept of boxing and unboxing underlines the C# unified view of the type system in which a value of any type can be treated as an object.\n\n\n#### What is the difference between string and StringBuilder in c#? \n**String**\n* It's an immutable object that hold string value.\n* Performance wise string is slow because its' create a new instance to override or change the previous value.\n* String belongs to System namespace.\n\n**StringBuilder**\n* StringBuilder is a mutable object.  \n* Performance wise StringBuilder is very fast because it will use same instance of StringBuilder object to perform any operation like insert value in existing string.  \n* StringBuilder belongs to System.Text.Stringbuilder namespace.\n\n\n#### What are partial classes? \nA **partial** class is only use to splits the definition of a class in two or more classes in a same source code file or more than one source files. You can create a class definition in multiple files but it will be compiled as one class at run time and also when you'll create an instance of this class so you can access all the methods from all source file with a same object. Partial classes can be create in the same namespace it's doesn't allowed to create a partial class in different namespace. \n\n\n#### Filter out the first 3 even numbers from the list using LINQ \n```csharp\nvar evenNumbers = List\n   .Where(x => x % 2 ==0)\n   .Take(3)\n```\n\n\n#### Why to use \u201cfinally\u201d block in C#? \n**Finally** block will be executed irrespective of exception. So while executing the code in try block when exception is occurred, control is returned to catch block and at last `finally` block will be executed. So closing connection to database \/ releasing the file handlers can be kept in `finally` block.\n\n\n#### What are nullable types in C#? \nC# provides a special data types, the **nullable types**, to which you can assign normal range of values as well as null values.\n\nFor example, you can store any value from -2,147,483,648 to 2,147,483,647 or null in a `Nullable` variable. Similarly, you can assign true, false, or null in a `Nullable` variable.\n\n\n#### What are generics in C#? \n**Generics** allow you to delay the specification of the data type of programming elements in a class or a method, until it is actually used in the program. In other words, generics allow you to write a class or method that can work with any data type.\n\n\n#### What is Managed or Unmanaged Code? \n* **Managed Code**  - The code, which is developed in .NET framework is known as managed code. This code is directly executed by CLR with the help of managed code execution. Any language that is written in .NET Framework is managed code.\n* **Unmanaged Code** - The code, which is developed outside .NET framework is known as unmanaged code. Applications that do not run under the control of the CLR are said to be unmanaged, and certain languages such as C++ can be used to write such applications, which, for example, access low - level functions of the operating system. Background compatibility with the code of VB, ASP and COM are examples of unmanaged code.\n\n\n\n#### What are reference types in C#? \nThe **reference types** do not contain the actual data stored in a variable, but they contain a reference to the variables.\n\nIn other words, they refer to a memory location. Using multiple variables, the reference types can refer to a memory location. If the data in the memory location is changed by one of the variables, the other variable automatically reflects this change in value. Example of built-in reference types are: object, dynamic, and string.\n\n\n#### What you understand by Value types and Reference types in C#.Net? \nIn C# data types can be of two types: **Value Types** and **Reference Types**. Value type variables contain their object (or data) directly. If we copy one value type variable to another then we are actually making a copy of the object for the second variable. Value Type member will located into Stack and reference member will located in Heap always.  \n\n\n#### What is namespace in C#? \nA **namespace** is designed for providing a way to keep one set of names separate from another. The class names declared in one namespace does not conflict with the same class names declared in another.\n\n\n#### What is Serialization? \n**Serialization** means saving the state of your object to secondary memory, such as a file.\n\n1.  Binary serialization (Save your object data into binary format).  \n2.  Soap Serialization (Save your object data into binary format; mainly used in network related communication).  \n3.  XmlSerialization (Save your object data into an XML file).\n\n\n#### In how many ways you can pass parameters to a method? \nThere are three ways that parameters can be passed to a method:\n\n*   **Value parameters** \u2212 This method copies the actual value of an argument into the formal parameter of the function. In this case, changes made to the parameter inside the function have no effect on the argument.\n*   **Reference parameters** \u2212 This method copies the reference to the memory location of an argument into the formal parameter. This means that changes made to the parameter affect the argument.\n*   **Output parameters** \u2212 This method helps in returning more than one value.\n\n\n#### Can you return multiple values from a function in C#? \nYes! Using output parameters. A return statement can be used for returning only one value from a function. However, using output parameters, you can return two values from a function.\n\n\n#### What is LINQ in C#? \n**LINQ** stands for Language Integrated Query. LINQ has a great power of querying on any source of data. The data source could be collections of objects, database or XML files. We can easily retrieve data from any object that implements the `IEnumerable` interface. \n\n\n#### Can multiple catch blocks be executed? \nNo, Multiple catch blocks can't be executed. Once the proper catch code executed, the control is transferred to the finally block and then the code that follows the finally block gets executed.\n\n\n#### What is an Abstract Class? \nAn **Abstract class** is a class which is denoted by abstract keyword and can be used only as a Base class. An Abstract class should always be inherited. An instance of the class itself cannot be created. If we do not want any program to create an object of a class, then such classes can be made abstract.\n\nAny method in the abstract class does not have implementations in the same class. But they must be implemented in the child class.\n\n\n#### What are Custom Exceptions? \nSometimes there are some errors that need to be handeled as per user requirements. Custom exceptions are used for them and are used defined exceptions.\n\n\n#### What is the difference between a struct and a class in C#? \nClass and struct both are the user defined data type but have some major difference:  \n**  \nStruct**\n\n* The struct is value type in C# and it inherits from System.Value Type.\n* Struct is usually used for smaller amounts of data.\n* Struct can't be inherited to other type.\n* A structure can't be abstract.\n* No need to create object by new keyword.\n* Do not have permission to create any default constructor.\n\n**Class**\n\n* The class is reference type in C# and it inherits from the System.Object Type.\n* Classes are usually used for large amounts of data.\n* Classes can be inherited to other class.\n* A class can be abstract type.\n* We can't use an object of a class with using new keyword.\n* We can create a default constructor.\n\n\n#### Why can't you specify the accessibility modifier for methods inside the interface? \nIn an interface, we have virtual methods that do not have method definition. All the methods are there to be overridden in the derived class. That's why they all are public.\n\n\n#### What are the different types of classes in C#? \nThe different types of class in C# are:\n\n*   **Partial class** \u2013 Allows its members to be divided or shared with multiple .cs files. It is denoted by the keyword _Partial._\n*   **Sealed class** \u2013 It is a class which cannot be inherited. To access the members of a sealed class, we need to create the object of the class.\u00a0 It is denoted by the keyword _Sealed_.\n*   **Abstract class** \u2013 It is a class whose object cannot be instantiated. The class can only be inherited. It should contain at least one method.\u00a0 It is denoted by the keyword _abstract._\n*   **Static class** \u2013 It is a class which does not allow inheritance. The members of the class are also static.\u00a0 It is denoted by the keyword _static_. This keyword tells the compiler to check for any accidental instances of the static class.\n\n\n#### What are dynamic type variables in C#? \nYou can store any type of value in the dynamic data type variable. Type checking for these types of variables takes place at run-time.\n\n\n## [[\u2b06]](#toc) CSS Interview Questions\n#### Explain the three main ways to apply CSS styles to a web page \nUsing the inline style attribute on an element\n```html\n\n\n\n```\nUsing a `\n\n```\nLoading an external CSS file using the `` tag\n```html\n\nCSS Refresher\n\n\n```\n\n\n#### What is CSS? \n**CSS** stands for **Cascading Style Sheets**. CSS is used to define styles for your web pages, including the design, layout and variations in display for different devices and screen sizes.\n\nCSS was intended to allow web professionals to separate the content and structure of a website's code from the visual design.\n\n\n#### How to use variables in Sass? \nThink of variables as a way to store information that you want to reuse throughout your stylesheet. You can store things like colors, font stacks, or any CSS value you think you'll want to reuse. Sass uses the `$` symbol to make something a variable.\n\n```css\n$font-stack:    Helvetica, sans-serif;\n$primary-color: #333;\n\nbody {\n  font: 100% $font-stack;\n  color: $primary-color;\n}\n```\n\n\n\n#### What is variable interpolation in Sass? Provide some examples.  \n If you want to use variables inside a string, you will have to use a process called **variable interpolation**. To use it you will have to wrap your variables in `#{}`. \n\nConsider:\n```css\n$name: 'Gajendar';\n$author: 'Author : $name'; \/\/ 'Author : $name'\n\n$author: 'Author : #{$name}';\n\/\/ 'Author : Gajendar'\n```\n\nThe interpolation method could be useful in situations where the value of a variable is determined by some conditional statements. \n\n\n#### What is a CSS rule? \nWeb browsers apply **CSS rules** to a document to affect how they are displayed. A CSS rule is formed from:\n\n* A **set of properties**, which have values set to update how the HTML content is displayed,\n* A **selector**, which selects the element(s) you want to apply the updated property values to.\n\nA set of CSS rules contained within a stylesheet determines how a webpage should look. \n\n\n#### What is DOM (Document Object Model) and how is it linked to CSS? \nThe *Document Object Model (DOM)* is a cross-platform and language-independent *application programming interface* that treats an HTML, XHTML, or XML document as a tree structure wherein each node is an object representing a part of the document. \n\nWith the Document Object Model, programmers can create and build documents, navigate their structure, and add, modify, or delete elements and content. The DOM specifies interfaces which may be used to manage XML or HTML documents. \n\nWhen a browser displays a document, it must combine the document's content with its style information. The browser converts HTML and CSS into the DOM (Document Object Model). The DOM represents the document in the computer's memory. It combines the document's content with its style.\n\n\n#### Have you played around with the new CSS Flexbox or Grid specs? \nYes. Flexbox is mainly meant for 1-dimensional layouts while Grid is meant for 2-dimensional layouts.\n\nFlexbox solves many common problems in CSS, such as vertical centering of elements within a container, sticky footer, etc. Bootstrap and Bulma are based on Flexbox, and it is probably the recommended way to create layouts these days. Have tried Flexbox before but ran into some browser incompatibility issues (Safari) in using `flex-grow`, and I had to rewrite my code using `inline-blocks` and math to calculate the widths in percentages, it wasn't a nice experience.\n\nGrid is by far the most intuitive approach for creating grid-based layouts (it better be!) but browser support is not wide at the moment.\n\n\n#### What is Sass? \n**Sass** or **Syntactically Awesome StyleSheets** is a *CSS* preprocessor that adds power and elegance to the basic language. It allows you to use variables, nested rules, mixins, inline imports, and more, all with a fully CSS-compatible syntax. Sass helps keep large stylesheets well-organized, and get small stylesheets up and running quickly.\n\nA *CSS preprocessor* is a scripting language that extends CSS by allowing developers to write code in one language and then compile it into CSS. \n\n\n\n#### List out the key features for Sass? \nKey features for Sass include\n\n* Full CSS3-compatible\n* Language extensions such as nesting, variables, and mixins\n* Many useful functions for manipulating colors and other values\n* Advanced features like control directives for libraries\n* Well-formatted, customizable output\n\n\n#### What existing CSS frameworks have you used locally, or in production? How would you change\/improve them? \n* **Bootstrap** - Slow release cycle. Bootstrap 4 has been in alpha for almost 2 years. Add a spinner button component, as it is widely used.\n* **Semantic UI** - Source code structure makes theme customization extremely hard to understand. Its unconventional theming system is a pain to customize. Hardcoded config path within the vendor library. Not well-designed for overriding variables unlike in Bootstrap.\n* **Bulma** - A lot of non-semantic and superfluous classes and markup required. Not backward compatible. Upgrading versions breaks the app in subtle manners.\n\n\n#### List out the data types that Sass supports \nSass supports seven main data types:\n\n* **Numbers** - most of the time they are accompanied by a unit of some sort but they are still technically numbers. You can perform basic mathematical operations on these values.\n\n```css\n$size: 18;                  \/\/ A number\n$px-unit: $size * 1px;      \/\/ A pixel measurement\n$px-string: $size + px;     \/\/ A string\n$px-number: $px-unit \/ 1px; \/\/ A number\n```\n* **Strings** - just like CSS, accepts both quoted and unquoted strings, even if they contain spaces\n\n```css\n$website: 'SitePoint'; \/\/ Stores SitePoint\n$name: 'Gajendar' + ' Singh';  \/\/ 'Gajendar Singh'\n$date:  'Month\/Year : ' + 3\/2016; \/\/ 'Month\/Year : 3\/2016'\n$date:  'Month\/Year : ' + (3\/2016); \/\/ 'Month\/Year : 0.00149' \n\/\/ This is because 3\/2016 is evaluated first.\n$variable: 3\/2016;      \/\/ Evaluated to 0.00149\n```\n* **Colors** - CSS color expressions come under the `color` data type. You can refer to the colors in hexadecimal notation, as `rgb`, `rgba`, `hsl` and `hsla` values or use native keywords like `pink`, `blue`, etc. \n\n```css\n$color: yellowgreen;           \/\/ #9ACD32\ncolor: lighten($color, 15%);    \/\/ #b8dc70\ncolor: darken($color, 15%);     \/\/ #6c9023\ncolor: saturate($color, 15%);   \/\/ #a1e01f\ncolor: desaturate($color, 15%); \/\/ #93ba45\ncolor: (green + red);           \/\/ #ff8000\n```\n* **Booleans** - has only two possible values: `true` and `false`\n\n```css\n$i-am-true: true;\n\nbody {\n  @if not $i-am-true {\n    background: rgba(255, 0, 0, 0.6);\n  } @else {\n    background: rgba(0, 0, 255, 0.6); \/\/ expected\n  }\n}\n```\n\n* **Null** -  is commonly used to define an empty state, neither `true` or `false`. This is typically the value you want to set when defining a variable without a value, only to prevent the parser from crashing.\n\n```css\n.foo {\n  content: type-of(null); \/\/ null\n  content: type-of(NULL); \/\/ string\n  $bar: 'foo' + null; \/\/ invalid null operation: \"foo plus null\u201d.\n}\n```\n\n* **Lists** - are just the Sass version of arrays. You can store multiple types of values in a list.\n\n```css\n$font-list: 'Raleway','Dosis','Lato'; \/\/ Three comma separated elements\n$pad-list: 10px 8px 12px; \/\/ Three space separated elements\n$multi-list: 'Roboto',15px 1.3em; \/\/ This multi-list has two lists.\n```\n* **Maps** -  Sass maps are like associative arrays. A map stores both keys and values associated with those keys.\n\n```css\n$styling: (\n  'font-family': 'Lato',\n  'font-size': 1.5em,\n  'color': tomato,\n  'background': black\n);\n\nh1 {\n  color: map-get($styling, 'color');\n  background: map-get($styling, 'background');\n}\n```\n\n\n#### Explain CSS sprites, and how you would implement them on a page or site. \n*CSS sprites* combine multiple images into one single larger image. It is commonly used technique for icons (Gmail uses it). \n\n* Use a sprite generator that packs multiple images into one and generate the appropriate CSS for it.\n* Each image would have a corresponding CSS class with `background-image`, `background-position` and `background-size` properties defined.\n* To use that image, add the corresponding class to your element.\n\n**Advantages**:\n\n* Reduce the number of HTTP requests for multiple images (only one single request is required per spritesheet). But with HTTP2, loading multiple images is no longer much of an issue.\n* Advance downloading of assets that won\u2019t be downloaded until needed, such as images that only appear upon `:hover` pseudo-states. Blinking wouldn't be seen.\n\n\n#### What Selector Nesting in Sass is used for? \nSass *let you nest* your CSS selectors in a way that follows the same visual hierarchy of your HTML.  CSS, on the other hand, doesn't have any visual hierarchy.\n\nConsider example (scss):\n```css\n.parent {\n  color: red;\n\n  .child {\n    color: blue;\n  }\n}\n```\nResult (css):\n```css\n.parent {\n  color: red;\n}\n\n.parent .child {\n  color: blue;\n}\n```\n\n\n\n#### Explain what is a @extend directive used for in Sass? \nUsing `@extend` lets you share a set of CSS properties from one selector to another. It helps keep your Sass very dry.\n\nConsider:\n```css\n%message-shared {\n  border: 1px solid #ccc;\n  padding: 10px;\n  color: #333;\n}\n\n.message {\n  @extend %message-shared;\n}\n\n.success {\n  @extend %message-shared;\n  border-color: green;\n}\n\n.error {\n  @extend %message-shared;\n  border-color: red;\n}\n\n.warning {\n  @extend %message-shared;\n  border-color: yellow;\n}\n```\nCSS output:\n```css\n.message, .success, .error, .warning {\n  border: 1px solid #cccccc;\n  padding: 10px;\n  color: #333;\n}\n\n.success {\n  border-color: green;\n}\n\n.error {\n  border-color: red;\n}\n\n.warning {\n  border-color: yellow;\n}\n```\n\n\n\n\n#### Explain the CSS \u201cbox model\u201d and the layout components that it consists of \nThe CSS box model is a rectangular layout paradigm for HTML elements that consists of the following:\n\n* **Content** - The content of the box, where text and images appear\n* **Padding** - A transparent area surrounding the content (i.e., the amount of space between the border and the content)\n* **Border** - A border surrounding the padding (if any) and content\n* **Margin** - A transparent area surrounding the border (i.e., the amount of space between the border and any neighboring elements)\n\n\n#### What is the difference between classes and IDs in CSS? \n* **IDs**\u200a\u2014\u200aMeant to be unique within the document. Can be used to identify an element when linking using a fragment identifier. Elements can only have one id attribute.\n\n* **Classes**\u200a\u2014\u200aCan be reused on multiple elements within the document. Mainly for styling and targeting elements.\n\n\n#### Describe floats and how they work \n*Float* is a CSS positioning property. Floated elements remain a part of the flow of the web page. This is distinctly different than page elements that use absolute positioning. Absolutely positioned page elements are removed from the flow of the webpage.\n\n```css\n#sidebar {\n  float: right; \/\/ left right none inherit          \n}\n```\nThe CSS clear property can be used to be positioned below `left`\/`right`\/`both` floated elements.\n\n\n## [[\u2b06]](#toc) Career Interview Questions\n## [[\u2b06]](#toc) Clojure Interview Questions\n## [[\u2b06]](#toc) Code Problems Interview Questions\n#### Test divisors of three \n**Details:**\nYou will be given 2 parameters: a low and high number. Your goal is to print all numbers between low and high, and for each of these numbers print whether or not the number is divisible by 3. If the number is divisible by 3, print the word \"div3\" directly after the number.\n\nWe'll solve this problem by first creating a loop that will print each number from low to high. Once we have the code for that written, we'll add a conditional that will check if the number is evenly divisible by 3 by using the mod operator.\n\n```js\nfunction test_divisors(low, high) {\n\n  \/\/ we'll store all numbers and strings within an array\n  \/\/ instead of printing directly to the console\n  var output = [];\n\n  for (var i = low; i <= high; i++) {\n\n    \/\/ simply store the current number in the output array\n    output.push(i);\n\n    \/\/ check if the current number is evenly divisible by 3\n    if (i % 3 === 0) { output.push('div3'); }\n\n  }\n\n  \/\/ return all numbers and strings\n  return output;\n\n}\n\ntest_divisors(2, 10);\n```\n\n\n#### Sum of Array Plus One \n**Details:**\nWrite a function that takes an array of integers and returns the sum of the integers after adding 1 to each.\n\n```js\n\/\/ ES5 method is nice and clean\nexports.es5 = function (array) {\n  return array.reduce(function (memo, num) {\n    return memo + num;\n  }, array.length);\n};\n\n\/\/ Without array.reduce method isn't much different\nexports.iterative = function (array) {\n  var result = array.length;\n\n  for (var i = 0; i < array.length; i++) {\n    result += array[i];\n  }\n\n  return result;\n};\n```\n\n\n#### String Rotation \n**Details:**\nFind out if a string is a rotation of another string. E.g. `ABCD` is a rotation of `BCDA` but not `ACBD`.\n\nFirst make sure `a` and `b` are of the same length. Then check to see if `b` is a substring of `a` concatenated with `a`:\n\n```js\nmodule.exports = function (a, b) {\n  return a.length === b.length && (a + a).indexOf(b) > -1;\n};\n```\n\n\n\n\n#### Oddball sum \n**Details:**\nWrite a function called `oddball_sum` which takes in a list of numbers and returns the sum of all the odd elements. Try to solve with and without `reduce` function.\n\nTo solve this challenge we'll simply loop through the array while maintaining a final count, and every time an odd number is encountered we'll add it to the count.\n\nWithout `reduce`:\n```js\nfunction oddball_sum(nums) {\n\n  \/\/ final count of all odd numbers added up\n  var final_count = 0;\n\n  \/\/ loop through entire list\n  for (var i = 0; i < nums.length; i++) {\n\n    \/\/ we divide by 2, and if there is a remainder then\n    \/\/ the number must be odd so we add it to final_count\n    if (nums[i] % 2 === 1) {\n      final_count += nums[i]\n    }\n\n  }\n\n  return final_count;\n\n}\n\noddball_sum([1, 2, 3, 4, 5]); \n```\n\nWith `reduce`:\n\n```js\nfunction oddball_sum(nums) {\n  return nums.reduce(function(total, item){\n    if (item % 2 === 1) {\n        return total += item;\n    }\n    return total;\n  });\n}\n```\n\n\n#### Simple clock angle \n**Details:**\nYou will be given a number `N` that represents where the minute hand currently is on a clock. Your program should return the angle that is formed by the minute hand and the `12` o'clock mark on the clock.\n\nIf the input is `15` then your program should return `90` because a `90`-degree angle is formed by the minute hand and the `12` o'clock mark on the clock. We'll solve this challenge by first calculating what angle is created by each minute passing on a clock. Once we calculate this number, we multiply it by the input to determine the final angle. \n\nA method to solve such problems is to consider the rate of change of the angle in degrees per minute. The hour hand of a normal `12-hour` analogue clock turns `360\u00b0` in `12` hours (`720` minutes) or `0.5\u00b0` per minute. The minute hand rotates through `360\u00b0` in `60` minutes or `6\u00b0` per minute.\n\n```js\nfunction simpleClockAngle(num) {\n\n  \/\/ we got 6 because 360\/60 = 6\n  \/\/ 360 represents the full number of a degrees in a circle and\n  \/\/ 60 is the number of minutes on a clock, so dividing these two numbers\n  \/\/ gives us the number of degrees for one minute\n  return 6 * num;\n\n}\n\nsimpleClockAngle(15);\n```\n\n\n\n\n#### Sum of several arrays \n**Details:**\nYou will be given an array of several arrays that each contain integers and your goal is to write a function that will sum up all the numbers in all the arrays. For example, if the input is `[[3, 2], [1], [4, 12]]` then your program should output `22` because `3 + 2 + 1 + 4 + 12 = 22`. Solve without and with `reduce`.\n\nWe will solve this challenge by looping through the entire array, and then looping through each inner array adding up all the numbers.\n\n```js\nfunction sum_array(arr) {\n  \/\/ store our final answer\n  var sum = 0;\n  \/\/ loop through entire array\n  for (var i = 0; i < arr.length; i++) {\n    \/\/ loop through each inner array\n    for (var j = 0; j < arr[i].length; j++) {\n      \/\/ add this number to the current final sum\n      sum += arr[i][j];\n    }\n  }\n\n  return sum;\n}\n\nsum_array([[3, 2], [1], [4, 12]]);\n```\n\nWith `reduce`:\n\n```js\nfunction sumArray(arr) {\n  return arr.reduce((t, e) => t.concat(e)).reduce((t, e) => t + e)\n}\n```\n\n\n#### Lucky sevens \n**Details:**\nWrite a function called `lucky_sevens` which takes an array of integers and returns true if any three consecutive elements sum to 7.\n\nTo solve this challenge we'll simply loop through the array starting at the 3rd position, and checking if the number at this index plus the two previous elements sums to 7. We continue doing this as we loop through the entire array. Once we find three elements that sum to 7, we simply return `true`. If we reach the end of the array without finding elements that sum to 7, we return `false`.\n\n```js\nfunction lucky_sevens(arr) {\n\n  \/\/ if less than 3 elements then this challenge is not possible\n  if (arr.length < 3) {\n    return \"not possible\";\n  }\n\n  \/\/ because we know there are at least 3 elements we can\n  \/\/ start the loop at the 3rd element in the array (i=2)\n  \/\/ and check it along with the two previous elements (i-1) and (i-2)\n  for (var i = 2; i < arr.length; i++) {\n    if (arr[i] + arr[i-1] + arr[i-2] === 7) {\n      return true; \n    }\n  }\n\n  \/\/ if loop is finished and no elements summed to 7\n  return false;\n\n}\n\nlucky_sevens([2, 1, 5, 1, 0]);\n``` \n\n\n\n\n#### Two sum problem \n**Details:**\nGiven an integer `x` and a sorted array a of `N` distinct integers, design a linear-time algorithm to determine if there exists two distinct indices `i` and `j` such that `a[i] + a[j] == x`\n\nFor example, if the array is `[3, 5, 2, -4, 8, 11]` and the sum is `7`, \nyour program should return `[[11, -4], [2, 5]]` because `11 + -4 = 7` and `2 + 5 = 7`.\n\nThe algorithm below makes use of hash tables which have a constant lookup time. As we pass through each element in the array, we check to see if S minus the current element exists in the hash table. We only need to loop through the array once, resulting in a running time of `O(n)` since each lookup and insertion in a hash table is `O(1)`.\n\n```js\n\/\/ our two sum function which will return\n\/\/ all pairs in the array that sum up to S\nfunction twoSum(arr, S) {\n\n  var sums = [];\n  var hashTable = {};\n\n  \/\/ check each element in array\n  for (var i = 0; i < arr.length; i++) {\n\n    \/\/ calculate S - current element\n    var sumMinusElement = S - arr[i];\n\n    \/\/ check if this number exists in hash table\n    \/\/ if so then we found a pair of numbers that sum to S\n    if (hashTable[sumMinusElement.toString()] !== undefined) { \n      sums.push([arr[i], sumMinusElement]);\n    }\n\n    \/\/ add the current number to the hash table\n    hashTable[arr[i].toString()] = arr[i];\n\n  }\n\n  \/\/ return all pairs of integers that sum to S\n  return sums;\n\n}\n\ntwoSum([3, 5, 2, -4, 8, 11], 7);\n```\n\n\n\n\n#### Implement a queue using a linked list \nWe will store a reference to the front and back of the queue in order to make enqueuing and dequeuing run in `O(1)` constant time. Every time we want to insert into the queue, we add the new element to the end of the linked list and update the back pointer. When we want to dequeue we return the first node in the linked list and update the front pointer.\n\n```js\n\/\/ queue is initially empty\nvar Queue = {front: null, back: null};\n\n\/\/ we will use a node to keep track of the elements\n\/\/ in the queue which is represented by a linked list\nfunction Node(data, next) {\n  this.data = data;\n  this.next = next;\n} \n\n\/\/ add elements to queue in O(1) time\nfunction Enqueue(element) {\n  var N = new Node(element, null);\n  if (Queue.back === null) {\n    Queue.front = N;\n    Queue.back = N; \n  } else { \n    Queue.back.next = N; \n    Queue.back = Queue.back.next;\n  } \n}\n\n\/\/ remove first element from queue in O(1) time\nfunction Dequeue() {\n  if (Queue.front !== null) { \n    var first = Queue.front;\n    Queue.front = Queue.front.next; \n    return first.data;\n  } else {\n    if (Queue.back !== null) { Queue.back = null; }\n    return 'Cannot dequeue because queue is empty';\n  }\n}\n\nEnqueue('a'); \nEnqueue('b'); \nEnqueue('c'); \nDequeue();\n```\n\n\n#### Tree Level Order Print \n**Details:**\nGiven a binary tree of integers, print it in level order. The output will contain space between the numbers in the same level, and new line between different levels.\n\n```js\nmodule.exports = function (root) {\n  \/\/ Doing a breadth first search using recursion.\n  (function walkLevel (children) {\n    \/\/ Create a new queue for the next level.\n    var queue = [],\n        output;\n\n    \/\/ Use the map function to easily join all the nodes together while pushing\n    \/\/ it's children into the next level queue.\n    output = children.map(function (node) {\n      \/\/ Assuming the node has children stored in an array.\n      queue = queue.concat(node.children || []);\n      return node.value;\n    }).join(' ');\n\n    \/\/ Log the output at each level.\n    console.log(output);\n\n    \/\/ If the queue has values in it, recurse to the next level and walk\n    \/\/ along it.\n    queue.length && walkLevel(queue);\n  })([root]);\n};\n```\n\n\n\n#### Stock maximum profit \n**Details:**\nYou will be given a list of stock prices for a given day and your goal is to return the maximum profit that could have been made by buying a stock at the given price and then selling the stock later on. \n\nFor example if the input is: \n\n```js\n[45, 24, 35, 31, 40, 38, 11] \n```\n\nthen your program should return 16 because if you bought the stock at $24 and sold it at $40, a profit of $16 was made and this is the largest profit that could be made. If no profit could have been made, return -1.\n\nWe'll solve the challenge the following way:\n\n1. Iterate through each number in the list.\n2. At the ith index, get the `i+1` index price and check if it is larger than the ith index price.\n3. If so, set `buy_price = i` and `sell_price = i+1`. Then calculate the profit: `sell_price - buy_price`.\n4. If a stock price is found that is cheaper than the current `buy_price`, set this to be the new buying price and continue from step 2.\n5. Otherwise, continue changing only the `sell_price` and keep `buy_price` set.\n\nThis algorithm runs in linear time, making only one pass through the array, so the running time in the worst case is `O(n)`.\n\n```js\nfunction StockPicker(arr) { \n\n  var max_profit = -1;\n  var buy_price = 0;\n  var sell_price = 0;\n\n  \/\/ this allows our loop to keep iterating the buying\n  \/\/ price until a cheap stock price is found\n  var change_buy_index = true;\n\n  \/\/ loop through list of stock prices once\n  for (var i = 0; i < arr.length-1; i++) {\n\n    \/\/ selling price is the next element in list\n    sell_price = arr[i+1]; \n\n    \/\/ if we have not found a suitable cheap buying price yet\n    \/\/ we set the buying price equal to the current element\n    if (change_buy_index) { buy_price = arr[i]; }\n\n    \/\/ if the selling price is less than the buying price\n    \/\/ we know we cannot make a profit so we continue to the \n    \/\/ next element in the list which will be the new buying price\n    if (sell_price < buy_price) {\n      change_buy_index = true; \n      continue;\n    }\n\n    \/\/ if the selling price is greater than the buying price\n    \/\/ we check to see if these two indices give us a better \n    \/\/ profit then what we currently have\n    else { \n      var temp_profit = sell_price - buy_price;\n      if (temp_profit > max_profit) { max_profit = temp_profit; }\n      change_buy_index = false;\n    }\n\n  }\n\n  return max_profit;\n\n}\n\nStockPicker([44, 30, 24, 32, 35, 30, 40, 38, 15]);  \n```\n\n\n#### Find Word Positions in Text \n**Details:**\nGiven a text file and a word, find the positions that the word occurs in the file. We\u2019ll be asked to find the positions of many words in the same file.\n\nSince we\u2019ll have to answer multiple queries, precomputation would be useful. We\u2019ll build a data structure that stores the positions of all the words in the text file. This is known as inverted index.\n\n```js\nmodule.exports = function (text) {\n  var trie   = {},\n      pos    = 0,\n      active = trie; \/\/ Start the active structure as the root trie structure\n\n  \/\/ Suffix a space after the text to make life easier\n  text += ' ';\n\n  \/\/ Loop through the input text adding it to the trie structure\n  for (var i = 0; i < text.length; i++) {\n    \/\/ When the character is a space, restart\n    if (text[i] === ' ') {\n      \/\/ If the current active doesn't equal the root, set the position\n      if (active !== trie) {\n        (active.positions = active.positions || []).push(pos);\n      }\n      \/\/ Reset the positions and the active part of the data structure\n      pos    = i;\n      active = trie;\n      continue;\n    }\n\n    \/\/ Set the next character in the structure up\n    active[text[i]] = (active[text[i]] || {});\n    active = active[text[i]];\n  }\n\n  \/\/ Return a function that accepts a word and looks it up in the trie structure\n  return function (word) {\n    var i      = -1,\n        active = trie;\n\n    while (word[++i]) {\n      if (!active[word[i]]) { return []; }\n      active = active[word[i]];\n    }\n\n    return active.positions;\n  };\n};\n```\n\n\n#### Determine overlapping numbers in ranges \n**Details:**\nYou will be given an array with `5` numbers. The first 2 numbers represent a range, and the next two numbers represent another range. The final number in the array is `X`. The goal of your program is to determine if both ranges overlap by at least `X` numbers. For example, in the array `[4, 10, 2, 6, 3]` the ranges `4` to `10` and `2` to `6` overlap by at least `3` numbers `(4, 5, 6)`, so your program should return `true`. Solve with and without looping.\n\nIf the array is `[10, 20, 4, 14, 4]` then the ranges are:\n\n```sh\n10 11 12 13 14 15 16 17 18 19 20\n4 5 6 7 8 9 10 11 12 13 14\n```\n\nThese ranges overlap by at least `4` numbers, namely: `10, 11, 12, 13, 14` so your program should return `true`.\n\nWith loop:\n```js\nfunction OverlappingRanges(arr) {\n\n  \/\/ keep a count of how many numbers overlap\n  var counter = 0;\n\n  \/\/ loop through one of the ranges\n  for (var i = arr[0]; i < arr[1]; i++) {\n\n    \/\/ check if a number within the first range exists\n    \/\/ in the second range\n    if (i >= arr[2] && i <= arr[3]) { \n      counter += 1;\n    }\n\n  }\n\n  \/\/ check if the numbers that overlap is equal to or greater\n  \/\/ than the last number in the array\n  return (counter >= arr[4]) ? true : false;\n}\n\nOverlappingRanges([4, 10, 2, 6, 3]); \n```\n\nWithout loop:\n\n```js\nfunction overlapping(input){\n  var nums1 = listOfNums(input[0], input[1]);\n  var nums2 = listOfNums(input[2], input[3]);\n  var overlappingNum = 0;\n\n  if(nums1[0] >= nums2[0] && nums1[0] <= nums2[1]){\n    overlappingNum =  nums2[1] - nums1[0] + 1;\n  } else {\n    overlappingNum =  nums1[1] - nums2[0] + 1;\n  }\n  if(overlappingNum >= input[4]){\n    return true;\n  }\n}\n\nfunction listOfNums(a, b){\n  var start = a;\n  var end = b;\n  if(a > b){\n    start = b;\n    end = a;\n  }\n\n  return [a, b];\n}\n\nvar a = [4, 10, 2, 6, 3];\noverlapping(a)\n```\n\n\n\n#### Throttle Function Implementation \n**Details:**\nWrite a function that accepts a function and timeout, `x`, in number of milliseconds. It returns a function that can only be executed once per `x` milliseconds. This can be useful for limiting the number of time and computation heavy function that are run. For example, making AJAX requests to an autocompletion API.\n\nOnce written, add a third parameter that will allow the function to be executed immediately if set to true. Otherwise the function will run at the end of the timeout period.\n\n```js\nmodule.exports = function (fn, delay, execAsap) {\n  var timeout; \/\/ Keeps a reference to the timeout inside the returned function\n\n  return function () {\n    \/\/ Continue to pass through the function execution context and arguments\n    var that = this,\n        args = arguments;\n\n    \/\/ If there is no timeout variable set, proceed to create a new timeout\n    if (!timeout) {\n      execAsap && fn.apply(that, args);\n\n      timeout = setTimeout(function () {\n        execAsap || fn.apply(that, args);\n        \/\/ Remove the old timeout variable so the function can run again\n        timeout = null;\n      }, delay || 100);\n    }\n  };\n};\n```\n\n\n\n#### Dutch national flag sorting problem \n**Details:**\nFor this problem, your goal is to sort an array of `0`, `1`, `2` but you must do this in place, in linear time and without any extra space (such as creating an extra array). This is called the *Dutch national flag sorting problem*. For example, if the input array is `[2,0,0,1,2,1]` then your program should output `[0,0,1,1,2,2]` and the algorithm should run in `O(n)` time.\n\nThe solution to this algorithm will require 3 pointers to iterate throughout the array, swapping the necessary elements.\n\n1. Create a low pointer at the beginning of the array and a high pointer at the end of the array.\n2. Create a mid pointer that starts at the beginning of the array and iterates through each element.\n3. If the element at `arr[mid]` is a `2`, then swap `arr[mid]` and `arr[high]` and decrease the high pointer by `1`.\n4. If the element at `arr[mid]` is a `0`, then swap `arr[mid]` and `arr[low]` and increase the low and mid pointers by `1`.\n5. If the element at `arr[mid]` is a `1`, don't swap anything and just increase the mid pointer by `1`.\n\n```js\nfunction swap(arr, i1, i2) {\n  var temp = arr[i1];\n  arr[i1] = arr[i2];\n  arr[i2] = temp;\n}\n\nfunction dutchNatFlag(arr) {\n\n  var low = 0;\n  var mid = 0;\n  var high = arr.length - 1;\n\n  \/\/ one pass through the array swapping\n  \/\/ the necessary elements in place\n  while (mid <= high) {\n    if      (arr[mid] === 0) { swap(arr, low++, mid++); }\n    else if (arr[mid] === 2) { swap(arr, mid, high--); }\n    else if (arr[mid] === 1) { mid++; }\n  }\n\n  return arr;\n\n}\n\ndutchNatFlag([2,2,2,0,0,0,1,1]); \n```\n\n\n#### Step-by-step solution for step counting using recursion \n**Details:**\n\nSuppose you want climb a staircase of N steps, and on each step you can take either 1 or 2 steps. How many distinct ways are there to climb the staircase? For example, if you wanted to climb 4 steps, you can take the following distinct number of steps:\n\n```sh\n1) 1, 1, 1, 1\n2) 1, 1, 2\n3) 1, 2, 1\n4) 2, 1, 1\n5) 2, 2\n```\n\nSo there are 5 distinct ways to climb 4 steps. We want to write a function, using recursion, that will produce the answer for any number of steps. \n\n\nThe solution to this problem requires recursion, which means to solve for a particular `N`, we need the solutions for previous N's. The solution for N steps is equal to the solutions for `N - 1` steps plus `N - 2` steps.\n\n```js\nfunction countSteps(N) {\n\n  \/\/ just as in our solution explanation above, we know that to climb 1 step\n  \/\/ there is only 1 solution, and for 2 steps there are 2 solutions\n  if (N === 1) { return 1; }\n  if (N === 2) { return 2; }\n\n  \/\/ for all N > 2, we add the previous (N - 1) + (N - 2) steps to get\n  \/\/ an answer recursively\n  return countSteps(N - 1) + countSteps(N - 2);\n\n}\n\n\/\/ the solution for N = 6 will recursively be solved by calculating\n\/\/ the solution for N = 5, N = 4, N = 3, and N = 2 which we know is 2\ncountSteps(6); \n```\n\n\n\n#### Implement Bubble Sort \nThe steps in the bubble sort algorithm are:\n\n1. Loop through the whole array starting from index `1`\n2. If the number in the array at index `i-1` is greater than i, swap the numbers and continue\n3. Once the end of the array is reached, start looping again from the beginning\n4. Once no more elements can be swapped, the sorting is complete\n\n```js\nfunction swap(arr, i1, i2) {\n  var temp = arr[i1];\n  arr[i1] = arr[i2];\n  arr[i2] = temp;\n}\n\nfunction bubblesort(arr) {\n\n  var swapped = true;\n\n  \/\/ keep going unless no elements can be swapped anymore\n  while (swapped) {\n\n    \/\/ set swapped to false so that the loop stops\n    \/\/ unless two element are actually swapped\n    swapped = false;\n\n    \/\/ loop through the whole array swapping adjacent elements\n    for (var i = 1; i < arr.length; i++) {\n      if (arr[i-1] > arr[i]) {\n        swap(arr, i-1, i);\n        swapped = true;\n      }\n    }\n\n  }\n\n  return arr;\n\n}\n\nbubblesort([103, 45, 2, 1, 97, -4, 67]); \n```\n\n\n#### Implement a queue using two stacks \nSuppose we push `a`, `b`, `c` to a stack. If we are trying to implement a queue and we call the dequeue method 3 times, we actually want the elements to come out in the order: `a`, `b`, `c`, which is in the opposite order they would come out if we popped from the stack. So, basically, we need to access the elements in the reverse order that they exist in the stack. \n\n*Algorithm* for queue using two stacks:\n\n1. When calling the enqueue method, simply push the elements into the stack 1.\n2. If the dequeue method is called, push all the elements from stack 1 into stack 2, which reverses the order of the elements. Now pop from stack 2.\n\nThe worst case running time for implementing these operations using stacks is `O(n)` because you need to transfer n elements from stack 1 to stack 2 when a dequeue method is called. Pushing to stack 1 is simply `O(1)`.\n\n```js\n\/\/ implement stacks using plain arrays with push and pop functions\nvar Stack1 = [];\nvar Stack2 = [];\n\n\/\/ implement enqueue method by using only stacks\n\/\/ and the push and pop functions\nfunction Enqueue(element) {\n  Stack1.push(element);\n}\n\n\/\/ implement dequeue method by pushing all elements\n\/\/ from stack 1 into stack 2, which reverses the order\n\/\/ and then popping from stack 2\nfunction Dequeue() {\n  if (Stack2.length === 0) {\n    if (Stack1.length === 0) { return 'Cannot dequeue because queue is empty'; }\n    while (Stack1.length > 0) {\n      var p = Stack1.pop();\n      Stack2.push(p);\n    }\n  }\n  return Stack2.pop();\n}\n\nEnqueue('a');\nEnqueue('b');\nEnqueue('c');\nDequeue(); \n```\n\n\n## [[\u2b06]](#toc) Data Science Interview Questions\n#### What is Data Science? \nData Science is an interdisciplinary field of different scientific methods, techniques, processes, and knowledge that is used to transform the data of different types such as structured, unstructured and semi-structured data into the required format or representation.\n\nData Science concepts include different concepts such as statistics, regression, mathematics, computer science, algorithms, data structures and information science with also including some subfields such as data mining, machine learning, and databases etc.,\n\nData Science concept has recently evolved to a greater extent in the area of computing technology in order to perform data analysis on the existing data where the growth of data is in terms of an exponential with respect to time.\n\nData Science is the study of various types of data such as structured, semi-structured and unstructured data in any form or formats available in order to get some information out of it.\n\nData Science consists of different technologies used to study data such as data mining, data storing, data purging, data archival, data transformation etc., in order to make it efficient and ordered. Data Science also includes the concepts like Simulation, modeling, analytics, machine learning, computational mathematics etc.\n\n\n#### What is the best Programming Language to use in Data Science? \nData Science can be handled by using programming languages like Python or R programming language. These two are the two most popular languages being used by the Data Scientists or Data Analysts. R and Python are open source and are free to use and came into existence during the 1990s.\n\nPython and R have different advantages depending on the applications and required a business goal. Python is better to be used in the cases of repeated tasks or jobs and for data manipulations whereas R programming can be used for querying or retrieving datasets and customized data analysis.\n\nMostly Python is preferred for all types of data science applications where some time R programming is preferred in the cases of high or complex data applications. Python is easier to learn and has less learning curve whereas R has a deep learning curve.\n\nPython is mostly preferred in all the cases which is a general-purpose programming language and can be found in many applications other than Data Science too. R is mostly seen in Data Science area only where it is used for data analysis in standalone servers or computing separately.\n\n\n#### Why is data cleaning essential in Data Science? \nData cleaning is more important in Data Science because the end results or the outcomes of the data analysis come from the existing data where useless or unimportant need to be cleaned periodically as of when not required. This ensures the data reliability & accuracy and also memory is freed up.\n\nData cleaning reduces the data redundancy and gives good results in data analysis where some large customer information exists and that should be cleaned periodically. In the businesses like e-commerce, retail, government organizations contain large customer transaction information which is outdated and needs to be cleaned.\n\nDepending on the amount or size of data, suitable tools or methods should be used to clean the data from the database or big data environment. There are different types of data existing in a data source such as dirty data, clean data, mixed clean and dirty data and sample clean data.\n\nModern data science applications rely on machine learning model where the learner learns from the existing data. So, the existing data should always be cleanly and well maintained to get sophisticated and good outcomes during the optimization of the system.\n\n\n#### What is Linear Regression in Data Science? \nLinear Regression is a technique used in supervised machine learning algorithmic process in the area of Data Science. This method is used for predictive analysis.\n\nPredictive analytics is an area within Statistical Sciences where the existing information will be extracted and processed to predict the trends and outcomes pattern. The core of the subject lies in the analysis of existing context to predict an unknown event.\n\nThe process of Linear Regression method is to predict a variable called target variable by making the best relationship between the dependent variable and an independent variable. Here dependent variable is outcome variable and also response variable whereas the independent variable is predictor variable or explanatory variable.\n\nFor example in real life, depending on the expenses occurred in this financial year or monthly expenses, the predictions happen by calculating the approximate upcoming months or financial years expenses.\n\nIn this method, the implementation can be done by using Python programming technique where this is the most important method used in Machine Learning technique under the area of Data Science.\n\nLinear regression is also called Regression analysis that comes under the area of Statistical Sciences which is integrated together with Data Science.\n\n\n#### What is A\/B testing in Data Science? \nA\/B testing is also called as Bucket Testing or Split Testing. This is the method of comparing and testing two versions of systems or applications against each other to determine which version of application performs better. This is important in the cases where multiple versions are shown to the customers or end users in order to achieve the goals.\n\nIn the area of Data Science, this A\/B testing is used to know which variable out of the existing two variables in order to optimize or increase the outcome of the goal. A\/B testing is also called Design of Experiment. This testing helps in establishing a cause and effect relationship between the independent and dependent variables.\n\nThis testing is also simply a combination of design experimentation or statistical inference. Significance, Randomization and Multiple Comparisons are the key elements of the A\/B testing.\n\nThe significance is the term for the significance of statistical tests conducted. Randomization is the core component of the experimental design where the variables will be balanced. Multiple comparisons are the way of comparing more variables in the case of customer interests that causes more false positives resulting in the requirement of correction in the confidence level of a seller in the area of e-commerce.\n\nA\/B testing is the important one in the area of Data Science in predicting the outcomes.\n\n\n## [[\u2b06]](#toc) Data Structures Interview Questions\n#### What is data-structure? \nData structure availability may vary by programming languages. Commonly available data structures are:\n* list, \n* arrays, \n* stack, \n* queues, \n* graph, \n* tree etc.\n\n\n#### What is a graph? \nA **graph** is a pictorial representation of a set of objects where some pairs of objects are connected by links. The interconnected objects are represented by points termed as vertices, and the links that connect the vertices are called edges.\n\n\n#### What is linear searching? \n**Linear search** or sequential search is a method for finding a target value within a list. It sequentially checks each element of the list for the target value until a match is found or until all the elements have been searched. Linear search runs in at worst *linear time* and makes at most `n` comparisons, where `n` is the length of the list. \n\n* Worst-case performance    `O(n)`\n* Best-case performance `O(1)`\n* Average performance   `O(n)`\n* Worst-case space complexity   `O(1)` iterative\n\nIn theory other search algorithms may be faster than linear search (for instance binary search), in practice even on medium-sized arrays (around 100 items or less) it might be infeasible to use anything else. \n\n\n#### What is algorithm? \n**Algorithm** is a step by step procedure, which defines a set of instructions to be executed in certain order to get the desired output.\n\n\n#### What is linear data structure and what are common operations to perform on it? \nA *linear data-structure* has sequentially arranged data items. The next item can be located in the next memory address. It is stored and accessed in a sequential manner. **Array** and **list** are example of linear data structure.\n\nThe following operations are commonly performed on any data-structure:\n\n*   **Insertion** \u2212 adding a data item\n*   **Deletion** \u2212 removing a data item\n*   **Traversal** \u2212 accessing and\/or printing all data items\n*   **Searching** \u2212 finding a particular data item\n*   **Sorting** \u2212 arranging data items in a pre-defined sequence\n\n\n#### What is an average case complexity of Bubble Sort? \n**Bubble sort**, sometimes referred to as sinking sort, is a simple sorting algorithm that repeatedly steps through the list to be sorted, compares each pair of adjacent items and swaps them if they are in the wrong order. The pass through the list is repeated until no swaps are needed, which indicates that the list is sorted. \n\nBubble sort has a worst-case and average complexity of `\u041e(n2)`, where `n` is the number of items being sorted. Most practical sorting algorithms have substantially better worst-case or average complexity, often `O(n log n)`. Therefore, bubble sort is not a practical sorting algorithm.\n\n\n\n\n#### What examples of greedy algorithms do you know? \nThe below given problems find their solution using greedy algorithm approach:\n\n*   Travelling Salesman Problem\n*   Prim's Minimal Spanning Tree Algorithm\n*   Kruskal's Minimal Spanning Tree Algorithm\n*   Dijkstra's Minimal Spanning Tree Algorithm\n*   Graph - Map Coloring\n*   Graph - Vertex Cover\n*   Knapsack Problem\n*   Job Scheduling Problem\n\n\n#### What are some examples of divide and conquer algorithms? \nThe below given problems find their solution using divide and conquer algorithm approach:\n\n*   Merge Sort\n*   Quick Sort\n*   Binary Search\n*   Strassen's Matrix Multiplication\n*   Closest pair (points)\n\n\n#### What are some examples of dynamic programming algorithms? \nThe below given problems find their solution using divide and conquer algorithm approach:\n\n*   Fibonacci number series\n*   Knapsack problem\n*   Tower of Hanoi\n*   All pair shortest path by Floyd-Warshall\n*   Shortest path by Dijkstra\n*   Project scheduling\n\n\n#### Why do we use stacks? \nIn data-structure, **stack** is an Abstract Data Type (ADT) used to store and retrieve values in Last In First Out (LIFO) method.\n\nStacks follows LIFO method and addition and retrieval of a data item takes only `\u039f(n)` time. Stacks are used where we need to access data in the reverse order or their arrival. Stacks are used commonly in recursive function calls, expression parsing, depth first traversal of graphs etc.\n\nThe below operations can be performed on a stack:\n\n*   **push()** \u2212 adds an item to stack\n*   **pop()** \u2212 removes the top stack item\n*   **peek()** \u2212 gives value of top item without removing it\n*   **isempty()** \u2212 checks if stack is empty\n*   **isfull()** \u2212 checks if stack is full\n\n\n#### Why do we use queues? \n**Queue** is an abstract data structure (ADS), somewhat similar to stack. In contrast to stack, queue is opened at both end. One end is always used to insert data (enqueue) and the other is used to remove data (dequeue). Queue follows First-In-First-Out (FIFO) methodology, i.e., the data item stored first will be accessed first.\n\nAs queues follows FIFO method, they are used when we need to work on data-items in exact sequence of their arrival. Every operating system maintains queues of various processes. Priority queues and breadth first traversal of graphs are some examples of queues.\n\nThe below operations can be performed on a queue:\n*   **enqueue()** \u2212 adds an item to rear of the queue\n*   **dequeue()** \u2212 removes the item from front of the queue\n*   **peek()** \u2212 gives value of front item without removing it\n*   **isempty()** \u2212 checks if stack is empty\n*   **isfull()** \u2212 checks if stack is full\n\n\n#### What is Selection Sort? \n**Selection sort** is in-place sorting technique. It divides the data set into two sub-lists: sorted and unsorted. Then it selects the minimum element from unsorted sub-list and places it into the sorted list. This iterates unless all the elements from unsorted sub-list are consumed into sorted sub-list.\n\n\n#### Why we need to do algorithm analysis? \nA problem can be solved in more than one ways. So, many solution algorithms can be derived for a given problem. We analyze available algorithms to find and implement the best suitable algorithm.\n\nAn algorithm are generally analyzed on two factors \u2212 time and space. That is, how much **execution** time and how much **extra space** required by the algorithm.\n\n\n#### What is the difference between Linear Search and Binary Search? \n* A **linear search** looks down a list, one item at a time, without jumping. In complexity terms this is an `O(n)` search - the time taken to search the list gets bigger at the same rate as the list does.\n\n* A **binary search** is when you start with the middle of a sorted list, and see whether that's greater than or less than the value you're looking for, which determines whether the value is in the first or second half of the list. Jump to the half way through the sublist, and compare again etc. In complexity terms this is an `O(log n)` search - the number of search operations grows more slowly than the list does, because you're halving the \"search space\" with each operation.\n\nComparing the two:\n\n- Binary search requires the input data to be sorted; linear search doesn't\n- Binary search requires an *ordering* comparison; linear search only requires equality comparisons\n- Binary search has complexity `O(log n)`; linear search has complexity O(n)\n- Binary search requires random access to the data; linear search only requires sequential access (this can be very important - it means a linear search can *stream* data of arbitrary size)\n\n\n#### What is asymptotic analysis of an algorithm? \n**Asymptotic analysis** of an algorithm, refers to defining the mathematical boundation\/framing of its run-time performance. Using asymptotic analysis, we can very well conclude the best case, average case and worst case scenario of an algorithm.\n\nAsymptotic analysis can provide three levels of mathematical binding of execution time of an algorithm:\n\n*   Best case is represented by \u03a9(n) notation.\n*   Worst case is represented by \u039f(n) notation.\n*   Average case is represented by \u0398(n) notation.\n\n\n## [[\u2b06]](#toc) Design Patterns Interview Questions\n#### What are the main categories of Design Patterns? \nThe Design patterns can be classified into three main categories:\n\n* Creational Patterns\n* Behavioral Patterns\n* Functional Patterns\n\n\n#### What is a pattern? \n*Patterns* in programming are like recipes in cooking. They are not ready dishes, but instructions for slicing and dicing products, cooking them, serving them and so forth.\n\n**Pattern content**\nAs a rule, a pattern description consists of the following:\n\n* a problem that the pattern solves;\n* motivation for solving the the problem using the method suggested by the pattern;\n* structures of classes comprising the solution;\n* an example in one of the programming languages;\n* a description of the nuances of pattern implementation in various contexts;\nrelations with other patterns.\n\n\n#### What is Singleton pattern? \n**Singleton pattern** comes under *creational* patterns category and introduces a single class which is responsible to create an object while making sure that only single object gets created. This class provides a way to access its only object which can be accessed directly without need to instantiate the object of the class.\n\n\n\n\n\n\n\n#### What is Design Patterns and why anyone should use them? \nDesign patterns are a well-described solution to the most commonly encountered problems which occur during software development. \n\nDesign pattern represents the best practices evolved over a period of time by experienced software developers. They promote reusability which leads to a more robust and maintainable code.\n\n\n#### What is Factory pattern? \n**Factory pattern** is one of most used design pattern and comes under *creational* patterns category.\n\nIn Factory pattern, we create object without exposing the creation logic to the client and refer to newly created object using a *common interface*.\n\n\n\n\n\n**Pro's**:  \n\n*   Allows you to hide implementation of an application seam (the core interfaces that make up your application)\n*   Allows you to easily test the seam of an application (that is to mock\/stub) certain parts of your application so you can build and test the other parts\n*   Allows you to change the design of your application more readily, this is known as loose coupling\n\n**Con's**  \n\n*   Makes code more difficult to read as all of your code is behind an abstraction that may in turn hide abstractions.\n*   Can be classed as an anti-pattern when it is incorrectly used, for example some people use it to wire up a whole application when using an IOC container, instead use Dependency Injection.\n\n\n#### What is Iterator pattern? \n**Iterator pattern** is very commonly used design pattern in Java and .Net programming environment. This pattern is used to get a way to access the elements of a collection object in sequential manner without any need to know its underlying representation. Iterator pattern falls under _behavioral_ pattern category.\n\n\n\n\n\n\n#### What is Inversion of Control? \n\n*Inversion of control* is a broad term but for a software developer it's most commonly described as a pattern used for decoupling components and layers in the system. \n\nFor example, say your application has a text editor component and you want to provide spell checking. Your standard code would look something like this:\n```js\npublic class TextEditor {\n\n    private SpellChecker checker;\n\n    public TextEditor() {\n        this.checker = new SpellChecker();\n    }\n}\n```\nWhat we've done here creates a dependency between the TextEditor and the SpellChecker. In an IoC scenario we would instead do something like this:\n```js\npublic class TextEditor {\n\n    private IocSpellChecker checker;\n\n    public TextEditor(IocSpellChecker checker) {\n        this.checker = checker;\n    }\n}\n```\n\nYou have *inverted control* by handing the responsibility of instantiating the spell checker from the TextEditor class to the caller.\n\n```js\nSpellChecker sc = new SpellChecker; \/\/ dependency\nTextEditor textEditor = new TextEditor(sc);\n```\n\n\n\n#### Can we create a clone of a singleton object? \nYesl, we can but the purpose of Singleton Object creation is to have single instance serving all requests. \n\n\n#### Name types of Design Patterns? \nDesign patterns can be classified in three categories: Creational, Structural and Behavioral patterns.\n\n-   Creational Patterns\u00a0- These design patterns provide a way to create objects while hiding the creation logic, rather than instantiating objects directly using new opreator. This gives program more flexibility in deciding which objects need to be created for a given use case.\n\n-   Structural Patterns\u00a0- These design patterns concern class and object composition. Concept of inheritance is used to compose interfaces and define ways to compose objects to obtain new functionalities.\n\n-   Behavioral Patterns\u00a0- These design patterns are specifically concerned with communication between objects.\n\n\n#### What is Template pattern? \nIn **Template pattern**, an abstract class exposes defined way(s)\/template(s) to execute its methods. Its subclasses can override the method implementation as per need but the invocation is to be in the same way as defined by an abstract class. This pattern comes under _behavior_ pattern category.\n\n\n\n\n\n\n#### What is Filter pattern? \n**Filter pattern** or **Criteria pattern** is a design pattern that enables developers to filter a set of objects using different criteria and chaining them in a decoupled way through logical operations. This type of design pattern comes under *structural* pattern as this pattern combines multiple criteria to obtain single criteria.\n\n**Filter design pattern** is useful where you want to add filters dynamically or you are implementing multiple functionalities and most of them require different filter criteria to filter something. In that case instead of hard coding the filters inside the functionalities, you can create filter criteria and re-use it wherever required.\n\n```js\nList laptops = LaptopFactory.manufactureInBulk();\nAndCriteria searchCriteria = new AndCriteria(\n  new HardDisk250GBFilter(), \n  new MacintoshFilter(), \n  new I5ProcessorFilter());\nList filteredLaptops = searchCriteria.meets(laptops);\n```\n\n\n#### What is Strategy pattern? \nIn **Strategy pattern**, a class behavior or its algorithm can be changed at run time. This type of design pattern comes under _behavior_ pattern.\n\nIn Strategy pattern, we create objects which represent various strategies and a context object whose behavior varies as per its strategy object. The strategy object changes the executing algorithm of the context object.\n\n\n\n\n\n\n\n\n#### What is Dependency Injection? \n*Dependency injection* makes it easy to create loosely coupled components, which typically means that components consume functionality defined by interfaces without having any first-hand knowledge of which implementation classes are being used.\n\n*Dependency injection* makes it easier to change the behavior of an application by changing the components that implement the interfaces that define application features. It also results in components that are easier to isolate for unit testing.\n\n\n#### What is Null Object pattern? \nIn **Null Object pattern**, a null object replaces check of NULL object instance. Instead of putting if check for a null value, Null Object reflects a do nothing relationship. Such Null object can also be used to provide default behaviour in case data is not available.\n\nIn Null Object pattern, we create an abstract class specifying various operations to be done, concrete classes extending this class and a null object class providing do nothing implementation of this class and will be used seamlessly where we need to check null value.\n\n\n\n\n\n\n\n#### What is State pattern? \nIn **State pattern** a class behavior changes based on its state. This type of design pattern comes under _behavior_ pattern. In State pattern, we create objects which represent various states and a context object whose behavior varies as its state object changes.\n\n\n\n\n\n\n#### What is Proxy pattern? \nIn **proxy pattern**, a class represents functionality of another class. This type of design pattern comes under _structural_ pattern.\n\nIn proxy pattern, we create object having original object to interface its functionality to outer world.\n\n\n\n\n\n\n#### What is Builder pattern? \n*Builder pattern* builds a complex object using simple objects and using a step by step approach. This builder is independent of other objects.\n\n\n\n\n\nThe Director class is optional and is used to make sure that the building steps are executed in the right order with the right data by the right builder. It's about validation and delegation.Builder\/Director pattern's steps invocations could be semantically presented by method chaining or so called Fluent Interface syntax. js\nPizza pizza = new Pizza.Builder()\n                       .cheese(true)\n                       .pepperoni(true)\n                       .bacon(true)\n                       .build();[\u2b06] DevOps Interview Questions"},{"question":"Explain what is DevOps ?","answer":"DevOps is a newly emerging term in IT field, which is nothing but a practice that emphasizes the collaboration and communication of both software developers and other information-technology (IT) professionals. It focuses on delivering software product faster and lowering the failure rate of releases."},{"question":"What is the most important thing DevOps helps us achieve?","answer":"The most important thing that DevOps helps us achieve is to get the changes into production as quickly as possible while minimising risks in software quality assurance and compliance. This is the primary objective of DevOps."},{"question":"What is meant by Continuous Integration?","answer":"Continuous Integration (CI) is a development practice that requires developers to\u00a0integrate\u00a0code into a shared repository several times a day. Each check-in is then verified by an automated build, allowing teams to detect problems early."},{"question":"What is the need for DevOps?","answer":"Nowadays instead of releasing big sets of features, companies are trying to see if small features can be transported to their customers through a series of release trains. This has many advantages like quick feedback from customers, better quality of software etc. which\u00a0in turn leads to high customer satisfaction. To achieve this, companies are required to:\nIncrease deployment frequency\nLower failure rate of new releases\nShortened lead time between fixes\nFaster mean time to recovery in the event of new release crashing\nDevOps fulfills all these requirements and helps in achieving seamless software delivery."},{"question":"Are you more Dev or Ops?","answer":"What the interview means is do you do more sysadmin work, or do you spend a lot of time working with developers on coding?"},{"question":"What is\u00a0post mortem meetings?","answer":"Post mortem meeting is a meeting where we discuss what went wrong and what steps should be taken so that failure doesn't happen again. Post mortem meetings are not about finding the one to be blamed, they are for preventing outages from reoccurring and planing redesign of the infrastructure so that downtime can be minimised. It is about learning from mistakes."},{"question":"How is DevOps different from Agile\/SDLC?","answer":"Agile software development methodology focuses on the development of software.\nDevOps on the other hand is responsible for development as well as deployment of the software in the safest and most reliable way possible."},{"question":"What are the success factors for Continuous Integration?","answer":"Maintain a code repository\nAutomate the build\nMake the build self-testing\nEveryone commits to the baseline every day\nEvery commit (to baseline) should be built\nKeep the build fast\nTest in a clone of the production environment\nMake it easy to get the latest deliverables\nEveryone can see the results of the latest build\nAutomate deployment"},{"question":"Why is Continuous monitoring necessary?","answer":"Continuous Monitoring allows timely identification of problems or weaknesses and quick corrective action that helps reduce expenses of an organization. Continuous monitoring provides solution that addresses three operational disciplines known as:\ncontinuous audit\ncontinuous controls monitoring\ncontinuous transaction inspection"},{"question":"Which\u00a0are the top DevOps tools? Which tools have you worked on?","answer":"The most popular\u00a0DevOps tools are:\nGit: Version Control System tool\nJenkins: Continuous Integration tool\nSelenium: Continuous Testing tool\nPuppet, Chef, Ansible: Configuration Management and Deployment tools\nNagios: Continuous Monitoring tool\nDocker: Containerization tool"},{"question":"Mention what are the key aspects or principle behind DevOps?","answer":"The key aspects or principle behind DevOps are:\nInfrastructure as code\nContinuous deployment\nAutomation\nMonitoring\nSecurity"},{"question":"Can we consider DevOps as an Agile methodology?","answer":"DevOps is a movement to reconcile and synchronize development and production start through a set of good practices . Its emergence is motivated by a deep changing demands of business, who want to speed up the changes to stick closer to the requirements of business and the customer."},{"question":"What is DevOps engineer's duty with regards to Agile development?","answer":"DevOps engineer work very closely with Agile development teams to ensure they have an environment necessary to support functions such as automated testing, continuous Integration and continuous Delivery. DevOps engineer must be in constant contact with the developers and make all required parts of environment work seamlessly."},{"question":"What does Containerization mean?","answer":"Containerisation is a type of virtualization strategy that emerged as an alternative to traditional hypervisor-based virtualization. In containerization, the operating system is shared by the different containers rather than cloned for each virtual machine. For example Docker provides a container virtualization platform that serves as a good alternative to hypervisor-based arrangements."},{"question":"What is the function of CI (Continuous Integration) server?","answer":"CI server function is to continuously integrate all changes being made and committed to repository by different developers and check for compile errors. It needs to build code several times a day, preferably after every commit so it can detect which commit made the breakage if the breakage happens."},{"question":"What are the advantages of DevOps?","answer":"Technical benefits:\nContinuous software delivery\nLess complex problems to fix\nFaster resolution of problems\nBusiness benefits:\nFaster delivery of features\nMore stable operating environments\nMore time available to add value (rather than fix\/maintain)"},{"question":"What is the role of a configuration management tool in DevOps?","answer":"Configuration Management tools' purpose is to automatize deployment and configuration of software on big number of servers. Most CM tools usually use agent architecture which means that every machine being manged needs to have agent installed. One tool that uses agentless architecture is Ansible. It only requires SSH and Python. And if raw module is being used, not even Python is required because it can run raw bash commands. Other available and popular CM tools are Puppet, Chef, SaltStack.[\u2b06] Docker Interview Questions"},{"question":"What is Docker?","answer":"Docker is a containerization platform which packages your application and all its dependencies together in the form of containers so as to ensure that your application works seamlessly in any environment be it development or test or production.\nDocker containers, wrap a piece of software in a complete filesystem that contains everything needed to run: code, runtime, system tools, system libraries etc. anything that can be installed on a server.\nThis guarantees that the software will always run the same, regardless of its environment."},{"question":"What is Build Cache in Docker?","answer":"When we build an Image, Docker will process each line in Dockerfile. It will execute the commands on each line in the order that is mentioned in the file. But at each line, before running any command, Docker will check if there is already an existing image in its cache that can be reused rather than creating a new image."},{"question":"What\u2019s the difference between a repository and a registry?","answer":"Docker registry is a service for hosting and distributing images (the default one is the Docker Hub). \nDocker repository is a collection of related Docker images (the same name but with different tags)."},{"question":"What is the difference between \u2018docker run\u2019 and \u2018docker create\u2019?","answer":"The primary difference is that using \u2018docker create\u2019 creates a container in a stopped state.Bonus point: You can use \u2018docker create\u2019 and store an outputed container ID for later use. The best way to do it is to use \u2018docker run\u2019 with --cidfile FILE_NAME as running it again won\u2019t allow to overwrite the file. A good practice is to keep well ogranised directory structure: \/containers\/web\/server1\/ws.cid containers\/web\/server3\/ws.cid"},{"question":"Can you remove (\u2018docker rm\u2019) a container that is paused?","answer":"No, to remove a container it must be stopped first."},{"question":"When would you use \u2018docker kill\u2019 or \u2018docker rm -f\u2019?","answer":"If you must stop the container really quickly\u2026 (someone pushed something to production on Friday evening?\u2026 ;) )"},{"question":"How to link containers?","answer":"The simplest way is to use network port mapping. There\u2019s also the - -link flag which is deprecated."},{"question":"What is the difference between a Docker image and a container?","answer":"An instance of an image is called a container. You have an image, which is a set of layers. If you start this image, you have a running container of this image. You can have many running containers of the same image.You can see all your images with docker images whereas you can see your running containers with docker ps (and you can see all containers with docker ps -a).So a running instance of an image is a container."},{"question":"What type of applications - Stateless or Stateful are more suitable for Docker Container?","answer":"It is preferable to create Stateless application for Docker Container. We can create a container out of our application and take out the configurable state parameters from application. Now we can run same container in Production as well as QA environments with different parameters. This helps in reusing the same Image in different scenarios. Also a stateless application is much easier to scale with Docker Containers than a stateful application."},{"question":"What are the most common instructions in Dockerfile?","answer":"Some of the common instructions in Dockerfile are as follows:\n*   FROM: We use FROM to set the base image for subsequent instructions. In every valid Dockerfile, FROM is the first instruction.\n*   LABEL: We use LABEL to organize our images as per project, module, licensing etc. We can also use LABEL to help in automation.\n    In LABEL we specify a key value pair that can be later used for programmatically handling the Dockerfile.\n*   RUN: We use RUN command to execute any instructions in a new layer on top of the current image. With each RUN command we add something on top of the image and use it in subsequent steps in Dockerfile.\n*   CMD: We use CMD command to provide default values of an executing container. In a Dockerfile, if we include multiple CMD commands, then only the last instruction is used."},{"question":"How to build envrionment-agnostic systems with Docker?","answer":"There are three main features helping to achieve that:\nVolumes\nEnvironment variable injection\nRead-only file systems"},{"question":"What is the difference between the COPY and ADD commands in a Dockerfile?","answer":"Although ADD and COPY are functionally similar, generally speaking, COPY is preferred. That\u2019s because it\u2019s more transparent than ADD. COPY only supports the basic copying of local files into the container, while ADD has some features (like local-only tar extraction and remote URL support) that are not immediately obvious. Consequently, the best use for ADD is local tar file auto-extraction into the image, as in ADD rootfs.tar.xz \/."},{"question":"What is the difference between CMD and ENTRYPOINT in a Dockerfile?","answer":"Both CMD and ENTRYPOINT instructions define what command gets executed when running a container. There are few rules that describe their co-operation.\nDockerfile should specify at least one of CMD or ENTRYPOINT commands.\nENTRYPOINT should be defined when using the container as an executable.\nCMD should be used as a way of defining default arguments for an ENTRYPOINT command or for executing an ad-hoc command in a container.\nCMD will be overridden when running the container with alternative argumen"},{"question":"How do I transfer a Docker image from one machine to another one without using a repository, no matter private or public?","answer":"You will need to save the Docker image as a tar file:sh\ndocker save - o <path for generated tar file> <image name>Then copy your image to a new system with regular file transfer tools such as cp or scp. After that you will have to load the image into Docker:sh\ndocker load -i <path to image tar file>"},{"question":"Is there a way to identify the status of a Docker container?","answer":"We can identify the status of a Docker container by running the command sh\ndocker ps \u2013awhich will in turn list down all the available docker containers with its corresponding statuses on the host. From there we can easily identify the container of interest to check its status correspondingly."},{"question":"What is Docker image?","answer":"Docker image is the source of Docker container. In other words, Docker images are used to create containers. Images are created with the build command, and they\u2019ll produce a container when started with run. Images are stored in a Docker registry such as registry.hub.docker.com because they can become quite large, images are designed to be composed of layers of other images, allowing a minimal amount of data to be sent when transferring images over the network."},{"question":"What is Docker container?","answer":"Docker containers include the application and all of its dependencies, but share the kernel with other containers, running as isolated processes in user space on the host operating system. Docker containers are not tied to any specific infrastructure: they run on any computer, on any infrastructure, and in any cloud."},{"question":"What is Docker hub?","answer":"Docker hub is a cloud-based registry service which allows you to link to code repositories, build your images and test them, stores manually pushed images, and links to Docker cloud so you can deploy images to your hosts. It provides a centralized resource for container image discovery, distribution and change management, user and team collaboration, and workflow automation throughout the development pipeline."},{"question":"Do I lose my data when the Docker container exits?","answer":"There is no loss of data when any of your Docker containers exits as any of the data that your application writes to the disk in order to preserve it. This will be done until the container is explicitly deleted. The file system for the Docker container persists even after the Docker container is halted."},{"question":"What are the various states that a Docker container can be in at any given point in time?","answer":"There are four states that a Docker container can be in, at any given point in time. Those states are as given as follows:\nRunning\nPaused\nRestarting\nExited\n[\u2b06] Entity Framework Interview Questions"},{"question":"Explain what is ADO.NET entity framework?","answer":"ADO.NET Entity Framework is an ORM (Object Relational Mapping) framework developed by Microsoft. It is an extension of ADO.NET that provides an automated mechanism to access and store data in the database. With the help of ADO.NET, database can be accessed without much required programming or code."},{"question":"What are the benefits of using EF?","answer":"The main and the only benefit of EF is it auto-generates code for the Model (middle layer), Data Access Layer, and mapping code, thus reducing a lot of development time."},{"question":"What is Entity Framework?","answer":"ADO.NET EF is an ORM (object-relational mapping) which creates a higher abstract object model over ADO.NET components. So rather than getting into dataset, datatables, command, and connection objects as shown in the below code, you work on higher level domain objects like customers, suppliers, etc."},{"question":"What are scalar and navigation properties in Entity Framework?","answer":"Scalar properties are those where actual values are contained in the entities. Normally a scalar property will map to a database field.\nNavigation properties help to navigate from one entity to another entity directly in the code."},{"question":"What are the different ways of creating these domain \/ entity objects?","answer":"Entity objects can be created in two ways: from a database structure, or by starting from scratch by creating a model."},{"question":"What is pluralize and singularize in the Entity Framework?","answer":"\u201cPluralize\u201d and \u201cSingularize\u201d give meaningful naming conventions to objects. In simple words it says do you want to represent your objects with the below naming convention:\nOne Customer record means \u201cCustomer\u201d (singular).\nLot of customer records means \u201cCustomer\u2019s\u201d (plural, watch the \u201cs\u201d)"},{"question":"What is migration in Entity Framework?","answer":"Entity Framework introduced a migration tool that automatically updates the database schema when your model changes without losing any existing data or other database objects.There are two kinds of Migration:\nAutomated Migration\nCode-based Migration"},{"question":"What is Code First approach in Entity Framework?","answer":"In Code First approach we avoid working with the Visual Designer of Entity Framework. In other words the EDMX file is excluded from the solution. So you now have complete control over the context class as well as the entity classes."},{"question":"How can we read records using Entity Framework classes?","answer":"In order to browse through records you can create the object of the context class and inside the context class you will get the records.For instance, in the below code snippet we are looping through a customer object collection. This customer collection is the output given by the context class CustomermytextEntities.csharp\nCustomermytestEntities obj = new CustomermytestEntities();\nforeach (Customer objCust in obj.Customers)\n{}"},{"question":"What is the purpose of a DBContext class?","answer":"You can think of DbContext as the database connection and a set of tables, and DbSet as a representation of the tables themselves. The DbContext allows you to link your model properties (presumably using the Entity Framework) to your database with a connection string. Later, when you wish to refer to a database in your controller to handle data, you reference the DbContext."},{"question":"What is Mapping?","answer":"The Mapping will have the information on how the Conceptual Models are mapped to Storage Models."},{"question":"What is Conceptual Model?","answer":"Conceptual Models are the model classes which contain the relationships. These are independent of the database design."},{"question":"What is Storage Model?","answer":"Storage Models are our database design models, which contains database tables, views, stored procs and keys with relationships."},{"question":"Mention in what all scenarios Entity Framework can be applicable?","answer":"Entity Framework can be applicable in three scenarios\nIf you have an existing database already or you want to build your database first than other parts of the application\nIf your prime focus is your domain classes and then create the database from your domain classes\nIf you want to design your database schema on the visual designer and create the classes and database"},{"question":"Mention what is Code First approach and Model First Approach in Entity Framework?","answer":"In Entity Framework,\nModel First Approach: In this approach we create entities, relationships directly on the design surface of EDMX.\nCode Approach: For code approach we avoid working with the visual designer or entity framework.\n[\u2b06] Flutter Interview Questions"},{"question":"When to use main Axis Alignment and cross Axis Alignment?","answer":"For Row:\nmainAxisAlignment = Horizontal Axis \ncrossAxisAlignment = Vertical AxisFor Column:mainAxisAlignment = Vertical Axis    \ncrossAxisAlignment = Horizontal AxisImage source"},{"question":"What is Flutter?","answer":"Flutter is an open-source UI toolkit from Google for crafting beautiful, natively compiled applications for desktop, web, and mobile from a single codebase. Flutter apps are built using the Dart programming language."},{"question":"What is the pubspec.yaml file and what does it do?","answer":"The pubspec.yaml file allows you to define the packages your app relies on, declare your assets like images, audio, video, etc. \nIt allows you to set constraints for your app. \nFor Android developers, this is roughly similar to a build.gradle file."},{"question":"When should you use WidgetsBindingObserver?","answer":"WidgetsBindingObserver should be used when we want to listen to the AppLifecycleState and call stop\/start on our services."},{"question":"What is the difference between \"main()\" and \"runApp()\" functions in Flutter?","answer":"main () function came from Java-like languages so it's where all program started, without it, you can't write any program on Flutter even without UI.\nrunApp() function should return Widget that would be attached to the screen as a root of the Widget Tree that will be rendered."},{"question":"What is the difference between Expanded and Flexible widgets?","answer":"Expanded is just a shorthand for FlexibleUsing expanded this way:\ndart\nExpanded(\n    child: Foo(),\n);\nis strictly equivalent to:\ndart\nFlexible(\n    fit: FlexFit.tight,\n    child: Foo(),\n);You may want to use Flexible over Expanded when you want a different fit, useful in some responsive layouts.The difference between FlexFit.tight and FlexFit.loose is that loose will allow its child to have a maximum size while tight forces that child to fill all the available space."},{"question":"How is Flutter different from a WebView based application?","answer":"Code you write for a WebView or an app that runs similarly has to go through multiple layers to finally get executed (like Cordova for Ionic). In essence, Flutter leapfrogs that by compiling down to native ARM code to execute on both platforms. \n\u201cHybrid\u201d apps are slow, sluggish and look different from the platform they run on. Flutter apps run much, much faster than their hybrid counterparts. \nIt\u2019s much easier to access native components and sensors using plugins rather than using WebView which can\u2019t take full use of their platform."},{"question":"What is the pubspec.yaml file and what does it do?","answer":"The Pubspec.yaml allows you to define the packages your app relies on, declare your assets like images, audio, video, etc. It also allows you to set constraints for your app. For Android developers, this is roughly similar to a build.gradle file, but the differences between the two are also evident."},{"question":"What is a \"widget\" and mention its importance in Flutter?","answer":"Widgets are basically the UI components in Flutter.\nIt is a way to describe the configuration of an Element.\nThey are inspired from components in React.\nWidgets are important in Flutter because everything within a Flutter application is a  Widget  , from a simple \u201cText\u201d  to \u201cButtons\u201d  to \u201cScreen Layouts\u201d."},{"question":"What is Dart and why does Flutter use it?","answer":"Dart is an object-oriented, garbage-collected programming language that you use to develop Flutter apps.\nIt was also created by Google, but is open-source, and has community inside and outside Google.\nDart was chosen as the language of Flutter for the following reason: \n- Dart is AOT (Ahead Of Time) compiled to fast, predictable, native code, which allows almost all of Flutter to be written in Dart. This not only makes Flutter fast, virtually everything (including all the widgets) can be customized.\n- Dart can also be JIT (Just In Time) compiled for exceptionally fast development cycles and game-changing workflow (including Flutter\u2019s popular sub-second stateful hot reload).\n- Dart allows Flutter to avoid the need for a separate declarative layout language like JSX or XML, or separate visual interface builders, because Dart\u2019s declarative, programmatic layout is easy to read and visualize. And with all the layout in one language and in one place, it is easy for Flutter to provide advanced tooling that makes layout a snap."},{"question":"What is an App state?","answer":"State that is not ephemeral, that you want to share across many parts of your app, and that you want to keep between user sessions, is what we call application state (sometimes also called shared state).\nExamples of application state:\nUser preferences\nLogin info\nNotifications in a social networking app\nThe shopping cart in an e-commerce app\nRead\/unread state of articles in a news app"},{"question":"How many types of widgets are there in Flutter?","answer":"There are two types of widgets:\n1.  StatelessWidget\u200a: A widget that does not require mutable state.\n2.  StatefulWidget: A widget that has mutable state."},{"question":"What are the different build modes in Flutter?","answer":"The Flutter tooling supports three modes when compiling your app, and a headless mode for testing. \nYou choose a compilation mode depending on where you are in the development cycle.\nThe modes are:\nDebug\nProfile\nRelease"},{"question":"What is Fat Arrow Notation in Dart and when do you use it?","answer":"The fat arrow syntax is simply a short hand for returning an expression and is similar to (){ return expression; }.The fat arrow is for returning a single line, braces are for returning a code block.Only an expression\u2014not a statement\u2014can appear between the arrow (=>) and the semicolon (;). For example, you can\u2019t put an if statement there, but you can use a conditional expression\n```dart\n\/\/ Normal function\nvoid function1(int a) {\n  if (a == 3) {\n    print('arg was 3');\n  } else {\n    print('arg was not 3');\n  }\n}\/\/ Arrow Function\nvoid function2(int a) => print('arg was ${a == 3 ? '' : 'not '}3');\n```"},{"question":"Does Flutter work like a browser? How is it different from a WebView based application?","answer":"To answer this question simply: Code you write for a WebView or an app that runs similarly has to go through multiple layers to finally get executed. In essence, Flutter leapfrogs that by compiling down to native ARM code to execute on both platforms. \u201cHybrid\u201d apps are slow, sluggish and look different from the platform they run on. Flutter apps run much, much faster than their hybrid counterparts. Also, it\u2019s much easier to access native components and sensors using plugins rather than using WebViews which can\u2019t take full use of their platform.[\u2b06] Git Interview Questions"},{"question":"What is the command to write a commit message in Git?","answer":"Use:\nsh\ngit commit -a-a on the command line instructs git to commit the new content of all tracked files that have been modified. You can use \nsh\ngit add <file>\nor \nsh\ngit add -Abefore git commit -a if new files need to be committed for the first time."},{"question":"What is difference between Git vs SVN?","answer":"The main point in Git vs SVN debate boils down to this: Git is a distributed version control system (DVCS), whereas SVN is a centralized version control system."},{"question":"What is Git?","answer":"Git is a Distributed Version Control system (DVCS). It can track changes to a file and allows you to revert back to any particular change.Its distributed architecture provides many advantages over other Version Control Systems (VCS) like SVN one major advantage is that it does not rely on a central server to store all the versions of a project\u2019s files."},{"question":"What's the difference between a \"pull request\" and a \"branch\"?","answer":"A branch is just a separate version of the code.\n\n\nA pull request is when someone take the repository, makes their own branch, does some changes, then tries to merge that branch in (put their changes in the other person's code repository)."},{"question":"What is Git fork? What is difference between fork, branch and clone?","answer":"A fork is a remote, server-side copy of a repository, distinct from the original. A fork isn't a Git concept really, it's more a political\/social idea. \nA clone is not a fork; a clone is a local copy of some remote repository.  When you clone, you are actually copying the entire source repository, including all the history and branches.\nA branch is a mechanism to handle the changes within a single repository in order to eventually merge them with the rest of code. A branch is something that is within a repository. Conceptually, it represents a thread of development."},{"question":"What is the difference between \"git pull\" and \"git fetch\"?","answer":"In the simplest terms, git pull does a git fetch followed by a git merge.\n\nWhen you use pull, Git tries to automatically do your work for you. It is context sensitive, so Git will merge any pulled commits into the branch you are currently working in.  pull automatically merges the commits without letting you review them first. If you don\u2019t closely manage your branches, you may run into frequent conflicts.\n\n\nWhen you fetch, Git gathers any commits from the target branch that do not exist in your current branch and stores them in your local repository. However, it does not merge them with your current branch. This is particularly useful if you need to keep your repository up to date, but are working on something that might break if you update your files. To integrate the commits into your master branch, you use merge."},{"question":"How does the Centralized Workflow work?","answer":"The Centralized Workflow uses a central repository to serve as the single point-of-entry for all changes to the project. The default development branch is called master and all changes are committed into this branch.Developers start by cloning the central repository. In their own local copies of the project, they edit files and commit changes. These new commits are stored locally.To publish changes to the official project, developers push their local master branch to the central repository. Before the developer can publish their feature, they need to fetch the updated central commits and rebase their changes on top of them. Compared to other workflows, the Centralized Workflow has no defined pull request or forking patterns."},{"question":"You need to update your local repos. What git commands will you use?","answer":"It\u2019s a two steps process. First you fetch the changes from a remote named origin:sh\ngit fetch origin\nThen you merge a branch master to local:sh\ngit merge origin\/master\nOr simply:sh\ngit pull origin master\nIf origin is a default remote and \u2018master\u2019 is default branch, you can drop it eg. git pull."},{"question":"How to undo the most recent commits in Git?","answer":"Details:\nYou accidentally committed wrong files to Git, but haven't pushed the commit to the server yet.\nHow can you undo those commits from the local repository?sh\n$ git commit -m \"Something terribly misguided\"      \n$ git reset HEAD~                                   # copied the old head to .git\/ORIG_HEAD\n<< edit files as necessary >>                       \n$ git add ...                                       \n$ git commit -c ORIG_HEAD                           # will open an editor, which initially contains the log message from the old commit and allows you to edit it[\u2b06] Golang Interview Questions"},{"question":"What is Go?","answer":"Go is a general-purpose language designed with systems programming in mind. It was initially developed at Google in year 2007 by Robert Griesemer, Rob Pike, and Ken Thompson. It is strongly and statically typed, provides inbuilt support for garbage collection and supports concurrent programming. Programs are constructed using packages, for efficient management of dependencies. Go programming implementations use a traditional compile and link model to generate executable binaries."},{"question":"Is Go a new language, framework or library?","answer":"Go isn't a library and not a framework, it's a new language. Go is mostly in the C family (basic syntax), with significant input from the Pascal\/Modula\/Oberon family (declarations, packages). Go does have an extensive library, called the runtime, that is part of every Go program. Although it is more central to the language, Go's runtime is analogous to libc, the C library. It is important to understand, however, that Go's runtime does not include a virtual machine, such as is provided by the Java runtime. Go programs are compiled ahead of time to native machine code."},{"question":"Can you declared multiple types of variables in single declaration in Go?","answer":"Yes. Variables of different types can be declared in one go using type inference.go\nvar a, b, c =  3,  4,  \"foo\""},{"question":"What is a pointer?","answer":"A pointer variable can hold the address of a variable.Consider:\ngo\nvar x =  5  var p *int p =  &x\nfmt.Printf(\"x = %d\",  *p)Here x can be accessed by *p."},{"question":"Can you return multiple values from a function?","answer":"A Go function can return multiple values.Consider:\n```go\npackage main\nimport \"fmt\"func swap(x, y string) (string, string) {\n   return y, x\n}\nfunc main() {\n   a, b := swap(\"Mahesh\", \"Kumar\")\n   fmt.Println(a, b)\n}\n```"},{"question":"What are some advantages of using Go?","answer":"Go is an attempt to introduce a new, concurrent, garbage-collected language with fast compilation and the following benefits: \n* It is possible to compile a large Go program in a few seconds on a single computer.\n* Go provides a model for software construction that makes dependency analysis easy and avoids much of the overhead of C-style include files and libraries.\n* Go's type system has no hierarchy, so no time is spent defining the relationships between types. Also, although Go has static types, the language attempts to make types feel lighter weight than in typical OO languages.\n* Go is fully garbage-collected and provides fundamental support for concurrent execution and communication.\n* By its design, Go proposes an approach for the construction of system software on multicore machines."},{"question":"Why the Go language was created?","answer":"Go was born out of frustration with existing languages and environments for systems programming. Go is an attempt to have:\n* an interpreted, dynamically typed language with \n* the efficiency and safety of a statically typed, compiled language\n* support for networked and multicore computing\n* be fast in compilationTo meet these goals required addressing a number of linguistic issues: an expressive but lightweight type system; concurrency and garbage collection; rigid dependency specification; and so on. These cannot be addressed well by libraries or tools so a new language was born."},{"question":"Explain this code","answer":"Details:\nIn Go there are various ways to return a struct value or slice thereof. Could you explain the difference?```go\ntype MyStruct struct {\n    Val int\n}func myfunc() MyStruct {\n    return MyStruct{Val: 1}\n}func myfunc() *MyStruct {\n    return &MyStruct{}\n}func myfunc(s *MyStruct) {\n    s.Val = 1\n}\n```Shortly: \n* the first returns a copy of the struct, \n* the second a pointer to the struct value created within the function, \n* the third expects an existing struct to be passed in and overrides the value."},{"question":"What is dynamic type declaration of a variable in Go?","answer":"A dynamic type variable declaration requires compiler to interpret the type of variable based on value passed to it. Compiler don't need a variable to have type statically as a necessary requirement."},{"question":"What are Goroutines?","answer":"Goroutines are functions or methods that run concurrently with other functions or methods. Goroutines can be thought of as light weight threads. The cost of creating a Goroutine is tiny when compared to a thread. Its common for Go applications to have thousands of Goroutines running concurrently."},{"question":"Let's talk variable declaration in Go. Could you explain what is a variable \"zero value\"?","answer":"Variable is the name given to a memory location to store a value of a specific type. There are various syntaxes to declare variables in go.```go\n\/\/ 1 - variable declaration, then assignment\nvar age int\nage = 29\/\/ 2 - variable declaration with initial value\nvar age2 int = 29\/\/ 3 - Type inference\nvar age3 = 29\/\/ 4 - declaring multiple variables\nvar width, height int = 100, 50\/\/ 5 - declare variables belonging to different types in a single statement\nvar (\n      name1 = initialvalue1,\n      name2 = initialvalue2\n)\n\/\/ 6 - short hand declaration\nname, age4 := \"naveen\", 29 \/\/short hand declaration\n```If a variable is not assigned any value, go automatically initialises it with the zero value of the variable's type. Go is strongly typed, so variables declared as belonging to one type cannot be assigned a value of another type."},{"question":"What kind of type conversion is supported by Go?","answer":"Go is very strict about explicit typing. There is no automatic type promotion or conversion. Explicit type conversion is required to assign a variable of one type to another. Consider:\ngo\ni := 55      \/\/int\nj := 67.8    \/\/float64\nsum := i + int(j) \/\/j is converted to int"},{"question":"What is static type declaration of a variable in Go?","answer":"Static type variable declaration provides assurance to the compiler that there is one variable existing with the given type and name so that compiler proceed for further compilation without needing complete detail about the variable. A variable declaration has its meaning at the time of compilation only, compiler needs actual variable declaration at the time of linking of the program."},{"question":"How to efficiently concatenate strings in Go?","answer":"Details:\nIn Go, a string is a primitive type, which means it is read-only, and every manipulation of it will create a new string.So if I want to concatenate strings many times without knowing the length of the resulting string, what's the best way to do it?Beginning with Go 1.10 there is a strings.Builder. A Builder is used to efficiently build a string using Write methods. It minimizes memory copying. The zero value is ready to use.```go\npackage mainimport (\n    \"strings\"\n    \"fmt\"\n)func main() {\n    var str strings.Builderfor i := 0; i < 1000; i++ {\n    str.WriteString(\"a\")\n}\n\nfmt.Println(str.String())\n}\n```"},{"question":"What are the benefits of using Go programming?","answer":"Following are the benefits of using Go programming:\nSupport for environment adopting patterns similar to dynamic languages. For example type inference (x := 0 is valid declaration of a variable x of type int).\nCompilation time is fast.\nIn built concurrency support: light-weight processes (via goroutines), channels, select statement.\nConciseness, Simplicity, and Safety.\nSupport for Interfaces and Type embedding.\nThe go compiler supports static linking. All the go code can be statically linked into one big fat binary and it can be deployed in cloud servers easily without worrying about dependencies."},{"question":"Does Go have exceptions?","answer":"No, Go takes a different approach. For plain error handling, Go's multi-value returns make it easy to report an error without overloading the return value. Go code uses error values to indicate an abnormal state. Consider:\ngo\nfunc Open(name string) (file *File, err error)\ngo\nf, err := os.Open(\"filename.ext\")\nif err != nil {\n    log.Fatal(err)\n}\n\/\/ do something with the open *File f[\u2b06] GraphQL Interview Questions"},{"question":"Is GraphQL a Database Technology?","answer":"No. GraphQL is often confused with being a database technology. This is a misconception, GraphQL is a query language for APIs - not databases. In that sense it\u2019s database agnostic and can be used with any kind of database or even no database at all."},{"question":"What is GraphQL?","answer":"GraphQL is a query language created by Facebook in 2012 which provides a common interface between the client and the server for data fetching and manipulations.The client asks for various data from the GraphQL server via queries. The response format is described in the query and defined by the client instead of the server: they are called client\u2010specified queries.\nThe structure of the data is not hardcoded as in traditional REST APIs - this makes retrieving data from the server more efficient for the client."},{"question":"Is GraphQL only for React \/ Javascript Developers?","answer":"No. GraphQL is an API technology so it can be used in any context where an API is required.On the backend, a GraphQL server can be implemented in any programming language that can be used to build a web server. Next to Javascript, there are popular reference implementations for Ruby, Python, Scala, Java, Clojure, Go and .NET.Since a GraphQL API is usually operated over HTTP, any client that can speak HTTP is able to query data from a GraphQL server.Note: GraphQL is actually transport layer agnostic, so you could choose other protocols than HTTP to implement your server."},{"question":"What is an exclamation point in GraphQL?","answer":"That means that the field is non-nullable. By default, all types in GraphQL are nullable. When non-null is applied to the type of a field, it means that if the server resolves that field to null, the response will fail validation."},{"question":"How to do Error Handling?","answer":"A successful GraphQL query is supposed to return a JSON object with a root field called \"data\". If the request fails or partially fails (e.g. because the user requesting the data doesn\u2019t have the right access permissions), a second root field called \"errors\" is added to the response:\njs\n    {\n      \"data\": { ... },\n      \"errors\": [ ... ]\n    }"},{"question":"Where is GraphQL useful?","answer":"GraphQL helps where your client needs a flexible response format to avoid extra queries and\/or massive data transformation with the overhead of keeping them in sync.Using a GraphQL server makes it very easy for a client side developer to change the response format without any change on the backend.With GraphQL, you can describe the required data in a more natural way. It can speed up development, because in application structures like top-down rendering in React, the required data is more similar to your component structure."},{"question":"What is difference between Mutation and Query?","answer":"Technically any GraphQL query could be implemented to cause a data write. But there is a convention that any operations that cause writes should be sent explicitly via a mutation.Besides the difference in the semantic, there is one important technical difference:Query fields can be executed in parallel by the GraphQL engine while Mutation top-level fields MUST execute serially according to the spec."},{"question":"What is GraphQL schema?","answer":"Every GraphQL server has two core parts that determine how it works: a schema and resolve functions.The schema is a model of the data that can be fetched through the GraphQL server. It defines what queries clients are allowed to make, what types of data can be fetched from the server, and what the relationships between these types are. Consider:css\ntype Author {\n  id: Int\n  name: String\n  posts: [Post]\n}\ntype Post {\n  id: Int\n  title: String\n  text: String\n  author: Author\n}\ntype Query {\n  getAuthor(id: Int): Author\n  getPostsByTitle(titleContains: String): [Post]\n}\nschema {\n  query: Query\n}[\u2b06] HTML5 Interview Questions"},{"question":"What is an iframe and how it works?","answer":"An iframe is an HTML document which can be embedded inside another HTML page.Example:```html```"},{"question":"Explain meta tags in HTML","answer":"Meta tags always go inside head tag of the HTML page\nMeta tags is always passed as name\/value pairs\nMeta tags are not displayed on the page but intended for the browser\nMeta tags can contain information about character encoding, description, title of the document etc,\nExample:```html\n\n\nHome Page\n\n\n\n```"},{"question":"What is the purpose of the alt attribute on images?","answer":"The alt attribute provides alternative information for an image if a user cannot view it. The alt attribute should be used to describe any images except those which only serve a decorative purposes, in which case it should be left empty."},{"question":"Write a HTML table tag sequence that outputs the following","answer":"Write a HTML table tag sequence that outputs the following:\n50 pcs 100 500\n10 pcs 5 50```html\n\n50 pcs\n100\n500\n\n\n10 pcs\n5\n50\n\n```"},{"question":"What were some of the key goals and motivations for the HTML5 specification?","answer":"HTML5 was designed to replace HTML 4, XHTML, and the HTML DOM Level 2. The key goals and motivations behind the HTML5 specification were to:\nDeliver rich content (graphics, movies, etc.) without the need for additional plugins, such as Flash.\nProvide better semantic support for web page structure through new structural element tags.\nProvide a stricter parsing standard to simplify error handling, ensure more consistent cross-browser behaviour, and simplify compatibility with documents written to older standards.\nProvide better cross-platform support whether running on a PC, Tablet, or Smartphone."},{"question":"hat's the difference between an \"attribute\" and a \"property\" in HTML?","answer":"Attributes are defined on the HTML markup but properties are defined on the DOM. To illustrate the difference, imagine we have this text field in our HTML: <input type=\"text\" value=\"Hello\">.js\nconst input = document.querySelector('input');\nconsole.log(input.getAttribute('value')); \/\/ Hello\nconsole.log(input.value); \/\/ HelloBut after you change the value of the text field by adding \"World!\" to it, this becomes:js\nconsole.log(input.getAttribute('value')); \/\/ Hello\nconsole.log(input.value); \/\/ Hello World!"},{"question":"Briefly describe the correct usage of the following HTML5 semantic elements: , , ,","answer":"<header> is used to contain introductory and navigational information about a section of the page. This can include the section heading, the author\u2019s name, time and date of publication, table of contents, or other navigational information.\n\n\n<article> is meant to house a self-contained composition that can logically be independently recreated outside of the page without losing it\u2019s meaining. Individual blog posts or news stories are good examples.\n\n\n<section> is a flexible container for holding content that shares a common informational theme or purpose.\n\n\n<footer> is used to hold information that should appear at the end of a section of content and contain additional information about the section. Author\u2019s name, copyright information, and related links are typical examples of such content."},{"question":"How Can I Get Indexed Better by Search Engines?","answer":"It is possible to get indexed better by placing the following two statements in the <HEAD> part of your documents:html\n<META NAME=\"keywords\" CONTENT=\"keyword keyword keyword keyword\">\n<META NAME=\"description\" CONTENT=\"description of your site\">\nBoth may contain up to 1022 characters. If a keyword is used more than 7 times, the keywords tag will be ignored altogether. Also, you cannot put markup (other than entities) in the description or keywords list."},{"question":"What is Character Encoding?","answer":"To display an HTML page correctly, a web browser must know which character set (character encoding) to use. This is specified in the  tag:HTML4:\nhtml\n<meta http-equiv=\"Content-Type\" content=\"text\/html;charset=ISO-8859-1\">HTML5:\nhtml\n<meta charset=\"UTF-8\">"},{"question":"What is the difference between span and div?","answer":"div is a block element\nspan is inline element \nFor bonus points, you could point out that it\u2019s illegal to place a block element inside an inline element, and that while div can have a p tag, and a p tag can have a span, it is not possible for span to have a div or p tag inside."},{"question":"What is a self closing tag?","answer":"In HTML5 it is not strictly necessary to close certain HTML tags. The tags that aren\u2019t required to have specific closing tags are called \u201cself closing\u201d tags.An example of a self closing tag is something like a line break (<br \/>) or the meta tag (<meta>). This means that the following are both acceptable:html\n<meta charset=\"UTF-8\">\n...\n<meta charset=\"UTF-8\" \/>"},{"question":"How can you highlight text in HTML?","answer":"If you are working with an HTML5 page, the <mark> tag can be a quick and easy way of highlighting or marking text on a page:html\n<mark>highlighted text<\/mark>To highlight text with just HTML code and support for all browsers, set the background-color style, as shown in the example below, using the  HTML tag.\nhtml\n<span style=\"background-color: #FFFF00\">Yellow text.<\/span>[\u2b06] Ionic Interview Questions"},{"question":"What is Ionic Framework?","answer":"Ionic Framework is an open source UI toolkit for building performant, high-quality mobile and desktop apps using web technologies (HTML, CSS, and JavaScript). Ionic Framework is focused on the frontend user experience, or UI interaction of an app (controls, interactions, gestures, animations). Currently, Ionic Framework has official integrations with Angular and React, and support for Vue is in development."},{"question":"How can you test Ionic applications?","answer":"Ionic v.1 applications are built using AngularJS. Angular has a rich set of test libraries and frameworks such as Jasmine and Karma test runner. These frameworks can be used to write unit tests for Ionic applications. Also, ionic-CLI provides live reload feature so the application can be tested in the browser. For example, the ionic serve command can be used to load the application in any browser. Thus, we can use Chrome Developer Tools or Mozilla Firefox with Firebug to debug and inspect Ionic applications."},{"question":"What is hybrid app development?","answer":"Hybrid apps are developed using web technologies like HTML, CSS and Javascript, and then wrapped in a native application using platforms like Cordova. The apps are shown in its own embedded browser, like UIWebView in iOS and WebView in Android (not Safari or Chrome). This allows you to use any web-native framework for mobile app development."},{"question":"Can we work with Ionic > 1 and AngularJS?","answer":"Unfortunately, no. Ionic (1) at a very high-level is essentially just a wrapper & directive\/component library for AngularJS (1). In that same regard, Ionic 2 is built in the same way, utilizing all the benefits of Angular 2+.Ionic 2 breaks away from being tied to the DOM in the browser, by using angular 2 which is the reason for the massive change between ionic 1.x and ionic 2.x. ( Angular 2.x architecture is not tied down to the DOM unlike the Angular 1.x )."},{"question":"How do you pass data from one view to another in Ionic applications?","answer":"Ionic v.1 uses AngularJS and UI-router. It means you can use Angular services or UI-router\u2019s state resolve to pass data from one view to another. Since Angular services are singletons, data stored in services can be accessed across other Angular controllers.As mentioned, UI-router provides a resolve configuration. For example:\njs\n$stateProvider\n  .state('todos', {\n    url: '\/todos',\n    controller: 'TodosCtrl',\n    templateUrl: 'todos.html',\n    resolve: {\n      todos: function(TodosService) {\n        return TodosService.getTodos()\n      }\n    }\n  })One advantage of resolve over stateful services is better testing: as resolve injects dependencies in the controller, it is easy to test them.When using Ionic v.4 you have 3 options:\n1. Using Query Params (bad)\n2. Service and Resolve Function (legit)\n3. Using Router Extras State (new since Angular 7.2)js\n openDetailsWithState() {\n    let navigationExtras: NavigationExtras = {\n      state: {\n        user: this.user\n      }\n    };\n    this.router.navigate(['details'], navigationExtras);\n  }[\u2b06] JSON Interview Questions"},{"question":"What is JSON and why would I use it?","answer":"JSON (JavaScript Object Notation) is a lightweight format that is used for data interchanging. It is based on a subset of JavaScript language (the way objects are built in JavaScript). Some JavaScript is not JSON, and some JSON is not JavaScript."},{"question":"What is the correct JSON content type?","answer":"The MIME media type for JSON text is application\/json. The default encoding is UTF-8. (Source: RFC 4627)."},{"question":"How should I parse a JSON string in JavaScript?","answer":"The standard way to parse JSON in JavaScript is JSON.parse()The JSON API was introduced with ES5 (2011) and has since been implemented in >99% of browsers by market share, and Node.js. Its usage is simple:js\nconst json = '{ \"fruit\": \"pineapple\", \"fingers\": 10 }';\nconst obj = JSON.parse(json);\nconsole.log(obj.fruit, obj.fingers);[\u2b06] Java Interview Questions"},{"question":"What is JVM? Why is Java called the \u201cPlatform Independent Programming Language\u201d?","answer":"A Java virtual machine (JVM) is a process virtual machine that can execute Java bytecode. Each Java source file is compiled into a bytecode file, which is executed by the JVM. Java was designed to allow application programs to be built that could be run on any platform, without having to be rewritten or recompiled by the programmer for each separate platform. A Java virtual machine makes this possible, because it is aware of the specific instruction lengths and other particularities of the underlying hardware platform."},{"question":"What is a Servlet?","answer":"The servlet is a Java programming language class used to process client requests and generate dynamic web content. Servlets are mostly used to process or store data submitted by an HTML form, provide dynamic content and manage state information that does not exist in the stateless HTTP protocol."},{"question":"What is the Difference between JDK and JRE?","answer":"The Java Runtime Environment (JRE) is basically the Java Virtual Machine (JVM) where your Java programs are being executed. It also includes browser plugins for applet execution. \n\n\nThe Java Development Kit (JDK) is the full featured Software Development Kit for Java, including the JRE, the compilers and tools (like JavaDoc, and Java Debugger), in order for a user to develop, compile and execute Java applications."},{"question":"What is a JSP Page?","answer":"A Java Server Page (JSP) is a text document that contains two types of text: \n* static data and \n* JSP elements. Static data can be expressed in any text-based format, such as HTML or XML. JSP is a technology that mixes static content with dynamically-generated content."},{"question":"What is the difference between an Applet and a Java Application?","answer":"Applets are executed within a Java enabled browser, but a \nJava application is a standalone Java program that can be executed outside of a browser. \nHowever, they both require the existence of a Java Virtual Machine (JVM). Furthermore, a Java application requires a main method with a specific signature, in order to start its execution. Java applets don\u2019t need such a method to start their execution. Finally, Java applets typically use a restrictive security policy, while Java applications usually use more relaxed security policies."},{"question":"What are the two types of Exceptions in Java? Which are the differences between them?","answer":"Java has two types of exceptions: checked exceptions and unchecked exceptions. \n\nUnchecked exceptions do not need to be declared in a method or a constructor\u2019s throws clause, if they can be thrown by the execution of the method or the constructor, and propagate outside the method or constructor boundary. \n\n\nOn the other hand, checked exceptions must be declared in a method or a constructor\u2019s throws clause."},{"question":"How do I efficiently iterate over each entry in a Java Map?","answer":"Consider:\njava\nMap<String, String> map = ...\nfor (Map.Entry<String, String> entry : map.entrySet()) {\n    System.out.println(entry.getKey() + \"\/\" + entry.getValue());\n}\nIn Java 8 you can do it clean and fast using the new lambdas features:\njava\nfinal long[] i = {0};\nmap.forEach((k, v) -> i[0] += k + v);"},{"question":"Explain Serialization and Deserialization.","answer":"Java provides a mechanism, called object serialization where an object can be represented as a sequence of bytes and includes the object\u2019s data, as well as information about the object\u2019s type, and the types of data stored in the object. Thus, serialization can be seen as a way of flattening objects, in order to be stored on disk, and later, read back and reconstituted. Deserialisation is the reverse process of converting an object from its flattened state to a live object."},{"question":"What is the difference between an Interface and an Abstract class?","answer":"Java provides and supports the creation both of abstract classes and interfaces. Both implementations share some common characteristics, but they differ in the following features:\nAll methods in an interface are implicitly abstract. On the other hand, an abstract class may contain both abstract and non-abstract methods.\nA class may implement a number of Interfaces, but can extend only one abstract class.\nIn order for a class to implement an interface, it must implement all its declared methods. However, a class may not implement all declared methods of an abstract class. Though, in this case, the sub-class must also be declared as abstract.\nAbstract classes can implement interfaces without even providing the implementation of interface methods.\nVariables declared in a Java interface is by default final. An abstract class may contain non-final variables.\nMembers of a Java interface are public by default. A member of an abstract class can either be private, protected or public.\nAn interface is absolutely abstract and cannot be instantiated. An abstract class also cannot be instantiated, but can be invoked if it contains a main method."},{"question":"What are pass by reference and pass by value?","answer":"When an object is passed by value, this means that a copy of the object is passed. Thus, even if changes are made to that object, it doesn\u2019t affect the original value. \nWhen an object is passed by reference, this means that the actual object is not passed, rather a reference of the object is passed. Thus, any changes made by the external method, are also reflected in all places."},{"question":"What is the difference between processes and threads?","answer":"The main difference between them is that \n* a Process is a program which is executing some code and \n* a Thread is an independent path of execution in the process. A process can have more than one thread for doing independent task e.g. a thread for reading data from disk, a thread for processing that data and another thread for sending that data over the network."},{"question":"What\u2019s the difference between sendRedirect and forward methods?","answer":"The sendRedirect method creates a new request, while the forward method just forwards a request to a new target. The previous request scope objects are not available after a redirect, because it results in a new request. On the other hand, the previous request scope objects are available after forwarding. FInally, in general, the sendRedirect method is considered to be slower compare to the forward method."},{"question":"Explain the architechure of a Servlet.","answer":"The core abstraction that must be implemented by all servlets is the javax.servlet.Servlet interface. Each servlet must implement it either directly or indirectly, either by extending javax.servlet.GenericServlet or javax.servlet.http.HTTPServlet. Finally, each servlet is able to serve multiple requests in parallel using multithreading."},{"question":"What are JSP actions?","answer":"JSP actions use constructs in XML syntax to control the behavior of the servlet engine. JSP actions are executed when a JSP page is requested. They can be dynamically inserted into a file, re-use JavaBeans components, forward the user to another page, or generate HTML for the Java plugin.Some of the available actions are listed below:\njsp:include \u2013 includes a file, when the JSP page is requested.\njsp:useBean \u2013 finds or instantiates a JavaBean.\njsp:setProperty \u2013 sets the property of a JavaBean.\njsp:getProperty \u2013 gets the property of a JavaBean.\njsp:forward \u2013 forwards the requester to a new page.\njsp:plugin \u2013 generates browser-specific code."},{"question":"What are Expressions?","answer":"A JSP expression is used to insert the value of a scripting language expression, converted into a string, into the data stream returned to the client, by the web server. Expressions are defined between <% = and %> tags."},{"question":"What are Decalarations?","answer":"Declarations are similar to variable declarations in Java. Declarations are used to declare variables for subsequent use in expressions or scriptlets. To add a declaration, you must use the sequences to enclose your declarations."},{"question":"What does the \u201cstatic\u201d keyword mean? Can you override private or static method in Java?","answer":"The static keyword denotes that a member variable or method can be accessed, without requiring an instantiation of the class to which it belongs. A user cannot override static methods in Java, because method overriding is based upon dynamic binding at runtime and static methods are statically binded at compile time. A static method is not associated with any instance of a class so the concept is not applicable."},{"question":"What are the basic interfaces of Java Collections Framework?","answer":"Java Collections Framework provides a well designed set of interfaces and classes that support operations on a collections of objects. The most basic interfaces that reside in the Java Collections Framework are:\nCollection, which represents a group of objects known as its elements.\nSet, which is a collection that cannot contain duplicate elements.\nList, which is an ordered collection and can contain duplicate elements.\nMap,  which is an object that maps keys to values and cannot contain duplicate keys."},{"question":"What are Directives?","answer":"What are the different types of Directives available in JSP ? Directives are instructions that are processed by the JSP engine, when the page is compiled to a servlet. Directives are used to set page-level instructions, insert data from external files, and specify custom tag libraries. Directives are defined between < %@ and % >.The different types of directives are shown below:\nInclude directive: it is used to include a file and merges the content of the file with the current page.\nPage directive: it is used to define specific attributes in the JSP page, like error page and buffer.\nTaglib: it is used to declare a custom tag library which is used in the page."},{"question":"What is an Iterator?","answer":"The Iterator interface provides a number of methods that are able to iterate over any Collection. Each Java Collection contains the Iterator  method that returns an Iterator  instance. Iterators are capable of removing elements from the underlying collection during the iteration."},{"question":"How are the JSP requests handled?","answer":"On the arrival of a JSP request, the browser first requests a page with a .jsp extension. Then, the Web server reads the request and using the JSP compiler, the Web server converts the JSP page into a servlet class. Notice that the JSP file is compiled only on the first request of the page, or if the JSP file has changed.The generated servlet class is invoked, in order to handle the browser\u2019s request. Once the execution of the request is over, the servlet sends a response back to the client. See how to get Request parameters in a JSP."},{"question":"What is Function Overriding and Overloading in Java?","answer":"Method overloading in Java occurs when two or more methods in the same class have the exact same name, but different parameters. \n```java\nclass Dog{\n    public void bark(){\n        System.out.println(\"woof \");\n    }\/\/overloading method\npublic void bark(int num){\n    for(int i=0; i<num; i++)\n        System.out.println(\"woof \");\n}\n}\n```\nOn the other hand, method overriding is defined as the case when a child class redefines the same method as a parent class. Overridden methods must have the same name, argument list, and return type. The overriding method may not limit the access of the method it overrides.\n```java\nclass Dog{\n    public void bark(){\n        System.out.println(\"woof \");\n    }\n}\nclass Hound extends Dog{\n    public void sniff(){\n        System.out.println(\"sniff \");\n    }public void bark(){\n    System.out.println(\"bowl\");\n}\n}public class OverridingTest{\n    public static void main(String [] args){\n        Dog dog = new Hound();\n        dog.bark();\n    }\n}\n```"},{"question":"How HashMap works in Java?","answer":"A HashMap in Java stores key-value pairs. The HashMap requires a hash function and uses hashCode and equals methods, in order to put and retrieve elements to and from the collection respectively. When the put method is invoked, the HashMap calculates the hash value of the key and stores the pair in the appropriate index inside the collection. If the key exists, its value is updated with the new value. Some important characteristics of a HashMap are its capacity, its load factor and the threshold resizing."},{"question":"What differences exist between HashMap and Hashtable?","answer":"There are several differences between HashMap and Hashtable in Java:\n\nHashtable is synchronized, whereas HashMap is not. This makes HashMap better for non-threaded applications, as unsynchronized Objects typically perform better than synchronized ones.\n\n\nHashtable does not allow null keys or values.  HashMap allows one null key and any number of null values.\n\n\nOne of HashMap's subclasses is LinkedHashMap, so in the event that you'd want predictable iteration order (which is insertion order by default), you could easily swap out the HashMap for a LinkedHashMap.  This wouldn't be as easy if you were using Hashtable."},{"question":"What is the purpose Class.forName method?","answer":"This method is used to method is used to load the driver that will establish a connection to the database."},{"question":"What is JDBC?","answer":"JDBC is an abstraction layer that allows users to choose between databases. JDBC enables developers to write database applications in Java, without having to concern themselves with the underlying details of a particular database."},{"question":"What is the design pattern that Java uses for all Swing components?","answer":"The design pattern used by Java for all Swing components is the Model View Controller (MVC) pattern."},{"question":"How does Garbage Collection prevent a Java application from going out of memory?","answer":"It doesn\u2019t! Garbage Collection simply cleans up unused memory when an object goes out of scope and is no longer needed. However an application could create a huge number of large objects that causes an OutOfMemoryError."},{"question":"What do you know about the big-O notation and can you give some examples with respect to different data structures?","answer":"The Big-O notation simply describes how well an algorithm scales or performs in the worst case scenario as the number of elements in a data structure increases. The Big-O notation can also be used to describe other behavior such as memory consumption. Since the collection classes are actually data structures, we usually use the Big-O notation to chose the best implementation to use, based on time, memory and performance. Big-O notation can give a good indication about performance for large amounts of data."},{"question":"What are the Data Types supported by Java? What is Autoboxing and Unboxing?","answer":"The eight primitive data types supported by the Java programming language are:\nbyte\nshort\nint\nlong\nfloat\ndouble\nboolean\nchar\nAutoboxing is the automatic conversion made by the Java compiler between the primitive types and their corresponding object wrapper classes. If the conversion goes the other way, this operation is called unboxing."},{"question":"What is an Java Applet?","answer":"A Java Applet is program that can be included in a HTML page and be executed in a java enabled client browser. Applets are used for creating dynamic and interactive web applications."},{"question":"What will happen to the Exception object after exception handling?","answer":"The Exception object will be garbage collected in the next garbage collection."},{"question":"What is the importance of finally block in exception handling?","answer":"A finally block will always be executed, whether or not an exception is actually thrown. Even in the case where the catch statement is missing and an exception is thrown, the finally block will still be executed. Last thing to mention is that the finally block is used to release resources like I\/O buffers, database connections, etc."},{"question":"What is the purpose of garbage collection in Java, and when is it used?","answer":"The purpose of garbage collection is to identify and discard those objects that are no longer needed by the application, in order for the resources to be reclaimed and reused."},{"question":"What does System.gc() and Runtime.gc() methods do?","answer":"These methods can be used as a hint to the JVM, in order to start a garbage collection. However, this it is up to the Java Virtual Machine (JVM) to start the garbage collection immediately or later in time."},{"question":"What is the difference between Exception and Error in java?","answer":"An Error \"indicates serious problems that a reasonable application should not try to catch.\"\nAn Exception \"indicates conditions that a reasonable application might want to catch.\""},{"question":"What is reflection and why is it useful?","answer":"The name reflection is used to describe code which is able to inspect other code in the same system (or itself) and to make modifications at runtime.For example, say you have an object of an unknown type in Java, and you would like to call a 'doSomething' method on it if one exists. Java's static typing system isn't really designed to support this unless the object conforms to a known interface, but using reflection, your code can look at the object and find out if it has a method called 'doSomething' and then call it if you want to.java\nMethod method = foo.getClass().getMethod(\"doSomething\", null);\nmethod.invoke(foo, null);"},{"question":"When does an Object becomes eligible for Garbage collection in Java ?","answer":"A Java object is subject to garbage collection when it becomes unreachable to the program in which it is currently used.[\u2b06] JavaScript Interview Questions"},{"question":"What is Coercion in JavaScript?","answer":"In JavaScript conversion between different two build-in types called coercion.  Coercion comes in two forms in JavaScript: explicit and implicit.Here's an example of explicit coercion:\n```js\nvar a = \"42\";var b = Number( a );a;              \/\/ \"42\"\nb;              \/\/ 42 -- the number!\nAnd here's an example of implicit coercion:js\nvar a = \"42\";var b = a * 1;  \/\/ \"42\" implicitly coerced to 42 herea;              \/\/ \"42\"\nb;              \/\/ 42 -- the number!\n```"},{"question":"Explain equality in JavaScript","answer":"JavaScript has both strict and type\u2013converting comparisons: \n* Strict comparison (e.g., ===) checks for value equality without allowing coercion\n* Abstract comparison (e.g. ==) checks for value equality with coercion allowed```js\nvar a = \"42\";\nvar b = 42;a == b;         \/\/ true\na === b;        \/\/ false\n``\nSome simple equalityrules:\n* If either value (aka side) in a comparison could be thetrueorfalsevalue, avoid==and use===.\n* If either value in a comparison could be of these specific values (0,\"\", or[]-- empty array), avoid==and use===.\n* In all other cases, you're safe to use==`. Not only is it safe, but in many cases it simplifies your code in a way that improves readability."},{"question":"What is typeof operator?","answer":"JavaScript provides a typeof operator that can examine a value and tell you what type it is:\n```js\nvar a;\ntypeof a;               \/\/ \"undefined\"a = \"hello world\";\ntypeof a;               \/\/ \"string\"a = 42;\ntypeof a;               \/\/ \"number\"a = true;\ntypeof a;               \/\/ \"boolean\"a = null;\ntypeof a;               \/\/ \"object\" -- weird, buga = undefined;\ntypeof a;               \/\/ \"undefined\"a = { b: \"c\" };\ntypeof a;               \/\/ \"object\"\n```"},{"question":"What is the object type?","answer":"The object type refers to a compound value where you can set properties (named locations) that each hold their own values of any type. ```js\nvar obj = {\n    a: \"hello world\", \/\/ property\n    b: 42,\n    c: true\n};obj.a;      \/\/ \"hello world\", accessed with doted notation\nobj.b;      \/\/ 42\nobj.c;      \/\/ trueobj[\"a\"];   \/\/ \"hello world\", accessed with bracket notation\nobj[\"b\"];   \/\/ 42\nobj[\"c\"];   \/\/ true\nBracket notation is also useful if you want to access a property\/key but the name is stored in another variable, such as:js\nvar obj = {\n    a: \"hello world\",\n    b: 42\n};var b = \"a\";obj[b];         \/\/ \"hello world\"\nobj[\"b\"];       \/\/ 42\n```"},{"question":"Explain arrays in JavaScript","answer":"An array is an object that holds values (of any type) not particularly in named properties\/keys, but rather in numerically indexed positions:```js\nvar arr = [\n    \"hello world\",\n    42,\n    true\n];arr[0];         \/\/ \"hello world\"\narr[1];         \/\/ 42\narr[2];         \/\/ true\narr.length;     \/\/ 3typeof arr;     \/\/ \"object\"\n```"},{"question":"What is Scope in JavaScript?","answer":"In JavaScript, each function gets its own scope. Scope is basically a collection of variables as well as the rules for how those variables are accessed by name. Only code inside that function can access that function's scoped variables.A variable name has to be unique within the same scope. A scope can be nested inside another scope. If one scope is nested inside another, code inside the innermost scope can access variables from either scope."},{"question":"What does \"use strict\" do?","answer":"The use strict literal is entered at the top of a JavaScript program or at the top of a function and it helps you write safer JavaScript code by throwing an error if a global variable is created by mistake. For example, the following program will throw an error:js\nfunction doSomething(val) {\n  \"use strict\"; \n  x = val + 10;\n}`It will throw an error because x was not defined and it is being set to some value in the global scope, which isn't allowed with use strict The small change below fixes the error being thrown:js\nfunction doSomething(val) {\n  \"use strict\"; \n  var x = val + 10;\n}"},{"question":"Explain Null and Undefined in JavaScript","answer":"JavaScript (and by extension TypeScript) has two bottom types: null and undefined. They are intended to mean different things:\n* Something hasn't been initialized : undefined.\n* Something is currently unavailable: null."},{"question":"What's the difference between throw Error('msg') vs throw new Error('msg')?","answer":"Details:\njs\nvar err1 = Error('message');\nvar err2 = new Error('message');\nWhich one is correct and why?Both are fine; the function call Error(\u2026) is equivalent to the object creation expression new Error(\u2026) with the same arguments."},{"question":"Is there anyway to force using strict mode in Node.js?","answer":"you can placejs\n\"use strict\";at the top of your file in node >= 0.10.7, but if you want your whole app to run in strict (including external modules) you can do thissh\nnode --use_strict"},{"question":"What's the difference between host objects and native objects?","answer":"Native objects are objects that are part of the JavaScript language defined by the ECMAScript specification, such as String, Math, RegExp, Object, Function, etc.\nHost objects are provided by the runtime environment (browser or Node), such as window, XMLHTTPRequest, etc."},{"question":"What is strict mode?","answer":"Strict Mode is a new feature in ECMAScript 5 that allows you to place a program, or a function, in a \"strict\" operating context. This strict context prevents certain actions from being taken and throws more exceptions.```js\n\/\/ Non-strict code...(function(){\n  \"use strict\";\/\/ Define your library strictly...\n})();\/\/ Non-strict code...\n```"},{"question":"What is the difference between == and ===?","answer":"== is the abstract equality operator while === is the strict equality operator. The == operator will compare for equality after doing any necessary type conversions. The === operator will not do type conversion, so if two values are not the same type === will simply return false. When using ==, funky things can happen, such as:js\n1 == '1'; \/\/ true\n1 == [1]; \/\/ true\n1 == true; \/\/ true\n0 == ''; \/\/ true\n0 == '0'; \/\/ true\n0 == false; \/\/ trueMy advice is never to use the == operator, except for convenience when comparing against null or undefined, where a == null will return true if a is null or undefined.js\nvar a = null;\nconsole.log(a == null); \/\/ true\nconsole.log(a == undefined); \/\/ true"},{"question":"Explain the same-origin policy with regards to JavaScript.","answer":"The same-origin policy prevents JavaScript from making requests across domain boundaries. An origin is defined as a combination of URI scheme, hostname, and port number. This policy prevents a malicious script on one page from obtaining access to sensitive data on another web page through that page's Document Object Model."},{"question":"Make this work","answer":"Details:\njs\nduplicate([1, 2, 3, 4, 5]); \/\/ [1,2,3,4,5,1,2,3,4,5]```js\nfunction duplicate(arr) {\n  return arr.concat(arr);\n}duplicate([1, 2, 3, 4, 5]); \/\/ [1,2,3,4,5,1,2,3,4,5]\n```"},{"question":"FizzBuzz Challenge","answer":"Details:\nCreate a for loop that iterates up to 100 while outputting \"fizz\" at multiples of 3, \"buzz\" at multiples of 5 and \"fizzbuzz\" at multiples of 3 and 5.Check out this version of FizzBuzz:js\nfor (let i = 1; i <= 100; i++) {\n  let f = i % 3 == 0,\n    b = i % 5 == 0;\n  console.log(f ? (b ? 'FizzBuzz' : 'Fizz') : b ? 'Buzz' : i);\n}"},{"question":"What is a Polyfill?","answer":"A polyfill is essentially the specific code (or plugin) that would allow you to have some specific functionality that you expect in current or \u201cmodern\u201d browsers to also work in other browsers that do not have the support for that functionality built in.\n* Polyfills are not part of the HTML5 standard\n* Polyfilling is not limited to Javascript"},{"question":"Why would you use something like the load event? Does this event have disadvantages? Do you know any alternatives, and why would you use those?","answer":"The load event fires at the end of the document loading process. At this point, all of the objects in the document are in the DOM, and all the images, scripts, links and sub-frames have finished loading.The DOM event DOMContentLoaded will fire after the DOM for the page has been constructed, but do not wait for other resources to finish loading. This is preferred in certain cases when you do not need the full page to be loaded before initializing."},{"question":"Why is it, in general, a good idea to leave the global scope of a website as-is and never touch it?","answer":"Every script has access to the global scope, and if everyone uses the global namespace to define their variables, collisions will likely occur. Use the module pattern (IIFEs) to encapsulate your variables within a local namespace."},{"question":"What are some of the advantages\/disadvantages of writing JavaScript code in a language that compiles to JavaScript?","answer":"Some examples of languages that compile to JavaScript include CoffeeScript, Elm, ClojureScript, PureScript, and TypeScript.Advantages:\nFixes some of the longstanding problems in JavaScript and discourages JavaScript anti-patterns.\nEnables you to write shorter code, by providing some syntactic sugar on top of JavaScript, which I think ES5 lacks, but ES2015 is awesome.\nStatic types are awesome (in the case of TypeScript) for large projects that need to be maintained over time.\nDisadvantages:\nRequire a build\/compile process as browsers only run JavaScript and your code will need to be compiled into JavaScript before being served to browsers.\nDebugging can be a pain if your source maps do not map nicely to your pre-compiled source.\nMost developers are not familiar with these languages and will need to learn it. There's a ramp up cost involved for your team if you use it for your projects.\nSmaller community (depends on the language), which means resources, tutorials, libraries, and tooling would be harder to find.\nIDE\/editor support might be lacking.\nThese languages will always be behind the latest JavaScript standard.\nDevelopers should be cognizant of what their code is being compiled to\u200a\u2014\u200abecause that is what would actually be running, and that is what matters in the end.\nPractically, ES2015 has vastly improved JavaScript and made it much nicer to write. I don't really see the need for CoffeeScript these days."},{"question":"What language constructions do you use for iterating over object properties and array items?","answer":"For objects:\nfor loops - for (var property in obj) { console.log(property); }. However, this will also iterate through its inherited properties, and you will add an obj.hasOwnProperty(property) check before using it.\nObject.keys() - Object.keys(obj).forEach(function (property) { ... }). Object.keys() is a static method that will lists all enumerable properties of the object that you pass it.\nObject.getOwnPropertyNames() - Object.getOwnPropertyNames(obj).forEach(function (property) { ... }). Object.getOwnPropertyNames() is a static method that will lists all enumerable and non-enumerable properties of the object that you pass it.\nFor arrays:\nfor loops - for (var i = 0; i < arr.length; i++). The common pitfall here is that var is in the function scope and not the block scope and most of the time you would want block scoped iterator variable. ES2015 introduces let which has block scope and it is recommended to use that instead. So this becomes: for (let i = 0; i < arr.length; i++).\nforEach - arr.forEach(function (el, index) { ... }). This construct can be more convenient at times because you do not have to use the index if all you need is the array elements. There are also the every and some methods which will allow you to terminate the iteration early.\nMost of the time, I would prefer the .forEach method, but it really depends on what you are trying to do. for loops allow more flexibility, such as prematurely terminate the loop using break or incrementing the iterator more than once per loop."},{"question":"What is let keyword in JavaScript?","answer":"In addition to creating declarations for variables at the function level, ES6 lets you declare variables to belong to individual blocks (pairs of { .. }), using the let keyword."},{"question":"Explain what a callback function is and provide a simple example.","answer":"A callback function is a function that is passed to another function as an argument and is executed after some operation has been completed. Below is an example of a simple callback function that logs to the console after some operations have been completed.```js\nfunction modifyArray(arr, callback) {\n  \/\/ do something to arr here\n  arr.push(100);\n  \/\/ then execute the callback function that was passed\n  callback();\n}var arr = [1, 2, 3, 4, 5];modifyArray(arr, function() {\n  console.log(\"array has been modified\", arr);\n});\n```"},{"question":"Being told that an unsorted array contains (n - 1) of n consecutive numbers (where the bounds are defined), find the missing number in O(n) time","answer":"```js\n\/\/ The output of the function should be 8\nvar arrayOfIntegers = [2, 5, 1, 4, 9, 6, 3, 7];\nvar upperBound = 9;\nvar lowerBound = 1;findMissingNumber(arrayOfIntegers, upperBound, lowerBound); \/\/ 8function findMissingNumber(arrayOfIntegers, upperBound, lowerBound) {\n  \/\/ Iterate through array to find the sum of the numbers\n  var sumOfIntegers = 0;\n  for (var i = 0; i < arrayOfIntegers.length; i++) {\n    sumOfIntegers += arrayOfIntegers[i];\n  }\/\/ Find theoretical sum of the consecutive numbers using a variation of Gauss Sum.\n  \/\/ Formula: [(N * (N + 1)) \/ 2] - [(M * (M - 1)) \/ 2];\n  \/\/ N is the upper bound and M is the lower boundupperLimitSum = (upperBound * (upperBound + 1)) \/ 2;\n  lowerLimitSum = (lowerBound * (lowerBound - 1)) \/ 2;theoreticalSum = upperLimitSum - lowerLimitSum;return theoreticalSum - sumOfIntegers;\n}\n```"},{"question":"Remove duplicates of an array and return an array of only unique elements","answer":"```js\n\/\/ ES6 Implementation\nvar array = [1, 2, 3, 5, 1, 5, 9, 1, 2, 8];Array.from(new Set(array)); \/\/ [1, 2, 3, 5, 9, 8]\/\/ ES5 Implementation\nvar array = [1, 2, 3, 5, 1, 5, 9, 1, 2, 8];uniqueArray(array); \/\/ [1, 2, 3, 5, 9, 8]function uniqueArray(array) {\n  var hashmap = {};\n  var unique = [];for(var i = 0; i < array.length; i++) {\n    \/\/ If key returns undefined (unique), it is evaluated as false.\n    if(!hashmap.hasOwnProperty(array[i])) {\n      hashmap[array[i]] = 1;\n      unique.push(array[i]);\n    }\n  }return unique;\n}\n```"},{"question":"Explain Values and Types in JavaScript","answer":"JavaScript has typed values, not typed variables. The following built-in types are available:\n* string\n* number\n* boolean\n* null and undefined\n* object\n* symbol (new to ES6)"},{"question":"How would you check if a number is an integer?","answer":"A very simply way to check if a number is a decimal or integer is to see if there is a remainder left when you divide by 1.```js\nfunction isInt(num) {\n  return num % 1 === 0;\n}console.log(isInt(4)); \/\/ true\nconsole.log(isInt(12.2)); \/\/ false\nconsole.log(isInt(0.3)); \/\/ false\n```"},{"question":"Given a string, reverse each word in the sentence","answer":"Details:\nFor example Welcome to this Javascript Guide! should be become emocleW ot siht tpircsavaJ !ediuG```js\nvar string = \"Welcome to this Javascript Guide!\";\/\/ Output becomes !ediuG tpircsavaJ siht ot emocleW\nvar reverseEntireSentence = reverseBySeparator(string, \"\");\/\/ Output becomes emocleW ot siht tpircsavaJ !ediuG\nvar reverseEachWord = reverseBySeparator(reverseEntireSentence, \" \");function reverseBySeparator(string, separator) {\n  return string.split(separator).reverse().join(separator);\n}\n```"},{"question":"Write a function that would allow you to do this.","answer":"Details:\njs\nvar addSix = createBase(6);\naddSix(10); \/\/ returns 16\naddSix(21); \/\/ returns 27You can create a closure to keep the value passed to the function createBase even after the inner function is returned. The inner function that is being returned is created within an outer function, making it a closure, and it has access to the variables within the outer function, in this case the variable baseNumber.```js\nfunction createBase(baseNumber) {\n  return function(N) {\n    \/\/ we are referencing baseNumber here even though it was declared\n    \/\/ outside of this function. Closures allow us to do this in JavaScript\n    return baseNumber + N;\n  }\n}var addSix = createBase(6);\naddSix(10);\naddSix(21);\n```"},{"question":"How would you use a closure to create a private counter?","answer":"You can create a function within an outer function (a closure) that allows you to update a private variable but the variable wouldn't be accessible from outside the function without the use of a helper function.```js\nfunction counter() {\n  var _counter = 0;\n  \/\/ return an object with several functions that allow you\n  \/\/ to modify the private _counter variable\n  return {\n    add: function(increment) { _counter += increment; },\n    retrieve: function() { return 'The counter is currently at: ' + _counter; }\n  }\n}\/\/ error if we try to access the private variable like below\n\/\/ _counter;\/\/ usage of our counter function\nvar c = counter();\nc.add(5); \nc.add(9); \/\/ now we can access the private variable in the following way\nc.retrieve(); \/\/ => The counter is currently at: 14\n```"},{"question":"Implement enqueue and dequeue using only two stacks","answer":"Enqueue means to add an element, dequeue to remove an element.```js\nvar inputStack = []; \/\/ First stack\nvar outputStack = []; \/\/ Second stack\/\/ For enqueue, just push the item into the first stack\nfunction enqueue(stackInput, item) {\n  return stackInput.push(item);\n}function dequeue(stackInput, stackOutput) {\n  \/\/ Reverse the stack such that the first element of the output stack is the\n  \/\/ last element of the input stack. After that, pop the top of the output to\n  \/\/ get the first element that was ever pushed into the input stack\n  if (stackOutput.length <= 0) {\n    while(stackInput.length > 0) {\n      var elementToOutput = stackInput.pop();\n      stackOutput.push(elementToOutput);\n    }\n  }return stackOutput.pop();\n}\n```"},{"question":"How to check if an object is an array or not? Provide some code.","answer":"The best way to find whether an object is instance of a particular class or not using toString method from Object.prototype\njavascript\nvar arrayList = [1 , 2, 3];One of the best use cases of type checking of an object is when we do method overloading in JavaScript. For understanding this let say we have a method called greet which take one single string and also a list of string, so making our greet method workable in both situation we need to know what kind of parameter is being passed, is it single value or list of value?javascript\nfunction greet(param) {\n  if() {\n    \/\/ here have to check whether param is array or not\n  }\n  else {\n  }\n}However, in above implementation it might not necessary to check type for array, we can check for single value string and put array logic code in else block, let see below code for the same.javascript\n function greet(param) {\n   if(typeof param === 'string') {\n   }\n   else {\n     \/\/ If param is of type array then this block of code would execute\n   }\n }Now it's fine we can go with above two implementations, but when we have a situation like a parameter can be single value, array, and object type then we will be in trouble.Coming back to checking type of object, As we mentioned that we can use Object.prototype.toStringjavascript\nif(Object.prototype.toString.call(arrayList) === '[object Array]') {\n  console.log('Array!');\n}If you are using jQuery then you can also used jQuery isArray method:javascript\nif($.isArray(arrayList)) {\n  console.log('Array');\n} else {\n  console.log('Not an array');\n}FYI jQuery uses Object.prototype.toString.call internally to check whether an object is an array or not.In modern browser, you can also use:javascript\nArray.isArray(arrayList);Array.isArray is supported by Chrome 5, Firefox 4.0, IE 9, Opera 10.5 and Safari 5"},{"question":"How to empty an array in JavaScript?","answer":"Details:\njs\nvar arrayList =  ['a', 'b', 'c', 'd', 'e', 'f'];\nHow could we empty the array above?Method 1javascript\narrayList = [];Above code will set the variable arrayList to a new empty array. This is recommended if you don't have references to the original array arrayList anywhere else because It will actually create a new empty array. You should be careful with this way of empty the array, because if you have referenced this array from another variable, then the original reference array will remain unchanged, Only use this way if you have only referenced the array by its original variable arrayList.For Instance:javascript\nvar arrayList = ['a', 'b', 'c', 'd', 'e', 'f']; \/\/ Created array\nvar anotherArrayList = arrayList;  \/\/ Referenced arrayList by another variable\narrayList = []; \/\/ Empty the array\nconsole.log(anotherArrayList); \/\/ Output ['a', 'b', 'c', 'd', 'e', 'f']Method 2javascript\narrayList.length = 0;Above code will clear the existing array by setting its length to 0. This way of empty the array also update all the reference variable which pointing to the original array. This way of empty the array is useful when you want to update all the another reference variable which pointing to arrayList.For Instance:javascript\nvar arrayList = ['a', 'b', 'c', 'd', 'e', 'f']; \/\/ Created array\nvar anotherArrayList = arrayList;  \/\/ Referenced arrayList by another variable\narrayList.length = 0; \/\/ Empty the array by setting length to 0\nconsole.log(anotherArrayList); \/\/ Output []Method 3javascript\narrayList.splice(0, arrayList.length);Above implementation will also work perfectly. This way of empty the array will also update all the references of the original array.javascript\nvar arrayList = ['a', 'b', 'c', 'd', 'e', 'f']; \/\/ Created array\nvar anotherArrayList = arrayList;  \/\/ Referenced arrayList by another variable\narrayList.splice(0, arrayList.length); \/\/ Empty the array by setting length to 0\nconsole.log(anotherArrayList); \/\/ Output []Method 4javascript\nwhile(arrayList.length) {\n  arrayList.pop();\n}Above implementation can also empty the array. But not recommended to use often."},{"question":"Write a \"mul\" function which will properly when invoked as below syntax.","answer":"Details:\njavascript\nconsole.log(mul(2)(3)(4)); \/\/ output : 24\nconsole.log(mul(4)(3)(4)); \/\/ output : 48javascript\nfunction mul (x) {\n  return function (y) { \/\/ anonymous function\n    return function (z) { \/\/ anonymous function\n      return x * y * z;\n    };\n  };\n}Here mul function accept the first argument and return anonymous function which take the second parameter and return anonymous function which take the third parameter and return multiplication of arguments which is being passed in successiveIn JavaScript function defined inside has access to outer function variable and function is the first class object so it can be returned by function as well and passed as argument in another function.\n- A function is an instance of the Object type\n- A function can have properties and has a link back to its constructor method\n- Function can be stored as variable\n- Function can be pass as a parameter to another function\n- Function can be returned from function"},{"question":"Explain event bubbling and how one may prevent it","answer":"Event bubbling is the concept in which an event triggers at the deepest possible element, and triggers on parent elements in nesting order. As a result, when clicking on a child element one may exhibit the handler of the parent activating.One way to prevent event bubbling is using event.stopPropagation() or event.cancelBubble on IE < 9.[\u2b06] Kotlin Interview Questions"},{"question":"How to initialize an array in Kotlin with values?","answer":"Details:\nIn Java an array can be initialized such as:java\n int numbers[] = new int[] {10, 20, 30, 40, 50}How does Kotlin's array initialization look like?kotlin\nval numbers: IntArray = intArrayOf(10, 20, 30, 40, 50)"},{"question":"How to correctly concatenate a String in Kotlin?","answer":"In Kotlin, you can concatenate \n1. using string interpolation \/ templates\n kotlin\nval a = \"Hello\"\nval b = \"World\"\nval c = \"$a $b\"\n2. using the + \/ plus() operator\n ```kotlin\n val a = \"Hello\"\n val b = \"World\" \n val c = a + b   \/\/ same as calling operator function a.plus(b)\n val c = a.plus(b)print(c)\n 3. using the `StringBuilder`kotlin\n val a = \"Hello\"\n val b = \"World\"val sb = StringBuilder()\n sb.append(a).append(b)\n val c = sb.toString()print(c)\n ```"},{"question":"What is basic difference between fold and reduce in Kotlin? When to use which?","answer":"fold takes an initial value, and the first invocation of the lambda you pass to it will receive that initial value and the first element of the collection as parameters.\nkotlin \n listOf(1, 2, 3).fold(0) { sum, element -> sum + element }\n The first call to the lambda will be with parameters 0 and 1.Having the ability to pass in an initial value is useful if you have to provide some sort of default value or parameter for your operation.\nreduce doesn't take an initial value, but instead starts with the first element of the collection as the accumulator (called sum in the following example)\nkotlin\n listOf(1, 2, 3).reduce { sum, element -> sum + element }The first call to the lambda here will be with parameters 1 and 2."},{"question":"What is the idiomatic way to remove duplicate strings from array?","answer":"Details:\nHow to remove duplicates from an Array<String?> in Kotlin?Use the distinct extension function:kotlin\nval a = arrayOf(\"a\", \"a\", \"b\", \"c\", \"c\")\nval b = a.distinct() \/\/ [\"a\", \"b\", \"c\"]You can also use:\n* toSet, toMutableSet\n* toHashSet - if you don't need the original ordering to be preservedThese functions produce a Set instead of a List and should be a little bit more efficient than distinct."},{"question":"What is the difference between var and val in Kotlin?","answer":"var is like general variable and it's known as a mutable variable in kotlin and can be assigned multiple times.\n\n\nval is like Final variable and it's known as immutable in Kotlin and can be initialized only single time.\n\nsh\n+----------------+-----------------------------+---------------------------+\n|                |             val             |            var            |\n+----------------+-----------------------------+---------------------------+\n| Reference type | Immutable(once initialized  | Mutable(can able to change|\n|                | can't be reassigned)        | value)                    |\n+----------------+-----------------------------+---------------------------+\n| Example        | val n = 20                  | var n = 20                |\n+----------------+-----------------------------+---------------------------+\n| In Java        | final int n = 20;           | int n = 20;               |\n+----------------+-----------------------------+---------------------------+"},{"question":"Where should I use var and where val?","answer":"Use var where value is changing frequently. For example while getting location of android device:kotlin\nvar integerVariable : Int? = nullUse val where there is no change in value in whole class. For example you want set textview or button's text programmatically.kotlin\nval stringVariables : String = \"Button's Constant or final Text\""},{"question":"What is a data class in Kotlin?","answer":"We frequently create classes whose main purpose is to hold data. In Kotlin, this is called a data class and is marked as data:kotlin\ndata class User(val name: String, val age: Int)To ensure consistency and meaningful behavior of the generated code, data classes have to fulfill the following requirements:\nThe primary constructor needs to have at least one parameter;\nAll primary constructor parameters need to be marked as val or var;\nData classes cannot be abstract, open, sealed or inner;"},{"question":"What is a primary constructor in Kotlin?","answer":"The primary constructor is part of the class header. Unlike Java, you don't need to declare a constructor in the body of the class. Here's an example:kotlin\nclass Person(val firstName: String, var age: Int) {\n    \/\/ class body\n}The main idea is by removing the constructor keyword, our code gets simplified and easy to understand."},{"question":"How to create singleton in Kotlin?","answer":"Just use object.\nkotlin\nobject SomeSingleton\nThe above Kotlin object will be compiled to the following equivalent Java code:\n```java\npublic final class SomeSingleton {\n   public static final SomeSingleton INSTANCE;private SomeSingleton() {\n      INSTANCE = (SomeSingleton)this;\n      System.out.println(\"init complete\");\n   }static {\n      new SomeSingleton();\n   }\n}\n```\nThis is the preferred way to implement singletons on a JVM because it enables thread-safe lazy initialization without having to rely on a locking algorithm like the complex double-checked locking.[\u2b06] LINQ Interview Questions"},{"question":"What is LINQ?","answer":"LINQ stands for Language INtegrated Query. LINQ allows us to write queries over local collection objects and remote data sources like SQL, XML documents etc. We can write LINQ query on any collection class which implements the IEnumerable interface."},{"question":"Explain what is LINQ? Why is it required?","answer":"Language Integrated Query or LINQ is the collection of standard query operators which provides query facilities into.NET framework language like C#, VB.NET. LINQ is required as it bridges the gap between the world of data and the world of objects."},{"question":"What are the types of LINQ?","answer":"LINQ to Objects\nLINQ to XML\nLINQ to Dataset\nLINQ to SQL\nLINQ to Entities"},{"question":"List out the three main components of LINQ?","answer":"Three main components of LINQ are\nStandard Query Operators\nLanguage Extensions\nLINQ Providers"},{"question":"What are Extension Methods?","answer":"Extension methods are static functions of a static class. These methods can be invoked just like instance method syntax. These methods are useful when we can not want to modify the class. Consider:```csharp\npublic static class StringMethods\n{\n    public static bool IsStartWithLetterM(this string s)\n    {\n        return s.StartsWith(\"m\");\n    }\n}\nclass Program\n{\n    static void Main(string[] args)\n    {\n        string value = \"malslfds\";\n        Console.WriteLine(value.IsStartWithLetterM()); \/\/print true;    Console.ReadLine();\n}\n}\n```"},{"question":"Explain why SELECT clause comes after FROM clause in LINQ?","answer":"With other programming language and C#, LINQ is used, it requires all the variables to be declared first. \u201cFROM\u201d clause of LINQ query defines the range or conditions to select records. So, FROM clause must appear before SELECT in LINQ."},{"question":"What is Anonymous function?","answer":"An Anonymous function is a special function which does not have any name. We just define their parameters and define the code into the curly braces.Consider:\n```csharp\ndelegate int func(int a, int b);\nstatic void Main(string[] args)\n{\n    func f1 = delegate(int a, int b)\n    {\n        return a + b;\n    };Console.WriteLine(f1(1, 2));\n}\n```"},{"question":"What are Anonymous Types?","answer":"Anonymous types are types that are generated by compiler at run time. When we create a anonymous type we do not specify a name. We just write properties names and their values. Compiler at runtime create these properties and assign values to them.csharp\nvar k = new { FirstProperty = \"value1\", SecondProperty = \"value2\" };\nConsole.WriteLine(k.FirstProperty);Anonymous class is useful in LINQ queries to save our intermediate results.There are some restrictions on Anonymous types as well:\nAnonymous types can not implement interfaces.\nAnonymous types can not specify any methods.\nWe can not define static members.\nAll defined properties must be initialized.\nWe can only define public fields."},{"question":"Explain how LINQ is useful than Stored Procedures?","answer":"Debugging: It is difficult to debug a stored procedure but as LINQ is part of.NET, visual studio debugger can be used to debug the queries\nDeployment: For stored procedure, additional script should be provided but with LINQ everything gets compiled into single DLL hence deployment becomes easy\nType Safety: LINQ is type safe, so queries errors are type checked at compile time"},{"question":"In LINQ how will you find the index of the element using where() with Lambda Expressions?","answer":"In order to find the index of the element use the overloaded version of where() with the lambda expression:csharp\nwhere(( i, ix ) => i == ix);"},{"question":"Mention what is the role of DataContext classes in LINQ?","answer":"DataContext class acts as a bridge between SQL Server database and the LINQ to SQL. For accessing the database and also for changing the data in the database, it contains connections string and the functions. Essentially a DataContext class performs the following three tasks:\nCreate connection to database.\nIt submits and retrieves object to database.\nConverts objects to SQL queries and vice versa."},{"question":"Explain what is the purpose of LINQ providers in LINQ?","answer":"LINQ providers are set of classes that take an LINQ query which generates method that executes an equivalent query against a particular data source."},{"question":"Explain what is \u201cLINQ to Objects\u201d?","answer":"When LINQ queries any IEnumerable(<T>) collection or IEnumerable directly without the use of an intermediate LINQ provider or API such as LINQ to SQL or LINQ to XML is referred as LINQ to Objects.[\u2b06] Laravel Interview Questions"},{"question":"What is the Laravel?","answer":"Laravel is a free, open-source PHP web framework, created by Taylor Otwell and intended for the development of web applications following the model\u2013view\u2013controller (MVC) architectural pattern."},{"question":"Why do you prefer using Laravel?","answer":"Simple MVC that can be extended easily\nClean and secure routing\nPowerful Eloquent ORM for database\nMigrations\nThird party plugins"},{"question":"Is there any CLI for Laravel?","answer":"PHP artisan is the command line interface\/tool included with Laravel. It provides a number of helpful commands that can help you while you build your application easily. Here are the list of some artisian commands:\nphp artisan list\nphp artisan help\nphp artisan tinker\nphp artisan make\nphp artisan \u2013versian\nphp artisan make modal modal_name\nphp artisan make controller controller_name"},{"question":"What are some benefits of Laravel over other Php frameworks?","answer":"Setup and customisation process is  easy and fast as compared to others.\nInbuilt Authentication System\nSupports multiple file systems\nPre-loaded packages like Laravel Socialite, Laravel cashier, Laravel elixir, Passport, Laravel Scout\nEloquent ORM (Object Relation Mapping) with PHP active record implementation\nBuilt in command line tool \u201cArtisan\u201d for creating a code skeleton ,database structure and build their migration"},{"question":"What is Service Container?","answer":"The Laravel service container is a tool for managing class dependencies and performing dependency injection."},{"question":"Why are migrations necessary?","answer":"Migrations are necessary because:\nWithout migrations, database consistency when sharing an app is almost impossible, especially as more and more people collaborate on the web app.\nYour production database needs to be synced as well."},{"question":"What is the purpose of the Eloquent cursor() method in Laravel ?","answer":"The cursor method allows you to iterate through your database records using a cursor, which will only execute a single query. When processing large amounts of data, the cursor method may be used to greatly reduce your memory usage.js\nforeach (Product::where('name', 'bar')->cursor() as $flight) {\n   \/\/do some stuff\n}"},{"question":"Explain Migrations in Laravel","answer":"Laravel Migrations are like version control for the database, allowing a team to easily modify and share the application\u2019s database schema. Migrations are typically paired with Laravel\u2019s schema builder to easily build the application\u2019s database schema."},{"question":"What is Eloquent Models?","answer":"The Eloquent ORM included with Laravel provides a beautiful, simple ActiveRecord implementation for working with your database. Each database table has a corresponding Model which is used to interact with that table. Models allow you to query for data in your tables, as well as insert new records into the table."},{"question":"List some official packages of Laravel","answer":"Cashier - Laravel Cashier provides an expressive, fluent interface to Stripe's and Braintree's subscription billing services. \nDusk - Laravel Dusk provides an expressive, easy-to-use browser automation and testing API.\nEnvoy - Laravel Envoy provides a clean, minimal syntax for defining common tasks you run on your remote servers. \nHorizon - Horizon provides a dashboard and code-driven configuration for your Laravel powered Redis queues. \nPassport - provides a full OAuth2 server implementation for your Laravel application in a matter of minutes.\nScout - Laravel Scout provides a simple, driver based solution for adding full-text search to your Eloquent models. \nSocialite - a simple, convenient way to authenticate with OAuth providers using Laravel Socialite."},{"question":"What are Laravel events?","answer":"Laravel event provides a simple observer pattern implementation, that allow to subscribe and listen for events in the application. An event is an incident or occurrence detected and handled by the program.Below are some events examples in Laravel:\nA new user has registered\nA new comment is posted\nUser login\/logout\nNew product is added."},{"question":"What is the Facade Pattern used for?","answer":"Facades provide a static interface to classes that are available in the application's service container. Laravel facades serve as static proxies to underlying classes in the service container, providing the benefit of a terse, expressive syntax while maintaining more testability and flexibility than traditional static methods.All of Laravel's facades are defined in the Illuminate\\Support\\Facades namespace. \nConsider:\n```js\nuse Illuminate\\Support\\Facades\\Cache;Route::get('\/cache', function () {\n    return Cache::get('key');\n});\n```"},{"question":"How do you generate migrations?","answer":"Migrations are like version control for your database, allowing your team to easily modify and share the application's database schema. To create a migration, use:\njs\nphp artisan make:migration create_users_table"},{"question":"Which template engine does Laravel use?","answer":"Laravel uses Blade Templating Engine.Blade is the simple, yet powerful templating engine provided with Laravel. Unlike other popular PHP templating engines, Blade does not restrict you from using plain PHP code in your views. In fact, all Blade views are compiled into plain PHP code and cached until they are modified, meaning Blade adds essentially zero overhead to your application. Blade view files use the .blade.php file extension and are typically stored in the resources\/views directory."},{"question":"What are artisan commands?","answer":"Artisan is the name of the command-line interface included with Laravel. It provides a number of helpful commands for your use while developing your application for example:php\nphp artisan serve \/\/ To start Laravel project[\u2b06] MSMQ Interview Questions"},{"question":"What is Message in MSMQ?","answer":"Messages are just envelopes that are used to send data through the queues. They\u00a0can be application-generated or system-generated. Application-generated messages are sent by queued messaging applications."},{"question":"Why do we use MSMQ?","answer":"Microsoft Message Queuing, or MSMQ, is technology for asynchronous messaging. Whenever there's need for two or more applications (processes) to send messages to each other without having to immediately know results, MSMQ can be used. MSMQ can communicate between remote machines, even over Internet. It's free and comes with Windows, but is not installed by default.This mainly addresses the common use case of asynchronous message processing: you have a service Service1 that communicates (send messages) with another part of your software architecture, say Service2.Main problem: what if Service2 becomes suddenly unavailable? Will messages be lost?\nIf you use MSMQ it won't: Service1 will send messages into a queue, and Service2 will dequeue when it is available.MSMQ will resolve following common issues:\ntemporary unavailability of a service: messages are persisted on the disk and will be dequeued when the service becomes available again, so no messages are lost\nas it's fully asynchronous, it'll help a lot in case of punctual peak load: your Service2 won't die under the heavy load, it'll just dequeue and process messages, one after one"},{"question":"What is Queue in MSMQ?","answer":"The queue is just a container that stores messages, decoupling the sender from the receiver. MSMQ Queues are not necessarily FIFO (First In, First Out), because messages can be prioritized.Queues can be transactional or nontransactional. \n* Transactional Queues can only receive  messages sent within a transactional context. \n* Nontransactional queues can only receive messages sent outside of a transactional context. Messages sent in a transactional context are processed in the order in which they were sent.[\u2b06] Machine Learning Interview Questions"},{"question":"What is Machine Learning?","answer":"Machine learning is the study of algorithms and mathematical models that computer systems use to progressively improve their performance on a specific task. The name machine learning was coined in 1959 by Arthur Samuel as the science of getting computers to act without being explicitly programmed.Tom M. Mitchell provided a widely quoted, more formal definition of the algorithms studied in the machine learning field: \"A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P if its performance at tasks in T, as measured by P, improves with experience E.\""},{"question":"What do you understand by Machine Learning?","answer":"Machine learning is an application of artificial intelligence that provides systems the ability to automatically learn and improve from experience without being explicitly programmed. Machine learning focuses on the development of computer programs that can access data and use it learn for themselves."},{"question":"Give an example that explains Machine Leaning in industry.","answer":"Robots are replacing humans in many areas. It is because robots are programmed such that they can perform the task based on data they gather from sensors. They learn from the data and behaves intelligently"},{"question":"What are the different Algorithm techniques in Machine Learning?","answer":"The different types of Algorithm techniques in Machine Learning are as follows:\n * Reinforcement Learning\n * Supervised Learning\n * Unsupervised Learning\n * Semi-supervised Learning\n * Transduction\n * Learning to LearnClassificationClassification algorithms are used when the desired output is a discrete label. In other words, they\u2019re helpful when the answer to your question about your business falls under a finite set of possible outcomes. Many use cases, such as determining whether an email is spam or not, have only two possible outcomes. This is called binary classification.Multi-label classification captures everything else, and is useful for customer segmentation, audio and image categorization, and text analysis for mining customer sentiment. If these are the questions you\u2019re hoping to answer with machine learning in your business, consider algorithms like naive Bayes, decision trees, logistic regression, kernel approximation, and K-nearest neighbors.RegressionOn the other hand, regression is useful for predicting outputs that are continuous. That means the answer to your question is represented by a quantity that can be flexibly determined based on the inputs of the model rather than being confined to a set of possible labels. Regression problems with time-ordered inputs are called time-series forecasting problems, like ARIMA forecasting, which allows data scientists to explain seasonal patterns in sales, evaluate the impact of new marketing campaigns, and more.Linear regression is by far the most popular example of a regression algorithm. Though it\u2019s often underrated because of its relative simplicity, it\u2019s a versatile method that can be used to predict housing prices, likelihood of customers to churn, or the revenue a customer will generate. For use cases like these, regression trees and support vector regression are good algorithms to consider if you\u2019re looking for something more sophisticated than linear regression."},{"question":"What is Overfitting in Machine Learning?","answer":"Overfitting in Machine Learning is defined as when a statistical model describes random error or noise instead of underlying relationship or when a model is excessively complex."},{"question":"What s Classification in Machine Learning?","answer":"In machine learning and statistics, classification is the problem of identifying to which of a set of categories (sub-populations) a new observation belongs, on the basis of a training set of data containing observations (or instances) whose category membership is known. Examples are assigning a given email to the \"spam\" or \"non-spam\" class, and assigning a diagnosis to a given patient based on observed characteristics of the patient (sex, blood pressure, presence or absence of certain symptoms, etc.). Classification is an example of pattern recognition.In the terminology of machine learning, classification is considered an instance of supervised learning, i.e., learning where a training set of correctly identified observations is available. The corresponding unsupervised procedure is known as clustering, and involves grouping data into categories based on some measure of inherent similarity or distance."},{"question":"What is Regression Analysis?","answer":"In statistical modeling, regression analysis is a set of statistical processes for estimating the relationships among variables. It includes many techniques for modeling and analyzing several variables, when the focus is on the relationship between a dependent variable and one or more independent variables (or 'predictors'). More specifically, regression analysis helps one understand how the typical value of the dependent variable (or 'criterion variable') changes when any one of the independent variables is varied, while the other independent variables are held fixed."},{"question":"What is the difference between supervised and unsupervised machine learning?","answer":"Supervised learning is a process where it requires training labeled data While Unsupervised learning it doesn\u2019t require data labeling."},{"question":"What is the function of Unsupervised Learning?","answer":"The function of Unsupervised Learning are as below:\n* Find clusters of the data\n* Find low-dimensional representations of the data\n* Find interesting directions in data\n* Find interesting coordinates and correlations\n* Find novel observations"},{"question":"What is the function of Supervised Learning?","answer":"The function of Supervised Learning are as below:\n* Classifications\n* Speech recognition\n* Regression\n* Predict time series\n* Annotate strings"},{"question":"What are the disadvantages of neural networks?","answer":"Neural Network requires a large amount of training data to converge. It\u2019s also difficult to pick the right architecture, and the internal \u201chidden\u201d layers are incomprehensible."},{"question":"What are the advantages of neural networks?","answer":"Neural networks have led to performance breakthroughs for unstructured datasets such as images, audio, and video. Their incredible flexibility allows them to learn patterns that no other Machine Learning algorithm can learn."},{"question":"What are the disadvantages of decision trees?","answer":"Decision trees are prone to be overfit. However, this can be addressed by ensemble methods like random forests or boosted trees."},{"question":"Explain the difference between Supervised Learning and Unsupervised Learning?","answer":"Supervised machine learning is the more commonly used between the two. It includes such algorithms as linear and logistic regression, multi-class classification, and support vector machines. Supervised learning is so named because the data scientist acts as a guide to teach the algorithm what conclusions it should come up with. It\u2019s similar to the way a child might learn arithmetic from a teacher. Supervised learning requires that the algorithm\u2019s possible outputs are already known and that the data used to train the algorithm is already labeled with correct answers. For example, a classification algorithm will learn to identify animals after being trained on a dataset of images that are properly labeled with the species of the animal and some identifying characteristics.On the other hand, unsupervised machine learning is more closely aligned with what some call true artificial intelligence \u2014 the idea that a computer can learn to identify complex processes and patterns without a human to provide guidance along the way. Although unsupervised learning is prohibitively complex for some simpler enterprise use cases, it opens the doors to solving problems that humans normally would not tackle. Some examples of unsupervised machine learning algorithms include k-means clustering, principal and independent component analysis, and association rules.While a supervised classification algorithm learns to ascribe inputted labels to images of animals, its unsupervised counterpart will look at inherent similarities between the images and separate them into groups accordingly, assigning its own new label to each group. In a practical example, this type of algorithm is useful for customer segmentation because it will return groups based on parameters that a human may not consider due to pre-existing biases about the company\u2019s demographic.Choosing to use either a supervised or unsupervised machine learning algorithm typically depends on factors related to the structure and volume of your data and the use case of the issue at hand. A well-rounded data science program will use both types of algorithms to build predictive data models that help stakeholders make decisions across a variety of business challenges."},{"question":"What are the conditions when Overfitting happens?","answer":"One of the important reason and possibility of overfitting is because the criteria used for training the model is not the same as the criteria used to judge the efficacy of a model."},{"question":"How can you avoid overfitting?","answer":"We can avoid overfitting by using:\n* Lots of data\n* Cross-validation"},{"question":"What are the five popular algorithms for Machine Learning?","answer":"Below is the list of five popular algorithms of Machine Learning:\n* Decision Trees\n* Probabilistic networks\n* Nearest Neighbor\n* Support vector machines\n* Neural Networks"},{"question":"What are the different use cases where machine learning algorithms can be used?","answer":"The different use cases where machine learning algorithms can be used are as follows:\n* Fraud Detection\n* Face detection\n* Natural language processing\n* Market Segmentation\n* Text Categorization\n* Bioinformatics"},{"question":"What are parametric models and Non-Parametric models?","answer":"Parametric models are those with a finite number of parameters and to predict new data, you only need to know the parameters of the model.\nNon Parametric models are those with an unbounded number of parameters, allowing for more flexibility and to predict new data, you need to know the parameters of the model and the state of the data that has been observed."},{"question":"What are the three stages to build the hypotheses or model in machine learning?","answer":"The three stages to build the hypotheses or model in machine learning are:\n1. Model building\n2. Model testing\n3. Applying the model"},{"question":"What is Inductive Logic Programming in Machine Learning (ILP)?","answer":"Inductive Logic Programming (ILP) is a subfield of machine learning which uses logical programming representing background knowledge and examples."},{"question":"What is the difference between classification and regression?","answer":"The difference between classification and regression are as follows:\n* Classification is about identifying group membership while regression technique involves predicting a response.\n* Classification and Regression techniques are related to prediction\n* Classification predicts the belonging to a class whereas regression predicts the value from a continuous set\n* Classification technique is preferred over regression when the results of the model need to return the belongingness of data points in a dataset with specific explicit categories"},{"question":"What are the difference between inductive machine learning and deductive machine learning?","answer":"The difference between inductive machine learning and deductive machine learning are as follows:\nInductive machine learning is where the model learns by examples from a set of observed instances to draw a generalized conclusion whereas in deductive learning the model first draws the conclusion and then the conclusion is drawn."},{"question":"What are the advantages of decision trees?","answer":"The advantages decision trees are:\n* Decision trees are easy to interpret\n* Nonparametric\n* There are relatively few parameters to tune[\u2b06] Microservices Interview Questions"},{"question":"Why Would You Opt For Microservices Architecture?","answer":"There are plenty of pros that are offered by Microservices architecture. Here are a few of them:\nMicroservices can adapt easily to other frameworks or technologies.\nFailure of a single process does not affect the entire system.\nProvides support to big enterprises as well as small teams.\nCan be deployed independently and in relatively less time."},{"question":"List down the advantages of Microservices Architecture","answer":"Independent Development.  All microservices can be easily developed based on their individual functionality\nIndependent Deployment.   Based on their services, they can be individually deployed in any application\nFault Isolation.  Even if one service of the application does not work, the system still continues to function\nMixed Technology Stack.   Different languages and technologies can be used to build different services of the same application\nGranular Scaling. Individual components can scale as per need, there is no need to scale all components together"},{"question":"Define Microservice Architecture","answer":"Microservices, aka\u00a0Microservice Architecture, is an architectural style that structures an application as a collection of small autonomous services, modeled around a\u00a0business domain.[\u2b06] MongoDB Interview Questions"},{"question":"Does Mongodb Support Foreign Key Constraints?","answer":"No. MongoDB does not support such relationships. The database does not apply any constraints to the system (i.e.: foreign key constraints), so there are no \"cascading deletes\" or \"cascading updates\". Basically, in a NoSQL database it is up to you to decide how to organise the data and its relations if there are any."},{"question":"Which are the most important features of MongoDB?","answer":"Flexible data model in form of documents\nAgile and highly scalable database\nFaster than traditional databases\nExpressive query language"},{"question":"Explain what is MongoDB?","answer":"MongoDB is an open-source document database that provides high performance, high availability, and automatic scaling.\nIt's Key Features are:\n* Document Oriented and NoSQL database.\n* Supports Aggregation\n* Uses BSON format\n* Sharding (Helps in Horizontal Scalability)\n* Supports Ad Hoc Queries\n* Schema Less\n* Capped Collection\n* Indexing (Any field in MongoDB can be indexed)\n* MongoDB Replica Set (Provides high availability)\n* Supports Multiple Storage Engines"},{"question":"How many indexes does MongoDB create by default for a new collection?","answer":"By default, MongoDB created the _id collection for every collection."},{"question":"Compare SQL databases and MongoDB at a high level.","answer":"SQL databases store data in form of tables, rows, columns and records. This data is stored in a pre-defined data model which is not very much flexible for today's real-world highly growing applications. MongoDB in contrast uses a flexible structure which can be easily modified and extended."},{"question":"What Is Replication In MongoDB?","answer":"Replication is the process of synchronizing data across multiple servers. Replication provides redundancy and increases data availability. With multiple copies of data on different database servers, replication protects a database from the loss of a single server. Replication also allows you to recover from hardware failure and service interruptions."},{"question":"What is \u201cNamespace\u201d in MongoDB?","answer":"MongoDB stores BSON (Binary Interchange and Structure Object Notation) objects in the collection. The concatenation of the collection name and database name is called a namespace"},{"question":"If you remove an object attribute, is it deleted from the database?","answer":"Yes, it be. Remove the attribute and then re-save () the object."},{"question":"Why does Profiler use in MongoDB?","answer":"MongoDB uses a database profiler to perform characteristics of each operation against the database. You can use a profiler to find queries and write operations"},{"question":"What is BSON in MongoDB?","answer":"BSON is a binary serialization format used to store documents and make remote procedure calls in MongoDB. BSON extends the JSON model to provide additional data types, ordered fields, and to be efficient for encoding and decoding within different languages."},{"question":"Does MongoDB need a lot space of Random Access Memory (RAM)?","answer":"No. MongoDB can be run on small free space of RAM."},{"question":"How is data stored in MongoDB?","answer":"Data in MongoDB is stored in BSON documents \u2013 JSON-style data structures. Documents contain one or more fields, and each field contains a value of a specific data type, including arrays, binary data and sub-documents. Documents that tend to share a similar structure are organized as collections. It may be helpful to think of documents as analogous to rows in a relational database, fields as similar to columns, and collections as similar to tables.The advantages of using documents are:\nDocuments (i.e. objects) correspond to native data types in many programming languages.\nEmbedded documents and arrays reduce need for expensive joins.\nDynamic schema supports fluent polymorphism."},{"question":"Mention the command to insert a document in a database called school and collection called persons.","answer":"js\nuse school;\ndb.persons.insert( { name: \"kadhir\", dept: \"CSE\" } )"},{"question":"What are Indexes in MongoDB?","answer":"Indexes support the efficient execution of queries in MongoDB. Without indexes, MongoDB must perform a collection scan, i.e. scan every document in a collection, to select those documents that match the query statement. If an appropriate index exists for a query, MongoDB can use the index to limit the number of documents it must inspect."},{"question":"What is a replica set?","answer":"It is a group of mongo instances that maintain same data set. Replica sets provide redundancy and high availability, and are the basis for all production deployments."},{"question":"Can you create an index on an array field in MongoDB? If yes, what happens in this case?","answer":"Yes. An array field can be indexed in MongoDB. In this case, MongoDB would index each value of the array so you can query for individual items:```js\ndb.col1.save({'colors': ['red','blue']})\ndb.col1.ensureIndex({'colors':1})\ndb.col1.find({'colors': 'red'})\n{ \"_id\" : ObjectId(\"4ccc78f97cf9bdc2a2e54ee9\"), \"colors\" : [ \"red\", \"blue\" ] }\ndb.col1.find({'colors': 'blue'})\n{ \"_id\" : ObjectId(\"4ccc78f97cf9bdc2a2e54ee9\"), \"colors\" : [ \"red\", \"blue\" ] }\n```"},{"question":"When should we embed one document within another in MongoDB?","answer":"You should consider embedding documents for:\ncontains relationships between entities\nOne-to-many relationships\nPerformance reasons\n[\u2b06] Node.js Interview Questions"},{"question":"What is Node.js?","answer":"Node.js is a web application framework built on Google Chrome's JavaScript Engine (V8 Engine).Node.js comes with runtime environment on which a Javascript based script can be interpreted and executed (It is analogus to JVM to JAVA byte code). This runtime allows to execute a JavaScript code on any machine outside a browser. Because of this runtime of Node.js, JavaScript is now can be executed on server as well.Node.js = Runtime Environment + JavaScript Library"},{"question":"What is npm?","answer":"npm stands for Node Package Manager. npm provides following two main functionalities:\nOnline repositories for node.js packages\/modules which are searchable on search.nodejs.org\nCommand line utility to install packages, do version management and dependency management of Node.js packages."},{"question":"What are the two types of API functions in Node.js?","answer":"The two types of API functions in Node.js are: a) Asynchronous, non-blocking functions b) Synchronous, blocking functions"},{"question":"What is the difference between returning a callback and just calling a callback?","answer":"```js\nreturn callback();\n\/\/some more lines of code; -  won't be executedcallback();\n\/\/some more lines of code; - will be executed\n```Of course returning will help the context calling async function get the value returned by callback.\n```js\nfunction do2(callback) {\n    log.trace('Execute function: do2');\n    return callback('do2 callback param');\n}var do2Result = do2((param) => {\n    log.trace(print ${param});\n    return return from callback(${param}); \/\/ we could use that return\n});log.trace(print ${do2Result});\nOutput:sh\nC:\\Work\\Node>node --use-strict main.js\n[0] Execute function: do2\n[0] print do2 callback param\n[0] print return from callback(do2 callback param)\n```"},{"question":"What are Event Listeners?","answer":"Event Listeners are similar to call back functions but are associated with some event. For example when a server listens to http request on a given port a event will be generated and to specify http server has received and will invoke corresponding event listener. Basically, Event listener's are also call backs for a corresponding event.Node.js has built in event's and built in event listeners. Node.js also provides functionality to create Custom events and Custom Event listeners."},{"question":"What is global installation of dependencies?","answer":"Globally installed packages\/dependencies are stored in \/npm directory. Such dependencies can be used in CLI (Command Line Interface) function of any node.js but can not be imported using require() in Node application directly. To install a Node project globally use -g flag."},{"question":"What is libuv?","answer":"libuv is a C library that is used to abstract non-blocking I\/O operations to a consistent interface across all supported platforms. It provides mechanisms to handle file system, DNS, network, child processes, pipes, signal handling, polling and streaming. It also includes a thread pool for offloading work for some things that can't be done asynchronously at the operating system level."},{"question":"What is V8?","answer":"The V8 library provides Node.js with a JavaScript engine (a program that converts Javascript code into lower level or machine code that microprocessors can understand), which Node.js controls via the V8 C++ API. V8 is maintained by Google, for use in Chrome.The Chrome V8 engine :\nThe V8 engine is written in C++ and used in Chrome and Nodejs.\nIt implements ECMAScript as specified in ECMA-262.\nThe V8 engine can run standalone we can embed it with our own C++ program."},{"question":"What are the core modules of Node,js?","answer":"EventEmitter\nStream\nFS\nNet\nGlobal Objects"},{"question":"How you can monitor a file for modifications in Node.js ?","answer":"We can take advantage of File System watch() function which watches the changes of the file."},{"question":"Could we run an external process with Node.js?","answer":"Yes. Child process module enables us to access operating system functionaries or other apps. Scalability is baked into Node and child processes are the key factors to scale our application. You can use child process to run system commands, read large files without blocking event loop,  decompose the application into various \u201cnodes\u201d (That\u2019s why it\u2019s called Node).Child process module has following three major ways to create child processes \u2013\nspawn  - child_process.spawn launches a new process with a given command.\nexec  - child_process.exec method runs a command in a shell\/console and buffers the output.\nfork - The child_process.fork method is a special case of the spawn() to create child processes."},{"question":"List out the differences between AngularJS and NodeJS?","answer":"AngularJS is a web application development framework. It\u2019s a JavaScript and it is different from other web app frameworks written in JavaScript like jQuery. NodeJS is a runtime environment used for building server-side applications while AngularJS is a JavaScript framework mainly useful in building\/developing client-side part of applications which run inside a web browser."},{"question":"What do you mean by Asynchronous API?","answer":"All APIs of Node.js library are aynchronous that is non-blocking. It essentially means a Node.js based server never waits for a API to return data. Server moves to next API after calling it and a notification mechanism of Events of Node.js helps server to get response from the previous API call."},{"question":"What is Callback Hell?","answer":"The asynchronous function requires callbacks as a return parameter. When multiple asynchronous functions are chained together then callback hell situation comes up."},{"question":"If Node.js is single threaded then how it handles concurrency?","answer":"Node provides a single thread to programmers so that code can be written easily and without bottleneck. Node internally uses multiple POSIX threads for various I\/O operations such as File, DNS, Network calls etc.When Node gets I\/O request it creates or uses a thread to perform that I\/O operation and once the operation is done, it pushes the result to the event queue. On each such event, event loop runs and checks the queue and if the execution stack of Node is empty then it adds the queue result to execution stack.This is how Node manages concurrency."},{"question":"What are the benefits of using Node.js?","answer":"Following are main benefits of using Node.js\nAynchronous and Event Driven - All APIs of Node.js library are aynchronous that is non-blocking. It essentially means a Node.js based server never waits for a API to return data. Server moves to next API after calling it and a notification mechanism of Events of Node.js helps server to get response from the previous API call.\nVery Fast - Being built on Google Chrome's V8 JavaScript Engine, Node.js library is very fast in code execution.\nSingle Threaded but highly Scalable - Node.js uses a single threaded model with event looping. Event mechanism helps server to respond in a non-bloking ways and makes server highly scalable as opposed to traditional servers which create limited threads to handle requests. Node.js uses a single threaded program and same program can services much larger number of requests than traditional server like Apache HTTP Server.\nNo Buffering - Node.js applications never buffer any data. These applications simply output the data in chunks."},{"question":"Is Node a single threaded application?","answer":"Yes! Node uses a single threaded model with event looping."},{"question":"What is control flow function?","answer":"It is a generic piece of code which runs in between several asynchronous function calls is known as control flow function."},{"question":"What are the key features of Node.js?","answer":"Let\u2019s look at some of the key features of Node.js.\nAsynchronous event driven IO helps concurrent request handling \u2013 All APIs of Node.js are asynchronous. This feature means that if a Node receives a request for some Input\/Output operation, it will execute that operation in the background and continue with the\u00a0processing of other requests. Thus it will not wait for the response from the previous requests.\nFast in Code execution \u2013 Node.js uses the V8 JavaScript Runtime engine, the one which is used by Google Chrome. Node has a wrapper over the JavaScript engine which makes the runtime engine much faster and hence processing of requests within Node.js also become faster.\nSingle Threaded but Highly Scalable \u2013 Node.js uses a single thread model for event looping. The response from these events may or may not reach the server immediately. However, this does not block other operations. Thus making Node.js highly scalable. Traditional servers create limited threads to handle requests while Node.js creates a single thread that provides service to much larger numbers of such requests.\nNode.js library uses JavaScript \u2013 This is another important aspect of Node.js from the developer\u2019s point of view. The majority of developers are already well-versed in JavaScript. Hence, development in Node.js becomes easier for a developer who knows JavaScript.\nThere is an Active and vibrant community for the Node.js framework \u2013 The active community always keeps the framework updated with the latest trends in the web development.\nNo Buffering \u2013 Node.js applications never buffer any data. They simply output the data in chunks."},{"question":"What is an error-first callback?","answer":"Error-first callbacks are used to pass errors and data. The first argument is always an error object that the programmer has to check if something went wrong. Additional arguments are used to pass data.js\nfs.readFile(filePath, function(err, data) {\n  if (err) {\n    \/\/handle the error\n  }\n  \/\/ use the data object\n});"},{"question":"How to make Post request in Node.js?","answer":"Following code snippet can be used to make a Post Request in Node.js.js\nvar request = require('request');\nrequest.post('http:\/\/www.example.com\/action', {\n  form: {\n    key: 'value'\n  }\n}, function(error, response, body) {\n  if (!error && response.statusCode == 200) {\n    console.log(body)\n  }\n});"},{"question":"What is the difference between Nodejs, AJAX, and jQuery?","answer":"The one common trait between Node.js, AJAX, and jQuery is that all of them are the advanced implementation of JavaScript. However, they serve completely different purposes.\n\nNode.js \u2013It is a server-side platform for developing client-server applications. For example, if we\u2019ve to build an online employee management system, then we won\u2019t do it using client-side JS. But the Node.js can certainly do it as it runs on a server similar to Apache, Django not in a browser.\n\n\nAJAX (aka Asynchronous Javascript and XML) \u2013It is a client-side scripting technique, primarily designed for rendering the contents of a page without refreshing it. There are a no. of large companies utilizing AJAX such as Facebook and Stack Overflow to display dynamic content.\n\n\njQuery \u2013It is a famous JavaScript module which complements AJAX, DOM traversal, looping and so on. This library provides many useful functions to help in JavaScript development. However, it\u2019s not mandatory to use it but as it also manages cross-browser compatibility, so can help you produce highly maintainable web applications."},{"question":"What's the difference between operational and programmer errors?","answer":"Operation errors are not bugs, but problems with the system, like request timeout or hardware failure. On the other hand programmer errors are actual bugs.[\u2b06] OOP Interview Questions"},{"question":"What is object-oriented programming (OOP)?","answer":"OOP is a technique to develop logical modules, such as classes that contain properties, methods, fields, and events. An object is created in the program to represent a class. Therefore, an object encapsulates all the features, such as data and behavior that are associated to a class. OOP allows developers to develop modular programs and assemble them as software. Objects are used to access data and behaviors of different software modules, such as classes, namespaces, and sharable assemblies. .NET Framework supports only OOP languages, such as Visual Basic .NET, Visual C#, and Visual C++."},{"question":"What is inheritance?","answer":"Inheritance allows us to define a class in terms of another class, which makes it easier to create and maintain an application. This also provides an opportunity to reuse the code functionality and speeds up implementation time.When creating a class, instead of writing completely new data members and member functions, the programmer can designate that the new class should inherit the members of an existing class. This existing class is called the base class, and the new class is referred to as the derived class.The idea of inheritance implements the IS-A relationship. For example, mammal IS A animal, dog IS-A mammal hence dog IS-A animal as well, and so on."},{"question":"What is the difference between procedural and object-oriented programming?","answer":"Procedural programming is based upon the modular approach in which the larger programs are broken into procedures. Each procedure is a set of instructions that are executed one after another. On the other hand, OOP is based upon objects. An object consists of various elements, such as methods and variables.  Access modifiers are not used in procedural programming, which implies that the entire data can be accessed freely anywhere in the program. In OOP, you can specify the scope of a particular data by using access modifiers - public, private, internal, protected, and protected internal."},{"question":"What is encapsulation?","answer":"Encapsulation is defined as the process of enclosing one or more items within a physical or logical package. Encapsulation, in object oriented programming methodology, prevents access to implementation details."},{"question":"What is a class?","answer":"A class describes all the attributes of objects, as well as the methods that implement the behavior of member objects. It is a comprehensive data type, which represents a blue print of objects. It is a template of object. A class can be defined as the primary building block of OOP. It also serves as a template that describes the properties, state, and behaviors common to a particular group of objects.A class contains data and behavior of an entity. For example, the aircraft class can contain data, such as model number, category, and color and behavior, such as duration of flight, speed, and number of passengers. A class inherits the data members and behaviors of other classes by extending from them."},{"question":"What is the relationship between a class and an object?","answer":"A class acts as a blue-print that defines the properties, states, and behaviors that are common to a number of objects. An object is an instance of the class. For example, you have a class called Vehicle and Car is the object of that class. You can create any number of objects for the class named Vehicle, such as Van, Truck, and Auto.  The new operator is used to create an object of a class. When an object of a class is instantiated, the system allocates memory for every data member that is present in the class."},{"question":"What is an object?","answer":"Objeects are instance of classes. It is a basic unit of a system. An object is an entity that has attributes, behavior, and identity. Attributes and behavior of an object are defined by the class definition."},{"question":"Explain the basic features of OOPs","answer":"The following are the four basic features of OOP:  \nAbstraction - Refers to the process of exposing only the relevant and essential data to the users without showing unnecessary information.\nPolymorphism - Allows you to use an entity in multiple forms.\nEncapsulation - Prevents the data from unwanted access by binding of code and data in a single unit called object.\nInheritance - Promotes the reusability of code and eliminates the use of redundant code. It is the property through which a child class obtains all the features defined in its parent class. When a class inherits the common properties of another class, the class inheriting the properties is called a derived class and the class that allows inheritance of its common properties is called a base class."},{"question":"What is the difference between a class and a structure?","answer":"Class:\n* A class is a reference type.\n* While instantiating a class, CLR allocates memory for its instance in heap.\n* Classes support inheritance.\n* Variables of a class can be assigned as null.\n* Class can contain constructor\/destructor.Structure:\n* A structure is a value type.\n* In structure, memory is allocated on stack.\n* Structures do not support inheritance.\n* Structure members cannot have null values.\n* Structure does not require constructor\/destructor and members can be initialiazed automatically."},{"question":"Why is the virtual keyword used in code?","answer":"The virtual keyword is used while defining a class to specify that the methods and the properties of that class can be overridden in derived classes."},{"question":"Explain the concept of constructor?","answer":"Constructor is a special method of a class, which is called automatically when the instance of a class is created. It is created with the same name as the class and initializes all class members, whenever you access the class. The main features of a constructor are as follows:\n* Constructors do not have any return type.\n* Constructors can be overloaded.\n* It is not mandatory to declare a constructor; it is invoked automatically by .NET Framework."},{"question":"Can you inherit private members of a class?","answer":"No, you cannot inherit private members of a class because private members are accessible only to that class and not outside that class."},{"question":"What is polymorphism?","answer":"The word polymorphism means having many forms. In object-oriented programming paradigm, polymorphism is often expressed as one interface, multiple functions.[\u2b06] PHP Interview Questions"},{"question":"What is the return type of a function that doesn't return anything?","answer":"void which mean nothing."},{"question":"What is the purpose of php.ini file?","answer":"The PHP configuration file, php.ini, is the final and most immediate way to affect PHP's functionality. The php.ini file is read each time PHP is initialized.in other words, whenever httpd is restarted for the module version or with each script execution for the CGI version."},{"question":"What does $GLOBALS mean?","answer":"$GLOBALS is associative array including references to all variables which are currently defined in the global scope of the script."},{"question":"How can you pass a variable by reference?","answer":"To be able to pass a variable by reference, we use an ampersand in front of it, as follows:\nphp\n$var1 = &$var2"},{"question":"What is the use of ini_set()?","answer":"PHP allows the user to modify some of its settings mentioned in php.ini using ini_set(). This function requires two string arguments. First one is the name of the setting to be modified and the second one is the new value to be assigned to it.Given line of code will enable the display_error setting for the script if it\u2019s disabled.ini_set('display_errors', '1');We need to put the above statement, at the top of the script so that, the setting remains enabled till the end. Also, the values set via ini_set() are applicable, only to the current script. Thereafter, PHP will start using the original values from php.ini."},{"question":"What are the keys & values in an indexed array?","answer":"Consider:\nphp\nArray ( [0] => Hello [1] => world [2] => It's [3] => a [4] => beautiful [5] => day)The keys of an indexed array are 0, 1, 2 etc. (the index values) and values are \"Hello\", \"world\", \"It's\", \"beautiful\", \"day\"."},{"question":"What is the difference between == and ===?","answer":"The operator == casts between two different types if they are different\nThe === operator performs a 'typesafe comparison'\nThat means that it will only return true if both operands have the same type and the same value.php\n1 === 1: true\n1 == 1: true\n1 === \"1\": false \/\/ 1 is an integer, \"1\" is a string\n1 == \"1\": true \/\/ \"1\" gets casted to an integer, which is 1\n\"foo\" === \"foo\": true \/\/ both operands are strings and have the same value"},{"question":"How can you enable error reporting in PHP?","answer":"Check if \u201cdisplay_errors\u201d is equal \u201con\u201d in the php.ini or declare \u201cini_set('display_errors', 1)\u201d in your script.Then, include \u201cerror_reporting(E_ALL)\u201d in your code to display all types of error messages during the script execution."},{"question":"What are the main differences between const vs define","answer":"The fundamental difference between const vs define is that const defines constants at compile time, whereas define defines them at run time.```php\nconst FOO = 'BAR';\ndefine('FOO', 'BAR');\/\/ but\nif (...) {\n    const FOO = 'BAR';    \/\/ Invalid\n}\nif (...) {\n    define('FOO', 'BAR'); \/\/ Valid\n}\n```Also until PHP 5.3, const could not be used in the global scope. You could only use this from within a class. This should be used when you want to set some kind of constant option or setting that pertains to that class. Or maybe you want to create some kind of enum. An example of good const usage is to get rid of magic numbers. Define can be used for the same purpose, but it can only be used in the global scope. It should only be used for global settings that affect the entire application.Unless you need any type of conditional or expressional definition, use consts instead of define()- simply for the sake of readability!"},{"question":"What are the differences between die() and exit() functions in PHP?","answer":"There's no difference - they are the same. The only advantage of choosing die() over exit(), might be the time you spare on typing an extra letter."},{"question":"What does the 'var' keyword mean in PHP?","answer":"It's for declaring class member variables in PHP4, and is no longer needed. It will work in PHP5, but will raise an E_STRICT warning in PHP from version 5.0.0 up to version 5.1.2, as of when it was deprecated. Since PHP 5.3, var has been un-deprecated and is a synonym for 'public'.Consider:\nphp\nclass foo {\n    var $x = 'y'; \/\/ or you can use public like...\n    public $x = 'y'; \/\/this is also a class member variables.\n    function bar() {\n    }\n}"},{"question":"What's the difference between isset() and array_key_exists()?","answer":"array_key_exists will tell you if a key exists in an array and complains when $a does not exist.\nisset will only return true if the key\/variable exists and is not null. isset doesn't complain when $a does not exist.\nConsider:\n```js\n$a = array('key1' => 'Foo Bar', 'key2' => null);isset($a['key1']);             \/\/ true\narray_key_exists('key1', $a);  \/\/ trueisset($a['key2']);             \/\/ false\narray_key_exists('key2', $a);  \/\/ true\n```"},{"question":"What are the different scopes of variables?","answer":"Variable scope is known as its boundary within which it can be visible or accessed from code. In other words, it is the context within which a variable is defined. There are only two scopes available in PHP namely local and global scopes.\nLocal variables (local scope)\nGlobal variables (special global scope)\nStatic variables (local scope)\nFunction parameters (local scope)\nWhen a variable is accessed outside its scope it will cause PHP error undefined variable."},{"question":"What is the difference between single-quoted and double-quoted strings in PHP?","answer":"Single quoted strings will display things almost completely \"as is.\" \nDouble quote strings will display a host of escaped characters (including some regexes), and variables in the strings will be evaluated.\nThings get evaluated in double quotes but not in single:php\n$s = \"dollars\";\necho 'This costs a lot of $s.'; \/\/ This costs a lot of $s.\necho \"This costs a lot of $s.\"; \/\/ This costs a lot of dollars."},{"question":"What do we mean by keys and values?","answer":"In associative arrays, we can use named keys that you assign to them.\nThere are two ways to create an associative array: ```php\n\/\/ first way -$age = array(\"Peter\"=>\"35\", \"Ben\"=>\"37\", \"Joe\"=>\"43\");`\/\/ another method - \n$age['Peter'] = \"35\"; \/\/Peter, Ben & Joe are keys\n$age['Ben'] = \"37\"; \/\/35, 37 & 43 are values\n$age['Joe'] = \"43\";\n```"},{"question":"PHP array delete by value (not key)","answer":"Details:\nI have a PHP array as follows:php\n$messages = [312, 401, 1599, 3, ...];I want to delete the element containing the value $del_val (for example, $del_val=401), but I don't know its key. This might help: each value can only be there once.I'm looking for the simplest function to perform this task please.Using array_search() and unset, try the following:js\nif (($key = array_search($del_val, $messages)) !== false) {\n   unset($messages[$key]);\n}array_search() returns the key of the element it finds, which can be used to remove that element from the original array using unset(). It will return FALSE on failure, however it can return a false-y value on success (your key may be 0 for example), which is why the strict comparison !== operator is used.The if() statement will check whether array_search() returned a value, and will only perform an action if it did."},{"question":"When should I use require vs. include?","answer":"The require() function is identical to include(), except that it handles errors differently. If an error occurs, the include() function generates a warning, but the script will continue execution. The require() generates a fatal error, and the script will stop.My suggestion is to just use require_once 99.9% of the time.Using require or include instead implies that your code is not reusable elsewhere, i.e. that the scripts you're pulling in actually execute code instead of making available a class or some function libraries."},{"question":"What is the difference between var_dump() and print_r()?","answer":"The var_dump function displays structured information about variables\/expressions including its type and value. Arrays are explored recursively with values indented to show structure. It also shows which array values and object properties are references.\n\n\nThe print_r() displays information about a variable in a way that's readable by humans. array values will be presented in a format that shows keys and elements. Similar notation is used for objects.\n\nConsider:\nphp\n$obj = (object) array('qualitypoint', 'technologies', 'India');\nvar_dump($obj)will display below output in the screen:\nobject(stdClass)#1 (3) {\n [0]=> string(12) \"qualitypoint\"\n [1]=> string(12) \"technologies\"\n [2]=> string(5) \"India\"\n}\nAnd, print_r($obj) will display below output in the screen.\nstdClass Object ( \n [0] => qualitypoint\n [1] => technologies\n [2] => India\n)"},{"question":"Is there a difference between isset and !empty?","answer":"empty is more or less shorthand for!isset($foo) || !$foo, and !empty is analogous to isset($foo) && $foo.  empty is the same as !$foo, but doesn't throw warnings if the variable doesn't exist. That's the main point of this function: do a boolean comparison without worrying about the variable being set."},{"question":"Explain what the different PHP errors are","answer":"A notice is a non-critical error saying something went wrong in execution, something minor like an undefined variable.\nA warning is given when a more critical error like if an include() command went to retrieve a non-existent file. In both this and the error above, the script would continue.\nA fatal error would terminate the code. Failure to satisfy a require() would generate this type of error, for example."},{"question":"Differentiate between echo and print()","answer":"echo and print are more or less the same. They are both used to output data to the screen.The differences are: \n- echo has no return value while print has a return value of 1 so it can be used in expressions. \n- echo can take multiple parameters (although such usage is rare) while print can take one argument. \n- echo is faster than print."},{"question":"Give me some real life examples when you had to use __destruct in your classes","answer":"We know that __destruct is called when the object is destroyed. Logically, what happens if the object is destroyed? Well, it means it's no longer available. So if it has resources open, it makes sense to close those resources as it's being destroyed or cleaning up after itself. Also because PHP will close resources on termination for you doesn't mean that it's bad to explicitly close them when you no longer need them (or good to not close them).Some real examples are:\n* Closing custom database connector\/wrapper connection\n* Deletion of temporary folders\n* Cleaning up caching\n* Spooling the queue of logging messages to db\/file"},{"question":"Declare some function with default parameter","answer":"Consider:\nphp\nfunction showMessage($hello = false){\n  echo ($hello) ? 'hello' : 'bye';\n}"},{"question":"What are PSRs? Choose 1 and briefly describe it.","answer":"PSRs are PHP Standards Recommendations that aim at standardising common aspects of PHP Development. An example of a PSR is PSR-2, which is a coding style guide."},{"question":"Explain how we handle exceptions in PHP?","answer":"When an exception is thrown, code following the statement will not be executed, and PHP will attempt to find the first matching catch block. If an exception is not caught, a PHP Fatal Error will be issued with an \"Uncaught Exception\".\nAn exception can be thrown, and caught within PHP. To handle exceptions, code may be surrounded in a try block.\nEach try must have at least one corresponding catch block. Multiple catch blocks can be used to catch different classes of exceptions.\nExceptions can be thrown (or re-thrown) within a catch block.Consider:php\ntry {\n    print \"this is our try block n\";\n    throw new Exception();\n} catch (Exception $e) {\n    print \"something went wrong, caught yah! n\";\n} finally {\n    print \"this part is always executed n\";\n}"},{"question":"Is multiple inheritance supported in PHP?","answer":"PHP supports only single inheritance; it means that a class can be extended from only one single class using the keyword 'extended'."},{"question":"How is it possible to set an infinite execution time for PHP script?","answer":"The set_time_limit(0)added at the beginning of a script sets to infinite the time of execution to not have the PHP error 'maximum execution time exceeded.' It is also possible to specify this in the php.ini file."},{"question":"What is stdClass in PHP?","answer":"stdClass is just a generic 'empty' class that's used when casting other types to objects. stdClass is not the base class for objects in PHP.  This can be demonstrated fairly easily:js\nclass Foo{}\n$foo = new Foo();\necho ($foo instanceof stdClass)?'Y':'N'; \/\/ outputs 'N'It is useful for anonymous objects, dynamic properties, etc. An easy way to consider the StdClass is as an alternative to associative array. See this example below that shows how json_decode() allows to get an StdClass instance or an associative array.\nAlso but not shown in this example, SoapClient::__soapCall returns an StdClass instance.```js\n\/\/Example with StdClass\n$json = '{ \"foo\": \"bar\", \"number\": 42 }';\n$stdInstance = json_decode($json);echo $stdInstance - > foo.PHP_EOL; \/\/\"bar\"\necho $stdInstance - > number.PHP_EOL; \/\/42\/\/Example with associative array\n$array = json_decode($json, true);echo $array['foo'].PHP_EOL; \/\/\"bar\"\necho $array['number'].PHP_EOL; \/\/42\n```"},{"question":"In PHP, objects are they passed by value or by reference?","answer":"In PHP, objects passed by value."},{"question":"Explain usage of enumerations in PHP","answer":"PHP doesn't have native Enumerations. Depending upon use case, I would normally use something simple like the following:```php\nabstract class DaysOfWeek\n{\n    const Sunday = 0;\n    const Monday = 1;\n    \/\/ etc.\n}$today = DaysOfWeek::Sunday;\n```There is a native extension, too. SplEnum gives the ability to emulate and create enumeration objects natively in PHP."},{"question":"What is the differences between $a != $b and $a !== $b?","answer":"!= means inequality (TRUE if $a is not equal to $b) and !== means non-identity (TRUE if $a is not identical to $b)."},{"question":"What is PDO in PHP?","answer":"PDO stands for PHP Data Object.It is a set of PHP extensions that provide a core PDO class and database, specific drivers. It provides a vendor-neutral, lightweight, data-access abstraction layer. Thus, no matter what database we use, the function to issue queries and fetch data will be same. It focuses on data access abstraction rather than database abstraction."},{"question":"Can you extend a Final defined class?","answer":"No, you cannot extend a Final defined class. A Final class or method declaration prevents child class or method overriding.[\u2b06] PWA Interview Questions"},{"question":"What is a progressive web app?","answer":"The concept of the progressive web app (PWA) was approached by Google in late 2015. They are basically web applications (Website) but have look and feel like other native mobile apps. The progressive web app enabled websites can offer functionalities such as working offline, push notifications, and device hardware access."},{"question":"Why do we need a web manifest for PWA?","answer":"A web manifest file lists all the information about the website in a JSON format. Having this file is one of the requirements to make the website installable.It usually resides in the root folder of a web app. It contains useful information, such as the app\u2019s title, paths to different-sized icons that can be used to represent the app on a mobile OS (for example, as the home screen icon), and a background color to use in loading or splash screens. This information is needed for the browser to present the web app properly when installing, and on the home screen."},{"question":"What makes an app a PWA?","answer":"There are some key principles a web app should try to observe to be identified as a PWA. It should be:\nDiscoverable, so the contents can be found through search engines.\nInstallable, so it's available on the device's home screen.\nLinkable, so you can share it by simply sending a URL. \n*** Network independent**, so it works offline or with a poor network connection.\nProgressive, so it's still usable on a basic level on older browsers, but fully-functional on the latest ones.\nRe-engageable, so it's able to send notifications whenever there's new content available.\nResponsive, so it's usable on any device with a screen and a browser \u2014 mobile phones, tablets, laptops, TVs, fridges, etc.\nSafe, so the connection between you and the app is secured against any third parties trying to get access to your sensitive data."},{"question":"What are some benefits of PWA?","answer":"Benefits of the progressive web app:\nSmaller and Faster:\nThe progressive web apps are much smaller in size than native apps. They don\u2019t even need to install. That\u2019s they are not wasting disc space and load very fast.\nResponsive Interface:\nProgressive web app (PWA) supported web pages are capable to fit in every screen sizes automatically. It could be a smartphone, tablet, desktop or laptop.\nNo Updates Required:\nMost of the mobile apps need regular weekly updates. Like the normal website, progressive web apps (PWA) are always loaded latest updated version whenever the user interaction happens and no App or Play Store approval required.\nCost Effective:\nNative mobile apps need to be developed for both Android and iOS devices separately and their development cost is very high. On the other hand, progressive web apps are had the same features but the fraction of the prior price.\nSEO Advantage:\nProgressive web apps are discoverable by search engines and load super-fast. Just like other websites, their links are sharable too. This, in other words, gives good user experience and result in SEO rank boost.\nOffline capabilities:\nDue to the support of service worker API, PWAs are accessible in offline or low internet connections.\nSecurity:\nPWAs are delivered over HTTPS connection and secure user-data over each interaction.\nPush Notifications:\nBy the support of push notifications, PWAs can interact easily with the users and provide a really amazing user experience.\nBypass the  app stores:\nPWAs don\u2019t need the App store or Google play store support. Their updated version can be directly loaded from the web server without the requirement of app store approval. On the other hand, native apps need days of approval if any new update required. There are possibilities of getting rejected or banned.\nZero installation:\nDuring browsing, progressive web app gets its own icon on phones and tablets, just like a mobile application, but without the need to go through the tedious and slow App Store installation process.\n[\u2b06] PowerShell Interview Questions"},{"question":"What is PowerShell?","answer":"PowerShell is a task-based command-line shell and scripting language built on .NET. PowerShell helps system administrators and power-users rapidly automate tasks that manage operating systems (Linux, macOS, and Windows) and processes.The consistency of PowerShell is one of its primary assets. For example, if you learn how to use the Sort-Object cmdlet, you can use that knowledge to sort the output of any cmdlet. You don't have to learn the different sorting routines of each cmdlet. PowerShell combines an interactive shell and a scripting environment. PowerShell can access command-line tools, COM objects, and .NET class libraries. PowerShell is based on object not text. The output of a command is an object. You can send the output object, through the pipeline, to another command as its input."},{"question":"What would be the PowerShell equivalent of echo?","answer":"There are several ways:\nWrite-Host: Write directly to the console, not included in function\/cmdlet output. Allows foreground and background colour to be set.\nWrite-Debug: Write directly to the console, if $DebugPreference set to Continue or Stop.\nWrite-Verbose: Write directly to the console, if $VerbosePreference set to Continue or Stop.\necho as an alias mapping to Write-Output"},{"question":"What is a PowerShell session?","answer":"A session is an environment in which PowerShell runs.Each time you start PowerShell, a session is created for you, and you can run commands in the session. You can also add items to your session, such as modules and snap-ins, and you can create items, such as variables, functions, and aliases. These items exist only in the session and are deleted when the session ends."},{"question":"What is PowerShell execution policies?","answer":"The PowerShell execution policy is the setting that determines which type of PowerShell scripts (if any) can be run on the system. PowerShell's execution policy is a safety feature that controls the conditions under which PowerShell loads configuration files and runs scripts.[\u2b06] Python Interview Questions"},{"question":"Name some characteristics of Python?","answer":"Here are a few key points:\nPython is an interpreted language. That means that, unlike languages like C and its variants, Python does not need to be compiled before it is run. Other interpreted languages include PHP and Ruby.\nPython is dynamically typed, this means that you don't need to state the types of variables when you declare them or anything like that. You can do things like x=111 and then x=\"I'm a string\" without error\nPython is well suited to object orientated programming in that it allows the definition of classes along with composition and inheritance. Python does not have access specifiers (like C++'s public, private), the justification for this point is given as \"we are all adults here\"\nIn Python, functions are first-class objects. This means that they can be assigned to variables, returned from other functions and passed into functions. Classes are also first class objects\nWriting Python code is quick but running it is often slower than compiled languages. Fortunately, Python allows the inclusion of C based extensions so bottlenecks can be optimised away and often are. The numpy package is a good example of this, it's really quite quick because a lot of the number crunching it does isn't actually done by Python"},{"question":"What are the built-in types available In Python?","answer":"Immutable built-in datatypes of Python\n* Numbers\n* Strings\n* TuplesMutable built-in datatypes of Python\n* List\n* Dictionaries\n* Sets"},{"question":"How do I modify a string?","answer":"You can\u2019t, because strings are immutable. In most situations, you should simply construct a new string from the various parts you want to assemble it from."},{"question":"Why would you use the \"pass\" statement?","answer":"Python has the syntactical requirement that code blocks cannot be empty. Empty code blocks are however useful in a variety of different contexts, for example if you are designing a new class with some methods that you don't want to implement:```python\nclass MyClass(object):\n    def meth_a(self):\n        passdef meth_b(self):\n    print \"I'm meth_b\"\nIf you were to leave out the pass, the code wouldn't run and you'll get an error:python\nIndentationError: expected an indented block\n```Other examples when we could use pass:\n* Ignoring (all or) a certain type of Exception\n* Deriving an exception class that does not add new behaviour\n* Testing that code runs properly for a few test values, without caring about the results"},{"question":"What is pickling and unpickling?","answer":"The pickle module implements a fundamental, but powerful algorithm for serializing and de-serializing a Python object structure.\nPickling - is the process whereby a Python object hierarchy is converted into a byte stream,\nUnpickling - is the inverse operation, whereby a byte stream is converted back into an object hierarchy."},{"question":"What is negative index in Python?","answer":"Python sequences can be index in positive and negative numbers. For positive index, 0 is the first index, 1 is the second index and so forth. For negative index, (-1) is the last index and (-2) is the second last index and so forth."},{"question":"Name some benefits of Python","answer":"Python is a dynamic-typed language. It means that you don\u2019t need to mention the data type of variables during their declaration.\nPython supports object orientated programming as you can define classes along with the composition and inheritance.\nFunctions in Python are like first-class objects. It suggests you can assign them to variables, return from other methods and pass as arguments.\nDeveloping using Python is quick but running it is often slower than compiled languages.\nPython has several usages like web-based applications, test automation, data modeling, big data analytics and much more."},{"question":"What are local variables and global variables in Python?","answer":"Global Variables: Variables declared outside a function or in global space are called global variables. These variables can be accessed by any function in the program.\n\n\nLocal Variables: Any variable declared inside a function is known as a local variable. This variable is present in the local space and not in the global space."},{"question":"What are the rules for local and global variables in Python?","answer":"In Python, variables that are only referenced inside a function are implicitly global. If a variable is assigned a value anywhere within the function\u2019s body, it\u2019s assumed to be a local unless explicitly declared as global.Requiring global for assigned variables provides a bar against unintended side-effects."},{"question":"What is lambda functions in Python?","answer":"A lambda function is a small anonymous function. A lambda function can take any number of arguments, but can only have one expression.Consider:\npython\nx = lambda a : a + 10\nprint(x(5)) # Output: 15"},{"question":"When to use a tuple vs list vs dictionary in Python?","answer":"Use a tuple to store a sequence of items that will not change.\nUse a list to store a sequence of items that may change.\nUse a dictionary when you want to associate pairs of two items."},{"question":"What are some drawbacks of the Python language?","answer":"The two most common valid answers to this question (by no means intended as an exhaustive list) are:\n- The Global Interpreter Lock (GIL). CPython (the most common Python implementation) is not fully thread safe. In order to support multi-threaded Python programs, CPython provides a global lock that must be held by the current thread before it can safely access Python objects. As a result, no matter how many threads or processors are present, only one thread is ever being executed at any given time. In comparison, it is worth noting that the PyPy implementation discussed earlier in this article provides a stackless mode that supports micro-threads for massive concurrency.\n- Execution speed. Python can be slower than compiled languages since it is interpreted. (Well, sort of. See our earlier discussion on this topic.)"},{"question":"Does Python have a switch-case statement?","answer":"In Python, we do not have a switch-case statement. Here, you may write a switch function to use. Else, you may use a set of if-elif-else statements. To implement a function for this, we may use a dictionary.py\ndef switch_demo(argument):\n    switcher = {\n        1: \"January\",\n        2: \"February\",\n        3: \"March\",\n        4: \"April\",\n        5: \"May\",\n        6: \"June\",\n        7: \"July\",\n        8: \"August\",\n        9: \"September\",\n        10: \"October\",\n        11: \"November\",\n        12: \"December\"\n    }\n    print switcher.get(argument, \"Invalid month\")"},{"question":"What is PEP 8?","answer":"PEP 8 is the latest Python coding standard, a set of coding recommendations. It guides to deliver more readable\u00a0Python code."},{"question":"What Is The Benefit Of Using Flask?","answer":"Flask is part of the micro-framework. Which means it will have little to no dependencies on external libraries. It makes the framework light while there is little dependency to update and less security bugs."},{"question":"Suppose lst is [2, 33, 222, 14, 25], What is lst[-1]?","answer":"Details:\nSuppose lst is [2, 33, 222, 14, 25], What is lst[-1]?It's 25. Negative numbers mean that you count from the right instead of the left. So, lst[-1] refers to the last element, lst[-2] is the second-last, and so on."},{"question":"Given variables a and b, switch their values so that b has the value of a, and a has the value of b without using an intermediary variable.","answer":"py\na, b = b, a"},{"question":"How do you list the functions in a module?","answer":"Use the dir() method to list the functions in a module:py\nimport some_module\nprint dir(some_module)"},{"question":"What are descriptors?","answer":"Descriptors were introduced to Python way back in version 2.2. They provide the developer with the ability to add managed attributes to objects. The methods needed to create a descriptor are __get__, __set__ and __delete__. If you define any of these methods, then you have created a descriptor.Descriptors power a lot of the magic of Python\u2019s internals. They are what make properties, methods and even the super function work. They are also used to implement the new style classes that were also introduced in Python 2.2.[\u2b06] React Interview Questions"},{"question":"What is React?","answer":"React is an open-source JavaScript library created by Facebook for building complex, interactive UIs in web and mobile applications. React\u2019s core purpose is to build UI components; it is often referred to as just the \u201cV\u201d (View) in an \u201cMVC\u201d architecture."},{"question":"How would you write an inline style in React?","answer":"For example: ```html\n```\n\n\n#### What is JEST? \n**Jest** is a JavaScript unit testing framework made by Facebook based on Jasmine and provides automated mock creation and a jsdom environment. It's often used for testing React components.\n\n\n#### What are the advantages of ReactJS? \nBelow are the advantages of ReactJS:\n1. Increases the application\u2019s performance with Virtual DOM\n2. JSX makes code is easy to read and write\n3. It renders both on client and server side\n4. Easy to integrate with other frameworks (Angular, BackboneJS) since it is only a view library\n5. Easy to write UI Test cases and integration with tools such as JEST.\n\n\n#### How to write comments in ReactJS? \nThe comments in ReactJS\/JSX is similar to javascript multiline comments which are wrapped with curly braces:\n\n**Single-line comments:**\n```js\n\n  {\/* Single-line comments *\/}\n  Welcome {user}, Let's play React\n\n```\n\n**Multi-line comments:**\n```js\n\n  {\/* Multi-line comments for more than\n   one line *\/}\n  Welcome {user}, Let's play React\n\n```\n\n\n#### What is context? \n**Context** provides a way to pass data through the component tree without having to pass props down manually at every level. For example, authenticated user, locale preference, UI theme need to be accessed in the application by many components.\n\n```js\nconst {Provider, Consumer} = React.createContext(defaultValue);\n```\n\n\n#### What is virtual DOM? \n**The virtual DOM (VDOM)** is an in-memory representation of Real DOM. The representation of a UI is kept in memory and synced with the \u201creal\u201d DOM. It\u2019s a step that happens between the render function being called and the displaying of elements on the screen. This entire process is called reconciliation.\n\n\n#### How does React work? \nReact creates a virtual DOM. When state changes in a component it firstly runs a \"diffing\" algorithm, which identifies what has changed in the virtual DOM. The second step is reconciliation, where it updates the DOM with the results of diff.\n\n\n#### What is the use of refs? \nThe **ref** is used to return a reference to the element. They should be avoided in most cases, however, they can be useful when we need direct access to DOM element or an instance of a component.\n\n\n#### What is props in ReactJS? \n**Props** are inputs to a React component. They are single values or objects containing a set of values that are passed to React Components on creation using a naming convention similar to HTML-tag attributes. i.e, *They are data passed down from a parent component to a child component.*\n\nThe primary purpose of props in React is to provide following component functionality:\n\n1. Pass custom data to your React component.\n2. Trigger `state` changes.\n3. Use via `this.props.reactProp` inside component's `render()` method.\n\nFor example, let us create an element with reactProp property,\n```js\n \n```\n\nThis `reactProp` (or whatever you came up with) name then becomes a property attached to React's native props object which originally already exists on all components created using React library.\n\n```js\n props.reactProp;\n```\n\n\n#### What are the major features of ReactJS? \nThe major features of ReactJS are as follows,\n\n- It uses **VirtualDOM** instead RealDOM considering that RealDOM manipulations are expensive.\n- Supports **server-side rendering**\n- Follows **Unidirectional** data flow or data binding\n- Uses **reusable\/composable** UI components to develop the view\n\n\n#### What is ReactJS? \nReactJS is an **open-source frontend JavaScript library** which is used for building user interfaces especifically for single page applications. It is used for handling view layer for web and mobile apps. React was created by Jordan Walke, a software engineer working for Facebook. ReactJS was first deployed on Facebook\u2019s newsfeed in 2011 and on Instagram.com in 2012.\n\n\n#### What are props in React? \nProps are properties that are passed into a child component from its parent, and are readonly.\n\n\n#### What is Flux? \nUnidrectional application flow paradigm popular a few years back in React; mostly superceded by Redux these days.\n\n\n#### How error boundaries handled in React (15)? \nReact15 provided very basic support for error boundaries using the method name **unstable_handleError**. Later this has been renamed as **componentDidCatch** starting from React16 beta release.\n\n\n#### What are the limitations of ReactJS? \nBelow are the list of limitations:\n\n1. React is just a view library, not a full-blown framework\n2. There is a learning curve for beginners who are new to web development.\n3. Integrating React.js into a traditional MVC framework requires some additional configuration\n4. The code complexity increases with inline templating and JSX.\n5. Too many smaller components leading to over-engineering or boilerplate\n\n\n#### What\u2019s the difference between an \"Element\" and a \"Component\" in React? \nSimply put, a React element describes what you want to see on the screen. Not so simply put, a React element is an object representation of some UI.\n\nA React component is a function or a class which optionally accepts input and returns a React element (typically via JSX which gets transpiled to a createElement invocation).\n\n\n#### What are stateful components? \nIf the behaviour of a component is dependent on the state of the component then it can be termed as _stateful component_. These Stateful components are always class components and have a state that gets initialized in the constructor.\n\n```js\nclass App extends Component {\n constructor(props) {\n  super(props);\n  this.state = { count: 0 };\n }\n\n render() {\n    \/\/ omitted for brevity\n  }\n}\n```\n\n\n#### What are stateless components? \nIf the behaviour is independent of its state then it can be a _stateless component_. You can use either a function or a class for creating stateless components. But unless you need to use a lifecycle hook in your components, you should go for stateless functional components. There are a lot of benefits if you decide to use stateless functional components here; they are easy to write, understand, and test, and you can avoid the this keyword altogether.\n\n\n#### What are portals in ReactJS? \nPortal is a recommended way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.\n\n```js\nReactDOM.createPortal(child, container);\n```\n\nThe first argument (child) is any renderable React child, such as an element, string, or fragment. The second argument (container) is a DOM element.\n\n\n#### What are fragments? \nIt's common pattern in React which is used for a component to return multiple elements. Fragments let you group a list of children without adding extra nodes to the DOM.\n\n```js\nrender() {\n  return (\n    \n\n\n\n\n  );\n}\n```\n\nThere is also a shorter syntax which is not supported in many tools\n\n```js\nrender() {\n    return (\n      <>\n         \n\n\n      \n    );\n  }\n```\n\n\n#### Why is it necessary to capitalize the components? \nIt is necessary because components are not the DOM element but they are constructors. If they are not capitalized, they can cause various issues and can confuse developers with several elements.\n\n\n#### What is reconciliation? \nWhen a component\u2019s props or state change, React decides whether an actual DOM update is necessary by comparing the newly returned element with the previously rendered one. When they are not equal, React will update the DOM. This process is called **reconciliation**.\n\n\n#### What is the purpose of using super constructor with props argument? \nA child class constructor cannot make use of **this** reference until `super()` method has been called. The same applies for ES6 sub-classes as well. The main reason of passing props parameter to super() call is to access this.props in your child constructors.\n\n**Passing props:**\n```js\nclass MyComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        console.log(this.props);  \/\/ Prints { name: 'sudheer',age: 30 }\n    }\n}\n```\n**Not passing props:**\n```js\nclass MyComponent extends React.Component {\n    constructor(props) {\n        super();\n        console.log(this.props); \/\/ Prints undefined\n        \/\/ But Props parameter is still available\n        console.log(props); \/\/ Prints { name: 'sudheer',age: 30 }\n    }\n\n    render() {\n        \/\/ No difference outside constructor\n        console.log(this.props) \/\/ Prints { name: 'sudheer',age: 30 }\n    }\n}\n```\n\nThe above code snippets reveals that this.props behavior is different only with in the constructor. It would be same outside the constructor.\n\n\n#### When to use a Class Component over a Functional Component? \nIf the component need state or lifecycle methods then use class component otherwise use functional component.\n\n\n#### What are the advantages of using React? \n- It is easy to know how a component is rendered, you just need to look at the render function.\n- JSX makes it easy to read the code of your components. It is also really easy to see the layout, or how components are plugged\/combined with each other.\n- You can render React on the server-side. This enables improves SEO and performance.\n- It is easy to test.\n- You can use React with any framework (Backbone.js, Angular.js) as it is only a view layer.\n\n\n#### What are Higher-Order components? \nA higher-order component **(HOC)** is a function that takes a component and returns a new component. Basically, it\u2019s a pattern that is derived from React\u2019s compositional nature\nWe call them as **\u201cpure\u2019 components\u201d**  because they can accept any dynamically provided child component but they won\u2019t modify or copy any behavior from their input components.\n```js\nconst EnhancedComponent = higherOrderComponent(WrappedComponent);\n```\nHOC can be used for many use cases as below,\n\n1. Code reuse, logic and bootstrap abstraction\n2. Render High jacking\n3. State abstraction and manipulation\n4. Props manipulation\n\n\n#### What are controlled components? \nA ReactJS component that controls the input elements within the forms on subsequent user input is called **\u201cControlled component\u201d**. i.e, every state mutation will have an associated handler function.\n\nFor example, to write all the names in uppercase letters, we use handleChange as below,\n\n```js\nhandleChange(event) {\n    this.setState({\n        value: event.target.value.toUpperCase()\n    });\n}\n```\n\n\n#### What is the difference between a Presentational component and a Container component? \n* **Presentational components** are concerned with _how things look_. They generally receive data and callbacks exclusively via props. These components rarely have their own state, but when they do it generally concerns UI state, as opposed to data state.\n\n* **Container components** are more concerned with _how things work_. These components provide the data and behavior to presentational or other container components. They call Flux actions and provide these as callbacks to the presentational components. They are also often stateful as they serve as data sources. \n\n#### How to create refs? \n**Refs** are created using `React.createRef()` method and attached to React elements via the ref attribute. In order to use refs throughout the component, just assign the ref to the instance property with in constructor.\n```js\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.myRef = React.createRef();\n  }\n  render() {\n    return ;\n  }\n}\n```\nAnd:\n```js\nclass UserForm extends Component {\n  handleSubmit = () => {\n    console.log(\"Input Value is: \", this.input.value)\n  }\n  render () {\n    return (\n      \n this.input = input} \/> \/\/ Access DOM input in handle submit\n        Submit\n\n    )\n  }\n}\n```\nWe can also use it in functional components with the help of closures.\n\n\n#### What are the differences between a class component and functional component? \n- **Class components** allows you to use additional features such as local state and lifecycle hooks. Also, to enable your component to have direct access to your store and thus holds state.\n\n- When your component just receives props and renders them to the page, this is a **stateless component**, for which a pure function can be used. These are also called dumb components or presentational components.\n\n\n#### How is React different from AngularJS (1.x)? \nFor example, AngularJS (1.x) approaches building an application by extending HTML markup and injecting various constructs (e.g. Directives, Controllers, Services) at runtime. As a result, AngularJS is very opinionated about the greater architecture of your application \u2014 these abstractions are certainly useful in some cases, but they come at the cost of flexibility.\n\nBy contrast, React focuses exclusively on the creation of components, and has few (if any) opinions about an application\u2019s architecture. This allows a developer an incredible amount of flexibility in choosing the architecture they deem \u201cbest\u201d \u2014 though it also places the responsibility of choosing (or building) those parts on the developer.\n\n\n#### What happens during the lifecycle of a React component? \nAt the highest level, React components have lifecycle events that fall into three general categories:\n\n1.  Initialization\n2.  State\/Property Updates\n3.  Destruction\n\n\n\n\n#### What is the difference between state and props? \nThe *state* is a data structure that starts with a default value when a Component mounts. It may be mutated across time, mostly as a result of user events.\n\n*Props* (short for properties) are a Component's configuration. They are received from above and immutable as far as the Component receiving them is concerned. A Component cannot change its props, but it is responsible for putting together the props of its child Components. Props do not have to just be data - callback functions may be passed in as props.\n\n\n#### What is inline conditional expressions? \nYou can use either if statements or ternary expressions which are available from JS to conditionally render expressions. Apart from these approaches, you can also embed any expressions in JSX by wrapping them in curly braces and then followed by JS logical operator(&&).\n```js\nHello!\n   {messages.length > 0 &&\n\n    You have {messages.length} unread messages.\n\n```\n\n\n#### How to pass a parameter to an event handler or callback? \nYou can use an arrow function to wrap around an event handler and pass parameters:\n\n```js\n this.handleClick(id)} \/>\n```\nThis is equivalent to calling .bind as below,\n```js\n\n```\n\n\n#### What is the purpose of callback function as an argument of setState? \nThe callback function is invoked when `setState` finished and the component gets rendered. Since `setState` is **asynchronous** the callback function is used for any post action.\n\n**Note:** It is recommended to use lifecycle method rather this callback function.\n```js\nsetState({name: 'sudheer'}, () => console.log('The name has updated and component re-rendered'));\n```\n\n\n#### What happens when you call \"setState\"? \nThe first thing React will do when setState is called is merge the object you passed into setState into the current state of the component. This will kick off a process called reconciliation. The end goal of reconciliation is to, in the most efficient way possible, update the UI based on this new state.\n\nTo do this, React will construct a new tree of React elements (which you can think of as an object representation of your UI). Once it has this tree, in order to figure out how the UI should change in response to the new state, React will diff this new tree against the previous element tree.\n\nBy doing this, React will then know the exact changes which occurred, and by knowing exactly what changes occurred, will able to minimize its footprint on the UI by only making updates where absolutely necessary.\n\n\n#### What is the difference between state and props? \nBoth **props** and **state** are plain JavaScript objects. While both of them hold information that influences the output of render, they are different in their functionality with respect to component. i.e, \n* Props get passed to the component similar to function parameters \n* state is managed within the component similar to variables declared within a function.\n\n\n#### What is state in ReactJS? \n**State** of a component is an object that holds some information that may change over the lifetime of the component. We should always try to make our state as simple as possible and minimize the number of stateful components.\n\n Let's create user component with message state,\n\n ```js\n class User extends React.Component {\n    constructor(props) {\n       super(props);\n\n       this.state = {\n          message: \"Welcome to React world\",\n       }\n    }\n    render() {\n       return (\n          \n{this.state.message}\n\n       );\n    }\n }\n ```\n\n\n#### What are refs used for in React? \n*Refs* are an escape hatch which allow you to get direct access to a DOM element or an instance of a component. In order to use them you add a ref attribute to your component whose value is a callback function which will receive the underlying DOM element or the mounted instance of the component as its first argument.\n\n```js\nclass UnControlledForm extends Component {\n  handleSubmit = () => {\n    console.log(\"Input Value: \", this.input.value)\n  }\n  render () {\n    return (\n      \n this.input = input} \/>\n        Submit\n\n    )\n  }\n}\n```\nAbove notice that our input field has a ref attribute whose value is a function. That function receives the actual DOM element of input which we then put on the instance in order to have access to it inside of the handleSubmit function.\n\nIt\u2019s often misconstrued that you need to use a class component in order to use refs, but refs can also be used with functional components by leveraging closures in JavaScript.\n\n```js\nfunction CustomForm ({handleSubmit}) {\n  let inputElement\n  return (\n     handleSubmit(inputElement.value)}>\n       inputElement = input} \/>\n      Submit\n\n  )\n}\n```\n\n\n#### When rendering a list what is a key and what is it's purpose? \n*Keys* help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside the array to give the elements a stable identity. The best way to pick a key is to use a string that uniquely identifies a list item among its siblings. \n\n```js\nrender () {\n  return (\n    \n      {this.state.todoItems.map(({task, uid}) => {\n        return {task}\n      })}\n    \n  )\n}\n```\n\nMost often you would use IDs from your data as keys. When you don't have stable IDs for rendered items, you may use the item index as a key as a last resort. It is not recommend to use indexes for keys if the items can reorder, as that would be slow. \n\n\n#### How to create components in ReactJS? \nThere are two possible ways to create ReactJS Components.\n\n1. **Functional components:** This is the simplest way to create ReactJS components. It accepts props as an Object and returns ReactJS elements. We call it as \u201cfunctional\u201d because those are pure JavaScript functions.\n```js\n    function Greeting(props) {\n       return  Hello, {props.message}\u2028\n    }\n```\n\n2. **Class components:** You can also use Es6 class to define component. The above functional component can be written as below,\n```js\n      class Greeting extends React.Component {\n        render() {\n                return Hello, {this.props.message};\n            }\n        }\n```\n\n\n\n#### What is the difference between Element and Component? \nAn **element** is a plain object describing what you want to appear on the screen in terms of the DOM nodes or other components. Elements can contain other elements in their props. Creating a React element is cheap. Once an element is created, it is never mutated.\nThe object representation of React element would be as follows,\n```js\nconst element = React.createElement(\n  'div',\n  {id: 'login-btn'},\n  'Login'\n)\n```\nThe above createElement returns as object as below,\n```js\n{\n  type: 'div',\n  props: {\n    children: 'Login',\n    id: 'login-btn'\n  }\n}\n```\nAnd finally it renders to the DOM using ReactDOM.render as below,\n```js\nLogin\n```\nWhereas a **component** can be declared in several different ways. It can be a class with a render() method. Alternatively, in simple cases, it can be defined as a function. In either case, it takes props as an input, and returns an element tree as the output. JSX transpiled as createElement at the end.\n```js\nfunction Button ({ onLogin }) {\n  return React.createElement(\n    'div',\n    {id: 'login-btn', onClick: onLogin},\n    'Login'\n  )\n}\n```\n\n\n#### What is JSX? \nJSX is a syntax notation for **JavaScript XML**(XML-like syntax extension to ECMAScript). It stands for JavaScript XML. It provides expressiveness of JavaScript along with HTML like template syntax. For example, the below text inside h1 tag return as javascript function to the render function,\n\n```js\n   render(){\n        return(\n         \n Welcome to React world!!\n\n        );\n     }\n```\n\n\n#### Describe how events are handled in React. \nIn order to solve cross browser compatibility issues, your event handlers in React will be passed instances of SyntheticEvent, which is React\u2019s cross-browser wrapper around the browser\u2019s native event. These synthetic events have the same interface as native events you\u2019re used to, except they work identically across all browsers.\n\nWhat\u2019s mildly interesting is that React doesn\u2019t actually attach events to the child nodes themselves. React will listen to all events at the top level using a single event listener. This is good for performance and it also means that React doesn\u2019t need to worry about keeping track of event listeners when updating the DOM.\n\n\n#### Where in a React component should you make an AJAX request? \n`componentDidMount` is where an AJAX request should be made in a React component. \n\nThis method will be executed when the component \u201cmounts\u201d (is added to the DOM) for the first time. This method is only executed once during the component\u2019s life. Importantly, you can\u2019t guarantee the AJAX request will have resolved before the component mounts. If it doesn't, that would mean that you\u2019d be trying to setState on an unmounted component, which would not work. Making your AJAX request in `componentDidMount` will guarantee that there\u2019s a component to update.\n\n\n#### What is the difference between component and container in react Redux? \n**Component** is part of the React API. A Component is a class or function that describes part of a React UI.\n**Container** is an informal term for a React component that is connected to a redux store. Containers receive Redux state updates and dispatch actions, and they usually don't render DOM elements; they delegate rendering to presentational child components.\n\n\n#### Where is the state kept in a React + Redux application? \nIn the store.\n\n\n#### What is the difference between React Native and React? \n* **ReactJS** is a JavaScript library, supporting both front end web and being run on the server, for building user interfaces and web applications.\n\n* **React Native** is a mobile framework that compiles to native app components, allowing you to build native mobile applications (iOS, Android, and Windows) in JavaScript that allows you to use ReactJS to build your components, and implements ReactJS under the hood.\n\n\n#### How do we pass a property from a parent component props to a child component? \nFor example: \n```html\n\n```\n\n\n#### What is the point of Redux? \nApplication state management that is easy to reason about, maintain and manage in an asynchronous web application environment.\n\n\n#### What does it mean for a component to be mounted in React? \nIt has a corresponding element created in the DOM and is connected to that.\n\n\n#### What is Flow? \n**Flow** is a static type checker, designed to find type errors in JavaScript programs, created by Facebook. Flow types can express much more fine-grained distinctions than traditional type systems. For example, Flow helps you catch errors involving null, unlike most type systems.\n\n\n#### What happens when you call setState? \nThe state property is updated in a React component with the object passed into setState, and this is done asynchronously. It tells React that this component and its children need to be re-rendered, but React may not do this immediately (it may batch these state update requests for better performance).\n\n\n#### What's the difference between a controlled component and an uncontrolled one in React? \n* A controlled component has its state completely driven by React,\n* Uncontrolled components can maintain their own internal state. E.g., a textarea's value.\n\n\n#### How would you prevent a component from rendering in React? \n Return `null` from the render method.\n\n\n#### How do you prevent the default behavior in an event callback in React? \nYou call `e.preventDefault();` on the event e passed into the callback."}]